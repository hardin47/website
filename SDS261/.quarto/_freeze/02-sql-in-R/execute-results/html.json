{
  "hash": "0403ad37cbd06e33bc10ba18dc8d3a07",
  "result": {
    "markdown": "# SQL in R and DBeaver {#sec-sql-R}\n\n\n\n\n\nThere are three ways to engage with SQL using R.  We will discuss each of them in this chapter, and we will expand on the third method in what follows (using interfaces like DBeaver, and RStudio, to run actual SQL code directly).\n\n1. Using the package **dbplyr** **R** will directly translate **dplyr** code into **SQL**.\n2. Using the **DBI** package, we can send **SQL** queries through an `r` chunk.\n3. Using a `sql` chunk, we can write actual **SQL** code inside a quarto document.\n\n\n\n## Translating **dplyr** code into **SQL** {#sec-dplyr-seq}\n\nLet's go back to the **airlines** database to try out some things that we already know how to do in **R**.  Recall that we need the **DBI** and **RMariaDB** packages to connect to **R**; we need the **dbplyr** package to translate **SQL** code into **R**.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\n\ncon_air <- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n```\n:::\n\n\nThe function `dbListTables()` in the **DBI** package will tell us what tables exist in the **airlines** database.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nDBI::dbListTables(con_air)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"airports\" \"carriers\" \"flights\"  \"planes\"  \n```\n:::\n\n```{.r .cell-code}\nflights <- tbl(con_air, \"flights\")\ncarriers <- tbl(con_air, \"carriers\")\n```\n:::\n\n\nLet's ask a few questions about the data set using data wrangling techniques that should already be familiar.\n\n* Over what years is the `flights` data taken?\n\nTo start, let's write the commands using tidy **dplyr** code.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nyrs <- flights |>\n  summarize(min_year = min(year), max_year = max(year))\n\nyrs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [1 x 2]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  min_year max_year\n     <int>    <int>\n1     2010     2017\n```\n:::\n:::\n\n\nBecause `flights` is not actually a `data.frame` in **R** (but instead a `tbl` in **SQL**), the work that was done above was actually performed in **SQL**.  To see the **SQL** code, we can use the function `show_query`.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nshow_query(yrs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT MIN(`year`) AS `min_year`, MAX(`year`) AS `max_year`\nFROM `flights`\n```\n:::\n:::\n\n\nNote the similarity between the **R** code and the **SQL** code.  We can see `SELECT` and `MIN` and `MAX` which are familiar.  The `AS` function is new, but maybe it that `AS` does the job of assigning a new name to the output columns.  `FROM` is also new and does the job of piping in a data set to use.\n\n* Create a data set containing only flights between `LAX` and `BOS` in 2012.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nla_bos <- flights |>\n  filter(year == 2012 & ((origin == \"LAX\" & dest == \"BOS\") | \n           (origin == \"BOS\" & dest == \"LAX\"))) \n\n\nla_bos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [?? x 21]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <int>    <int>          <int>\n1  2012    10     1      710            710         0     1538           1540\n2  2012    10     1      818            820        -2     1644           1645\n3  2012    10     1      855            844        11     1742           1712\n4  2012    10     1     1219           1210         9     2043           2038\n5  2012    10     1     1302           1300         2     2133           2125\n6  2012    10     1     1436           1445        -9     2331           2309\n# ℹ more rows\n# ℹ 13 more variables: arr_delay <int>, carrier <chr>, tailnum <chr>,\n#   flight <int>, origin <chr>, dest <chr>, air_time <int>, distance <int>,\n#   cancelled <int>, diverted <int>, hour <int>, minute <int>, time_hour <dttm>\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nshow_query(la_bos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT *\nFROM `flights`\nWHERE (`year` = 2012.0 AND ((`origin` = 'LAX' AND `dest` = 'BOS') OR (`origin` = 'BOS' AND `dest` = 'LAX')))\n```\n:::\n:::\n\n\nThe `WHERE` function in **SQL** acts as `filter()` did in **R**; `&` has been translated to `AND`, and `|` has been translated to `OR`.\n\n\nAs might be expected, **dbplyr** doesn't translate every **R** command into **SQL**.  After all, **SQL** is not a statistical software and doesn't, for example, have a mechanism for creating data visualizations.  To track which **R** commands are connected to **SQL** see the <a href = \"https://dbplyr.tidyverse.org/reference/\" target= \"_blank\">**dbplyr** reference sheet</a>.\n\n\nBecause the data set has been subsetted substantially, we could pull it into **R** to create an **R** object.  Note that now **R** is aware of the size of the entire data frame (7064 rows and 21 columns).  The `la_bos` object now exists in the **R** environment and can be explored through the IDE.  \n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\nBe careful with `collect()`. Don't use `collect()` on large data frames that won't fit in an **R** environment.\n:::\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nla_bos <- la_bos |>\n  collect()\n\nla_bos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7,064 × 21\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <int>    <int>          <int>\n1  2012    10     1      710            710         0     1538           1540\n2  2012    10     1      818            820        -2     1644           1645\n3  2012    10     1      855            844        11     1742           1712\n4  2012    10     1     1219           1210         9     2043           2038\n5  2012    10     1     1302           1300         2     2133           2125\n6  2012    10     1     1436           1445        -9     2331           2309\n# ℹ 7,058 more rows\n# ℹ 13 more variables: arr_delay <int>, carrier <chr>, tailnum <chr>,\n#   flight <int>, origin <chr>, dest <chr>, air_time <int>, distance <int>,\n#   cancelled <int>, diverted <int>, hour <int>, minute <int>, time_hour <dttm>\n```\n:::\n:::\n\n\n@sec-sql-clauses will explore more **SQL** queries and using **SQL** verbs. For now, let's continue learning about the different ways **R** can talk to **SQL**.\n\nAlways a good idea to terminate the **SQL** connection when you are done with it.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ndbDisconnect(con_air, shutdown = TRUE)\n```\n:::\n\n\n## SQL queries through the **DBI** package\n\nUsing **R** as a wrapper, we can send actual **SQL** code to query data from the connection.  It is okay if you aren't yet able to write **SQL** commands from scratch, but try to figure out what the command is asking for.  As mentioned above, we will start from scratch to learn **SQL** commands in @sec-sql-clauses.\n\nStart by setting up the **SQL** connection in the same way.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ncon_air <- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n```\n:::\n\n\n\n* Look at the first few rows of the `flights` data.\n\nBecause the `flights` data is not an **R** object, we can't open it in **R** to explore the variables.  If we want to see a small bit of the data, we can `SELECT` **everything** (i.e, `*`) from the `flights` table but `LIMIT` the query to only the first eight observations.  \n\nNote that the code in the `dbGetQuery()` **R** function is written in **SQL** not in **R**.  \n\nA semicolon (`;`) is typically used to indicate the termination of a **SQL** statement.  They are not always required (particularly when only one statement is being sent), however, it is good practice to use a semicolon at the end of each **SQL** statement.  (Indeed, some **SQL** dialects require the semicolon at the end of every statement, regardless of whether or not there are more statements following.)\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nDBI::dbGetQuery(con_air,\n                \"SELECT * FROM flights LIMIT 8;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n1 2010    10   1        1           2100       181      159           2320\n2 2010    10   1        1           1920       281      230           2214\n3 2010    10   1        3           2355         8      339            334\n4 2010    10   1        5           2200       125       41           2249\n5 2010    10   1        7           2245        82      104           2347\n6 2010    10   1        7             10        -3      451            500\n7 2010    10   1        7           2150       137      139           2337\n8 2010    10   1        8             15        -7      538            537\n  arr_delay carrier tailnum flight origin dest air_time distance cancelled\n1       159      XE  N11137   2558    EWR  OMA      162     1133         0\n2       256      B6  N659JB    562    FLL  SWF      131     1119         0\n3         5      B6  N563JB    701    JFK  SJU      196     1597         0\n4       112      XE  N16559   5982    IAD  BNA       82      542         0\n5        77      OO  N908SW   6433    LAX  FAT       37      209         0\n6        -9      AA  N3FRAA    700    LAX  DFW      150     1235         0\n7       122      DL  N347NW   1752    ATL  IAD       70      533         0\n8         1      CO  N73283   1740    SMF  IAH      193     1609         0\n  diverted hour minute           time_hour\n1        0   21      0 2010-10-01 21:00:00\n2        0   19     20 2010-10-01 19:20:00\n3        0   23     55 2010-10-01 23:55:00\n4        0   22      0 2010-10-01 22:00:00\n5        0   22     45 2010-10-01 22:45:00\n6        0    0     10 2010-10-01 00:10:00\n7        0   21     50 2010-10-01 21:50:00\n8        0    0     15 2010-10-01 00:15:00\n```\n:::\n:::\n\n* How many flights per year are in the `flights` table?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ndbGetQuery(con_air, \n  \"SELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year num_flights\n1 2016     5617658\n2 2017     5674621\n3 2015     5819079\n4 2014     5819811\n5 2011     6085281\n6 2012     6096762\n7 2013     6369482\n8 2010     6450117\n```\n:::\n:::\n\n\nNote that we've now `SELECT`ed two variables: `year` and `num_flights` (which we created along the way using `count(*)` which is written as `n()` in **R**) `FROM` the `flights` table.  Then we `GROUP BY` the `year` variable which retroactively acts on the `count(*)` function.  And last, we `ORDER BY` (which is similar to `arrange()`) the new `num_flights` variable.\n\n\nAlways a good idea to terminate the **SQL** connection when you are done with it.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ndbDisconnect(con_air, shutdown = TRUE)\n```\n:::\n\n\n\n## Direct **SQL** queries through a `sql` chunk\n\nNotice that the formatting of the next few chunks is slightly different. Instead of reporting only the inside / code of the chunk, the entire chunk is printed.  The **SQL** chunks are given by `{sql}` instead of `{r}` and each **SQL** chunk is required to connect to a particular database (through the `con_air` connection).\n\nThe same queries have been run.\n\nStart by setting up the **SQL** connection in the same way.\n\n\n::: {.cell fig.asp='0.618'}\n\n````{.cell-code}\n```{{r}}\ncon_air <- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n```\n````\n:::\n\n::: {.cell fig.asp='0.618'}\n\n````{.cell-code}\n```{{sql}}\n#| connection: con_air\n\nSELECT * FROM flights LIMIT 8;\n```\n````\n\n\n<div class=\"knitsql-table\">\n<table>\n<caption>8 records</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:right;\"> month </th>\n   <th style=\"text-align:right;\"> day </th>\n   <th style=\"text-align:right;\"> dep_time </th>\n   <th style=\"text-align:right;\"> sched_dep_time </th>\n   <th style=\"text-align:right;\"> dep_delay </th>\n   <th style=\"text-align:right;\"> arr_time </th>\n   <th style=\"text-align:right;\"> sched_arr_time </th>\n   <th style=\"text-align:right;\"> arr_delay </th>\n   <th style=\"text-align:left;\"> carrier </th>\n   <th style=\"text-align:left;\"> tailnum </th>\n   <th style=\"text-align:right;\"> flight </th>\n   <th style=\"text-align:left;\"> origin </th>\n   <th style=\"text-align:left;\"> dest </th>\n   <th style=\"text-align:right;\"> air_time </th>\n   <th style=\"text-align:right;\"> distance </th>\n   <th style=\"text-align:right;\"> cancelled </th>\n   <th style=\"text-align:right;\"> diverted </th>\n   <th style=\"text-align:right;\"> hour </th>\n   <th style=\"text-align:right;\"> minute </th>\n   <th style=\"text-align:left;\"> time_hour </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 2100 </td>\n   <td style=\"text-align:right;\"> 181 </td>\n   <td style=\"text-align:right;\"> 159 </td>\n   <td style=\"text-align:right;\"> 2320 </td>\n   <td style=\"text-align:right;\"> 159 </td>\n   <td style=\"text-align:left;\"> XE </td>\n   <td style=\"text-align:left;\"> N11137 </td>\n   <td style=\"text-align:right;\"> 2558 </td>\n   <td style=\"text-align:left;\"> EWR </td>\n   <td style=\"text-align:left;\"> OMA </td>\n   <td style=\"text-align:right;\"> 162 </td>\n   <td style=\"text-align:right;\"> 1133 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 21 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 21:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1920 </td>\n   <td style=\"text-align:right;\"> 281 </td>\n   <td style=\"text-align:right;\"> 230 </td>\n   <td style=\"text-align:right;\"> 2214 </td>\n   <td style=\"text-align:right;\"> 256 </td>\n   <td style=\"text-align:left;\"> B6 </td>\n   <td style=\"text-align:left;\"> N659JB </td>\n   <td style=\"text-align:right;\"> 562 </td>\n   <td style=\"text-align:left;\"> FLL </td>\n   <td style=\"text-align:left;\"> SWF </td>\n   <td style=\"text-align:right;\"> 131 </td>\n   <td style=\"text-align:right;\"> 1119 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 19 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 19:20:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 2355 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 339 </td>\n   <td style=\"text-align:right;\"> 334 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> B6 </td>\n   <td style=\"text-align:left;\"> N563JB </td>\n   <td style=\"text-align:right;\"> 701 </td>\n   <td style=\"text-align:left;\"> JFK </td>\n   <td style=\"text-align:left;\"> SJU </td>\n   <td style=\"text-align:right;\"> 196 </td>\n   <td style=\"text-align:right;\"> 1597 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 23 </td>\n   <td style=\"text-align:right;\"> 55 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 23:55:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 2200 </td>\n   <td style=\"text-align:right;\"> 125 </td>\n   <td style=\"text-align:right;\"> 41 </td>\n   <td style=\"text-align:right;\"> 2249 </td>\n   <td style=\"text-align:right;\"> 112 </td>\n   <td style=\"text-align:left;\"> XE </td>\n   <td style=\"text-align:left;\"> N16559 </td>\n   <td style=\"text-align:right;\"> 5982 </td>\n   <td style=\"text-align:left;\"> IAD </td>\n   <td style=\"text-align:left;\"> BNA </td>\n   <td style=\"text-align:right;\"> 82 </td>\n   <td style=\"text-align:right;\"> 542 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 22:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 2245 </td>\n   <td style=\"text-align:right;\"> 82 </td>\n   <td style=\"text-align:right;\"> 104 </td>\n   <td style=\"text-align:right;\"> 2347 </td>\n   <td style=\"text-align:right;\"> 77 </td>\n   <td style=\"text-align:left;\"> OO </td>\n   <td style=\"text-align:left;\"> N908SW </td>\n   <td style=\"text-align:right;\"> 6433 </td>\n   <td style=\"text-align:left;\"> LAX </td>\n   <td style=\"text-align:left;\"> FAT </td>\n   <td style=\"text-align:right;\"> 37 </td>\n   <td style=\"text-align:right;\"> 209 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 45 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 22:45:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> -3 </td>\n   <td style=\"text-align:right;\"> 451 </td>\n   <td style=\"text-align:right;\"> 500 </td>\n   <td style=\"text-align:right;\"> -9 </td>\n   <td style=\"text-align:left;\"> AA </td>\n   <td style=\"text-align:left;\"> N3FRAA </td>\n   <td style=\"text-align:right;\"> 700 </td>\n   <td style=\"text-align:left;\"> LAX </td>\n   <td style=\"text-align:left;\"> DFW </td>\n   <td style=\"text-align:right;\"> 150 </td>\n   <td style=\"text-align:right;\"> 1235 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 00:10:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 2150 </td>\n   <td style=\"text-align:right;\"> 137 </td>\n   <td style=\"text-align:right;\"> 139 </td>\n   <td style=\"text-align:right;\"> 2337 </td>\n   <td style=\"text-align:right;\"> 122 </td>\n   <td style=\"text-align:left;\"> DL </td>\n   <td style=\"text-align:left;\"> N347NW </td>\n   <td style=\"text-align:right;\"> 1752 </td>\n   <td style=\"text-align:left;\"> ATL </td>\n   <td style=\"text-align:left;\"> IAD </td>\n   <td style=\"text-align:right;\"> 70 </td>\n   <td style=\"text-align:right;\"> 533 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 21 </td>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 21:50:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> -7 </td>\n   <td style=\"text-align:right;\"> 538 </td>\n   <td style=\"text-align:right;\"> 537 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> CO </td>\n   <td style=\"text-align:left;\"> N73283 </td>\n   <td style=\"text-align:right;\"> 1740 </td>\n   <td style=\"text-align:left;\"> SMF </td>\n   <td style=\"text-align:left;\"> IAH </td>\n   <td style=\"text-align:right;\"> 193 </td>\n   <td style=\"text-align:right;\"> 1609 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:left;\"> 2010-10-01 00:15:00 </td>\n  </tr>\n</tbody>\n</table>\n\n</div>\n:::\n\n::: {.cell fig.asp='0.618'}\n\n````{.cell-code}\n```{{sql}}\n#| connection: con_air\n\nSELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;\n```\n````\n\n\n<div class=\"knitsql-table\">\n<table>\n<caption>8 records</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:right;\"> num_flights </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2016 </td>\n   <td style=\"text-align:right;\"> 5617658 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2017 </td>\n   <td style=\"text-align:right;\"> 5674621 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2015 </td>\n   <td style=\"text-align:right;\"> 5819079 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2014 </td>\n   <td style=\"text-align:right;\"> 5819811 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2011 </td>\n   <td style=\"text-align:right;\"> 6085281 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2012 </td>\n   <td style=\"text-align:right;\"> 6096762 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 6369482 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2010 </td>\n   <td style=\"text-align:right;\"> 6450117 </td>\n  </tr>\n</tbody>\n</table>\n\n</div>\n:::\n\n\n\nAlways a good idea to terminate the **SQL** connection when you are done with it.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ndbDisconnect(con_air, shutdown = TRUE)\n```\n:::\n\n\n## DBeaver\n\nDBeaver is a free SQL client that supports MySQL (as well as other dialects like MariaDB, PostgreSQL, and SQLite). While writing **SQL** code in **R** has some benefits (e.g., piping results tables into **ggplot2** for visualizations), using a **SQL** client that is designed for **SQL** queries has benefits as well.  In order to use DBeaver, <a href = \"https://dbeaver.io/download/\" target = \"_blank\">download the client</a> onto your computer and open it from your Applications.\n\n### New database connection\n\nUsing the pull-down menus, navigate to a new database connection (Database -> New Database Connection).  Click on the MySQL icon (and click next).  You should see an image similar to @fig-dbeaver-connect.\n\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output-display}\n![Connection settings for a MySQL connection via DBeaver.](images/dbeaver-connect.png){#fig-dbeaver-connect fig-alt='The available options for setting up a MySQL connection in DBeaver.  In particular.' width=70%}\n:::\n:::\n\n\n1. Keep the `Host` radio button toggled (don't click on `URL`)\n2. Where currently it says `Server Host: localhost` change `localhost` to the URL for the MySQL server to which you want to connect.\n3. Change the `Username` to the appropriate username for the server.\n4. Change the `Password` to the appropriate password for the server.\n5. Optional: in the `Database:` box, include the database you will query.\n6. Click `Finish`.\n\nOnce the connection is established, you should be able to navigate through the databases and their tables on the left side of the DBeaver window.\n\n### Writing SQL queries\n\nPull up a **SQL** script by clicking ont he **SQL** button as seen in @fig-sql.\n\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output-display}\n![Click on SQL to initiate a SQL script.](images/sql.png){#fig-sql fig-alt='Image of the icon in DBeaver which produces an empty SQL script.' width=70%}\n:::\n:::\n\n\nWrite **SQL** code.  Click on the orange triangle to run the code.\n\nEach lab should be saved as a .sql files that can be turned in.  The **SQL** queries (in the .sql file) should be able to be run by someone else.  Use the hashtag (`#`) to comment out lines so that you can identify particular problems or comment on the query results.\n\nIf you did not specify which database to use when you set up the connection, the database can be specified at the top of the .sql file as `USE database;`  (for example, you might want `USE airlines;`, with the semi-colon, before running your lines of **SQL** code).\n\nTo write text use `/* write text here ... */`, the slash and asterisk, for any commenting in the `.sql` file.\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. What are the three main ways to write a **SQL** query using the **R**Studio interface?\n\n2. How is DBeaver similar and/or different from writing queries using **R*?\n\n3. Why can't you use `collect()` to pull the `flights` data into your **R** session?\n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. How / why is `Sys.getenv()` used to protect the username and password for the **SQL** connection?\n\n2. If **SQL** databases are expensive to maintain, who will then have access to important data?  Does it matter?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/font-awesome-6.4.2/css/all.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/font-awesome-6.4.2/css/v4-shims.min.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}