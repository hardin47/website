{
  "hash": "dd5bd7571475fed2e08fc6955ba1ddfb",
  "result": {
    "markdown": "# Changing databases {#sec-change-db}\n\n\n\n\n\n\nAs in @sec-create-db, we will use **DuckDB** so that we have access to a server into which we can create and change data tables. Note that the database has been stored to a database directory called `duck_datab` which lives in the current **R** project.  You won't be able to open it like a standard folder, but it is where **DuckDB** stores the database files.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ncon_duckdb <- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n```\n:::\n\n\n## Changing data\n\nThe `UPDATE` function allows you to change a value in a table across all rows that match a certain criteria. The `impressions` table has a `name` column indicating the person being impersonated. Let's say, for whatever reason, that Ivanka Trump decides she doesn't want to be affiliated with the Trump name and she changes her name to her husband's name, becoming Ivanka Kushner.  You might want to `UPDATE` the file to indicate the impressions were of `Ivanka Kushner` instead of `Ivanka Trump`. (See @sec-load-duckdb for loading csv files into **DuckDB** directly.)\n\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nduckdb_read_csv(con = con_duckdb, name = \"impressions\", files = \"data/impressions.csv\")\n```\n:::\n\n::: {.cell output.var='ivanka_trump' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n```\n:::\n\n::: {#tbl-ivanka-trump .cell tbl-cap='Finding the impersonations of Ivanka Trump.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> impid </th>\n   <th style=\"text-align:left;\"> aid </th>\n   <th style=\"text-align:left;\"> name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2598 </td>\n   <td style=\"text-align:left;\"> Scarlett Johansson </td>\n   <td style=\"text-align:left;\"> Ivanka Trump </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3716 </td>\n   <td style=\"text-align:left;\"> Emily Blunt </td>\n   <td style=\"text-align:left;\"> Ivanka Trump </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3694 </td>\n   <td style=\"text-align:left;\"> Margot Robbie </td>\n   <td style=\"text-align:left;\"> Ivanka Trump </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3679 </td>\n   <td style=\"text-align:left;\"> Vanessa Bayer </td>\n   <td style=\"text-align:left;\"> Ivanka Trump </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2340 </td>\n   <td style=\"text-align:left;\"> Maya Rudolph </td>\n   <td style=\"text-align:left;\"> Ivanka Trump </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nWe can use the `UPDATE` function to change the value of Ivanka's name to `Ivanka Kushner` throughout the database.  Note that all rows which match the `WHERE` clause get updated.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nUPDATE impressions\n   SET name = 'Ivanka Kushner'\n   WHERE name LIKE 'Ivanka%';\n```\n:::\n\n::: {.cell output.var='ivanka_kushner' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n```\n:::\n\n::: {#tbl-ivanka-kushner .cell tbl-cap='Ivanka\\'s last name has been `UPDATE`d to Kushner.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> impid </th>\n   <th style=\"text-align:left;\"> aid </th>\n   <th style=\"text-align:left;\"> name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2598 </td>\n   <td style=\"text-align:left;\"> Scarlett Johansson </td>\n   <td style=\"text-align:left;\"> Ivanka Kushner </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3716 </td>\n   <td style=\"text-align:left;\"> Emily Blunt </td>\n   <td style=\"text-align:left;\"> Ivanka Kushner </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3694 </td>\n   <td style=\"text-align:left;\"> Margot Robbie </td>\n   <td style=\"text-align:left;\"> Ivanka Kushner </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3679 </td>\n   <td style=\"text-align:left;\"> Vanessa Bayer </td>\n   <td style=\"text-align:left;\"> Ivanka Kushner </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2340 </td>\n   <td style=\"text-align:left;\"> Maya Rudolph </td>\n   <td style=\"text-align:left;\"> Ivanka Kushner </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\nBe careful with `UPDATE`. A careless `UPDATE` could write over all of the data in your table.  There is no **undo** function.\n:::\n\n## Inserting data\n\nLet's say we want to include the more recent hosts in the `hosts` table.  First, we scrape the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a> which lists the episode id (the date) and the host.  The **R** package **rvest** allows us to pull out the appropriate html elements.  The `epid` and `aid` are joined together in a tibble, and `filter`ed to only include episodes which are not already in the `episodes` table. (See @sec-load-duckdb for loading csv files into **DuckDB** directly.)\n\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nduckdb_read_csv(con = con_duckdb, name = \"hosts\", files = \"data/hosts.csv\")\n```\n:::\n\n\nBy searching the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a>, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\n\n::: {.cell output.var='hosts_orig' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n```\n:::\n\n::: {#tbl-hosts-orig .cell tbl-cap='Most recent hosts in the original `hosts` table.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aid </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 20210410 </td>\n   <td style=\"text-align:left;\"> Carey Mulligan </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210403 </td>\n   <td style=\"text-align:left;\"> Daniel Kaluuya </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210327 </td>\n   <td style=\"text-align:left;\"> Maya Rudolph </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210227 </td>\n   <td style=\"text-align:left;\"> Nick Jonas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210220 </td>\n   <td style=\"text-align:left;\"> Rege-Jean Page </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210213 </td>\n   <td style=\"text-align:left;\"> Regina King </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210206 </td>\n   <td style=\"text-align:left;\"> Dan Levy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210130 </td>\n   <td style=\"text-align:left;\"> John Krasinski </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20201219 </td>\n   <td style=\"text-align:left;\"> Kristen Wiig </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20201212 </td>\n   <td style=\"text-align:left;\"> Timothee Chalamet </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n`INSERT` allows us to add the relevant information associated with the episode of SNL that Elon Musk hosted.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nINSERT INTO hosts (epid, aid)\n   VALUES ('20210508', 'Elon Musk');\n```\n:::\n\n::: {.cell output.var='hosts_elon' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n```\n:::\n\n::: {#tbl-hosts-elon .cell tbl-cap='`hosts` table including the added observation from May 8, 2021.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aid </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 20210508 </td>\n   <td style=\"text-align:left;\"> Elon Musk </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210410 </td>\n   <td style=\"text-align:left;\"> Carey Mulligan </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210403 </td>\n   <td style=\"text-align:left;\"> Daniel Kaluuya </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210327 </td>\n   <td style=\"text-align:left;\"> Maya Rudolph </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210227 </td>\n   <td style=\"text-align:left;\"> Nick Jonas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210220 </td>\n   <td style=\"text-align:left;\"> Rege-Jean Page </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210213 </td>\n   <td style=\"text-align:left;\"> Regina King </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210206 </td>\n   <td style=\"text-align:left;\"> Dan Levy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210130 </td>\n   <td style=\"text-align:left;\"> John Krasinski </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20201219 </td>\n   <td style=\"text-align:left;\"> Kristen Wiig </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nIt would be tedious to `INSERT` all of the most recent host information by hand.  Instead, we'll scrape the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a> using the **R** package **rvest**, which allows us to pull out the appropriate html elements.  The `epid` and `aid` are joined together in a tibble, and `filter`ed to only include episodes which are not already in the `episodes` table.\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nlibrary(rvest)\n\nrecent_hosts <- read_html(\"http://www.snlarchives.net/Episodes/\") |>\n  html_nodes(\"tr\") |>\n  purrr::map_df( ~ tibble(\n    epid = .x |> html_node(\"a.ms-2.me-2\") |>\n      html_attr(\"href\") |>\n      str_extract(\"\\\\d+\"),\n    aid = .x |> html_node(\"td:nth-child(2)\") |>\n      html_text2() |>\n      str_extract(\"[\\\\w\\\\. \\\\w\\\\.]+(?=/|$)\")\n  )) |>\n  filter(epid > 20210508)\n\n\nwrite_csv(recent_hosts, \"data/recent_hosts.csv\")\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nINSERT INTO hosts\n   SELECT *\n   FROM READ_CSV('data/recent_hosts.csv', AUTO_DETECT = TRUE);\n```\n:::\n\n::: {.cell output.var='hosts_update' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n```\n:::\n\n::: {#tbl-hosts-update .cell tbl-cap='The full `hosts` table, updated through December 16, 2023.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aid </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 20231216 </td>\n   <td style=\"text-align:left;\"> Kate McKinnon </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231209 </td>\n   <td style=\"text-align:left;\"> Adam Driver </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231202 </td>\n   <td style=\"text-align:left;\"> Emma Stone </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231118 </td>\n   <td style=\"text-align:left;\"> Jason Momoa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231111 </td>\n   <td style=\"text-align:left;\"> Timothée Chalamet </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231028 </td>\n   <td style=\"text-align:left;\"> Nate Bargatze </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231021 </td>\n   <td style=\"text-align:left;\"> Bad Bunny </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20231014 </td>\n   <td style=\"text-align:left;\"> Pete Davidson </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20230415 </td>\n   <td style=\"text-align:left;\"> Ana de Armas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20230408 </td>\n   <td style=\"text-align:left;\"> Molly Shannon </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Deleting data\n\nYou might change your mind and decide that you really only want hosts from years up to 2022. The `DELETE` function deletes any rows specified by the `WHERE` clause.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nDELETE FROM hosts\n   WHERE epid > 20221231\n```\n:::\n\n::: {.cell output.var='hosts_delete' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n```\n:::\n\n::: {#tbl-hosts-delete .cell tbl-cap='The `hosts` table, after 2023 has been `DELETE`d.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aid </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 20221217 </td>\n   <td style=\"text-align:left;\"> Austin Butler </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221210 </td>\n   <td style=\"text-align:left;\"> Martin Short </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221203 </td>\n   <td style=\"text-align:left;\"> Keke Palmer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221112 </td>\n   <td style=\"text-align:left;\"> Dave Chappelle </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221105 </td>\n   <td style=\"text-align:left;\"> Amy Schumer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221029 </td>\n   <td style=\"text-align:left;\"> Jack Harlow </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221015 </td>\n   <td style=\"text-align:left;\"> Megan Thee Stallion </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221008 </td>\n   <td style=\"text-align:left;\"> Brendan Gleeson </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20221001 </td>\n   <td style=\"text-align:left;\"> Miles Teller </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20220521 </td>\n   <td style=\"text-align:left;\"> Natasha Lyonne </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Altering the table\n\n`ALTER TABLE` changes the structure of a table. For example, you can add or delete columns, create or destroy indexes, change the type of existing columns, or rename columns or the table itself.  (Syntax below is for **MySQL**.  Unfortunately, **DuckDB** is finicky when `ALTER`ing tables, so the commands below may not work on the tables created using **DuckDB**.)^[Information and examples in this section taken from https://dev.mysql.com/doc/refman/8.0/en/alter-table.html#alter-table-add-drop-column]\n\nMultiple `ADD`, `ALTER`, `DROP`, and `CHANGE` clauses are permitted in a single `ALTER TABLE` statement, separated by commas. \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1\nDROP COLUMN col1,\nDROP COLUMN col2;\n```\n:::\n\n\n\nTo alter a column to change both its name and definition, use `CHANGE`, specifying the old and new names and the new definition. For example, to rename an `INT NOT NULL` column from `a` to `b`  and change its definition to use the `BIGINT` data type while retaining the `NOT NULL` attribute, do this:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1 CHANGE a b BIGINT NOT NULL;\n```\n:::\n\n\nTo change a column definition but not its name, use `CHANGE` or `MODIFY`. With `CHANGE`, the syntax requires two column names, so you must specify the same name twice to leave the name unchanged. For example, to change the definition of column `b`:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1 CHANGE b b INT NOT NULL;\n```\n:::\n\n\n`MODIFY` is more convenient to change the definition without changing the name because it requires the column name only once:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1 MODIFY b INT NOT NULL;\n```\n:::\n\n\nTo change a column name but not its definition, use `CHANGE` or `RENAME COLUMN`. With `CHANGE`, the syntax requires a column definition, so to leave the definition unchanged, you must re-specify the definition the column currently has. For example, to rename an `INT NOT NULL` column from `b` to `a`:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1 CHANGE b a INT NOT NULL;\n```\n:::\n\n\n`RENAME COLUMN` is more convenient to change the name without changing the definition because it requires only the old and new names:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nALTER TABLE t1 RENAME COLUMN b TO a;\n```\n:::\n\n\nIn general, you cannot rename a column to a name that already exists in the table. However, this is sometimes not the case, such as when you swap names or move them through a cycle. If a table has columns named `a`, `b`, and `c`, the following are valid operations:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\n/* swap a and b */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n\n/* \"rotate\" a, b, c through a cycle */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;\n```\n:::\n\n\n\n## Temporary tables\n\nTemporary tables are used to break down complex queries into smaller, more manageable steps. For example, let's say we want to `JOIN` two tables after each has been filtered using different `WHERE` clauses.  The filtered tables can each be saved into their own temporary tables and then the temporary tables can be merged.  \n\n\nNote that tables in **DuckDB** are saved (to disk), even when the connection is closed.  However, temporary tables are saved in memory (instead of on disk) and are deleted when the connection is closed.   Specific configuration of the temporary directory allows for <a href = \"https://duckdb.org/docs/sql/statements/create_table.html#temporary-tables\" target = \"_blank\">temporary tables to be saved</a>, even when the connection is closed.\n\n\n\nNotice that most of the tables have some kind of ID which allows `JOIN`ing across tables.\n\n\n::: {.cell output.var='select_hosts' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM hosts LIMIT 10;\n```\n:::\n\n::: {#tbl-select-hosts .cell tbl-cap='Note the epid and aid identifiers in the hosts table.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aid </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 20210410 </td>\n   <td style=\"text-align:left;\"> Carey Mulligan </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210403 </td>\n   <td style=\"text-align:left;\"> Daniel Kaluuya </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210327 </td>\n   <td style=\"text-align:left;\"> Maya Rudolph </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210227 </td>\n   <td style=\"text-align:left;\"> Nick Jonas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210220 </td>\n   <td style=\"text-align:left;\"> Rege-Jean Page </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210213 </td>\n   <td style=\"text-align:left;\"> Regina King </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210206 </td>\n   <td style=\"text-align:left;\"> Dan Levy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20210130 </td>\n   <td style=\"text-align:left;\"> John Krasinski </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20201219 </td>\n   <td style=\"text-align:left;\"> Kristen Wiig </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20201212 </td>\n   <td style=\"text-align:left;\"> Timothee Chalamet </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell output.var='select_episodes' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM episodes LIMIT 10;\n```\n:::\n\n::: {#tbl-select-episodes .cell tbl-cap='Note the sid and epid identifiers in the episodes table.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> sid </th>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aired </th>\n   <th style=\"text-align:right;\"> epno </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210410 </td>\n   <td style=\"text-align:left;\"> April 10, 2021 </td>\n   <td style=\"text-align:right;\"> 17 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210403 </td>\n   <td style=\"text-align:left;\"> April 3, 2021 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210327 </td>\n   <td style=\"text-align:left;\"> March 27, 2021 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210227 </td>\n   <td style=\"text-align:left;\"> February 27, 2021 </td>\n   <td style=\"text-align:right;\"> 14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210220 </td>\n   <td style=\"text-align:left;\"> February 20, 2021 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210213 </td>\n   <td style=\"text-align:left;\"> February 13, 2021 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210206 </td>\n   <td style=\"text-align:left;\"> February 6, 2021 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210130 </td>\n   <td style=\"text-align:left;\"> January 30, 2021 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20201219 </td>\n   <td style=\"text-align:left;\"> December 19, 2020 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20201212 </td>\n   <td style=\"text-align:left;\"> December 12, 2020 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n### Creating a temporary table\n\nThe `episodes` table has an `aired` column which includes the data.  Recall that if we create a new variable (e.g., `year`) using `aired`, we cannot use `year` in the `WHERE` clause (`WHERE` only works on the original table, not the results set). \n\nIn **MySQL** the function `STR_TO_DATE` allowed us to create a datetime variable from which year could be extracted.  However, in **DuckDB**, it is more complicated to convert the character string of \"April 10, 2020\" to \"2020-04-10\".  Don't worry about the code too much, but note that we wouldn't want to wrangle the character date string every time we wanted to filter for year.\n\n#### What does `POSITION` do?  {-}\n\nIn case you are curious about the date wrangling code... consider `SUBSTRING(aired, POSITION(',' IN aired) + 2)`\n\n1. `POSITION(',' IN aired)`: This part of the expression uses the `POSITION` function to find the position of the first occurrence of the comma (`,`) in the string `aired`. The result is the index (position) of the comma within the string.\n\n2. `POSITION(',' IN aired) + 2`: This adds 2 to the index of the comma. The `+ 2` is used to move the starting point of the substring two positions to the right of the comma. This is done to exclude the comma itself and any following spaces.\n\n3. `SUBSTRING(aired, POSITION(',' IN aired) + 2)`: This part uses the SUBSTRING function to extract a substring from the string `aired`. The starting position of the substring is determined by `POSITION(',' IN aired) + 2`, and it goes until the end of the string. This effectively removes the part of the string that comes before and including the first comma.\n\nIn summary, the entire expression is extracting a substring from the original string `aired`, starting from two positions to the right of the first comma and continuing until the end of the string. This can be useful in scenarios where you want to remove or isolate part of a string based on the position of a specific character (in this case, the comma).\n\n\n\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nCREATE TEMP TABLE episodes_date AS\n    SELECT *, CASE\n             WHEN POSITION(',' IN aired) > 0 THEN\n    EXTRACT(YEAR FROM CAST(\n                SUBSTRING(aired, POSITION(',' IN aired) + 2) || '-' ||\n                CASE\n                    WHEN POSITION('January' IN aired) > 0 THEN '01'\n                    WHEN POSITION('February' IN aired) > 0 THEN '02'\n                    WHEN POSITION('March' IN aired) > 0 THEN '03'\n                    WHEN POSITION('April' IN aired) > 0 THEN '04'\n                    WHEN POSITION('May' IN aired) > 0 THEN '05'\n                    WHEN POSITION('June' IN aired) > 0 THEN '06'\n                    WHEN POSITION('July' IN aired) > 0 THEN '07'\n                    WHEN POSITION('August' IN aired) > 0 THEN '08'\n                    WHEN POSITION('September' IN aired) > 0 THEN '09'\n                    WHEN POSITION('October' IN aired) > 0 THEN '10'\n                    WHEN POSITION('November' IN aired) > 0 THEN '11'\n                    WHEN POSITION('December' IN aired) > 0 THEN '12'\n                    ELSE '01' -- Default to January if no month is found\n                END || '-' ||\n                SUBSTRING(aired, POSITION(' ' IN aired) + 1, 2) AS DATE\n            ))\n            END AS year FROM episodes;\n```\n:::\n\n::: {.cell output.var='episodes_date' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT * FROM episodes_date LIMIT 10;\n```\n:::\n\n::: {#tbl-episodes-date .cell tbl-cap='The temporary table called `episodes_date` that has identifiers of sid, epid, and epno.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> sid </th>\n   <th style=\"text-align:right;\"> epid </th>\n   <th style=\"text-align:left;\"> aired </th>\n   <th style=\"text-align:right;\"> epno </th>\n   <th style=\"text-align:right;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210410 </td>\n   <td style=\"text-align:left;\"> April 10, 2021 </td>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210403 </td>\n   <td style=\"text-align:left;\"> April 3, 2021 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210327 </td>\n   <td style=\"text-align:left;\"> March 27, 2021 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210227 </td>\n   <td style=\"text-align:left;\"> February 27, 2021 </td>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210220 </td>\n   <td style=\"text-align:left;\"> February 20, 2021 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210213 </td>\n   <td style=\"text-align:left;\"> February 13, 2021 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210206 </td>\n   <td style=\"text-align:left;\"> February 6, 2021 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20210130 </td>\n   <td style=\"text-align:left;\"> January 30, 2021 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 2021 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20201219 </td>\n   <td style=\"text-align:left;\"> December 19, 2020 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 2020 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 20201212 </td>\n   <td style=\"text-align:left;\"> December 12, 2020 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 2020 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Using a temporary table\n\nNow that the `year` variable has been created in the new temporary table called `episodes_date`, we can use `episode_date` to query and find, for example, all of the hosts in 2019.\n\n\n::: {.cell output.var='hosts_2019' fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT hosts.aid, ep.aired, ep.year FROM hosts \nJOIN episodes_date AS ep ON hosts.epid = ep.epid\nWHERE year = 2019\nLIMIT 25;\n```\n:::\n\n::: {#tbl-hosts-2019 .cell tbl-cap='SNL hosts in 2019.' fig.asp='0.618'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> aid </th>\n   <th style=\"text-align:left;\"> aired </th>\n   <th style=\"text-align:right;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Eddie Murphy </td>\n   <td style=\"text-align:left;\"> December 21, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Scarlett Johansson </td>\n   <td style=\"text-align:left;\"> December 14, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Jennifer Lopez </td>\n   <td style=\"text-align:left;\"> December 7, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Will Ferrell </td>\n   <td style=\"text-align:left;\"> November 23, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Harry Styles </td>\n   <td style=\"text-align:left;\"> November 16, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Kristen Stewart </td>\n   <td style=\"text-align:left;\"> November 2, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Chance the Rapper </td>\n   <td style=\"text-align:left;\"> October 26, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> David Harbour </td>\n   <td style=\"text-align:left;\"> October 12, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Phoebe Waller-Bridge </td>\n   <td style=\"text-align:left;\"> October 5, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Woody Harrelson </td>\n   <td style=\"text-align:left;\"> September 28, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Paul Rudd </td>\n   <td style=\"text-align:left;\"> May 18, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Emma Thompson </td>\n   <td style=\"text-align:left;\"> May 11, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adam Sandler </td>\n   <td style=\"text-align:left;\"> May 4, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Emma Stone </td>\n   <td style=\"text-align:left;\"> April 13, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Kit Harington </td>\n   <td style=\"text-align:left;\"> April 6, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sandra Oh </td>\n   <td style=\"text-align:left;\"> March 30, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Idris Elba </td>\n   <td style=\"text-align:left;\"> March 9, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> John Mulaney </td>\n   <td style=\"text-align:left;\"> March 2, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Don Cheadle </td>\n   <td style=\"text-align:left;\"> February 16, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Halsey </td>\n   <td style=\"text-align:left;\"> February 9, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> James McAvoy </td>\n   <td style=\"text-align:left;\"> January 26, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rachel Brosnahan </td>\n   <td style=\"text-align:left;\"> January 19, 2019 </td>\n   <td style=\"text-align:right;\"> 2019 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## Best practice\n\nIt is always a good idea to terminate the **SQL** connection when you are done with it.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ndbDisconnect(con_duckdb, shutdown = TRUE)\n```\n:::\n\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. How can you update the value of a particular variable?  What if you want to update a variable for many rows?\n\n2. Why/when would you use `CHANGE` instead of `RENAME COLUMN`?  Why/when would you use `CHANGE` instead of `MODIFY`?\n\n3. When are temporary tables useful? Can you always create temporary tables if you are working in **SQL**?  Explain the hierarchy of tables, temporary tables, and subqueries.\n\n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. Who should have the ability / access to insert, delete, or update tables?  Should everyone who accesses a table also have the ability to edit the table?  Why or why not?\n\n2. What can you do if you accidentally `DELETE` the wrong rows or `DROP` the wrong the columns?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/font-awesome-6.4.2/css/all.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/font-awesome-6.4.2/css/v4-shims.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/bsTable-3.3.7/bootstrapTable.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/bsTable-3.3.7/bootstrapTable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}