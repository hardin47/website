{
  "hash": "66448eef4e32a1c8a581e7b87dfcccec",
  "result": {
    "markdown": "# Regular Expressions {#sec-reg-expr}\n\n\n\n\n\n\n\n> A regular expression ... is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory. [From https://en.wikipedia.org/wiki/Regular_expression]\n\n#### Main tasks in character matching: {-}\n1. basic string operations\n2. pattern matching (regular expressions)\n3. sentiment analysis\n\n\nThe ideas below are mostly taken from Jenny Bryan's STAT545 class: https://github.com/STAT545-UBC/STAT545-UBC-original-website/blob/master/block022_regular-expression.rmd\n\n#### R packages to make your life easier {-}\n* [`stringr` package](https://stringr.tidyverse.org/) A core package in the `tidyverse`. It is installed via `install.packages(\"tidyverse\")` and also loaded via `library(tidyverse)`. Of course, you can also install or load it individually.\n     * Many of the main functions start with `str_`. Auto-complete is your friend.\n     * Replacements for base functions re: string manipulation and regular expressions (see below).\n     * Main advantages over base functions: greater consistency about inputs and outputs. Outputs are more ready for your next analytical task.\n     * `stringr` cheat sheet: https://github.com/rstudio/cheatsheets/raw/master/strings.pdf\n* [`tidyr` package](https://tidyr.tidyverse.org/) Especially useful for functions that split one character vector into many and vice versa: `separate()`, `unite()`, `extract()`.\n* Base functions: `nchar()`, `strsplit()`, `substr()`, `paste()`, `paste0()`.\n* The `glue` package is fantastic for string interpolation. If `stringr::str_interp()` doesn't get your job done, check out the `glue` package.\n\n#### String functions related to regular expression {-}\nRegular expression is a pattern that describes a specific set of strings with a common structure. It is heavily used for string matching / replacing in all programming languages, although specific syntax may differ a bit. It is truly the heart and soul for string operations. In R, many string functions in `base` R as well as in `stringr` package use regular expressions, even Rstudio's search and replace allows regular expression:\n\n  * identify match to a pattern: `grep(..., value = FALSE)`, `grepl()`, `stringr::str_detect()`\n  * extract match to a pattern: `grep(..., value = TRUE)`, `stringr::str_extract()`, `stringr::str_extract_all()`     \n  * locate pattern within a string, i.e. give the start position of matched patterns. `regexpr()`, `gregexpr()`, `stringr::str_locate()`, `string::str_locate_all()`     \n  * replace a pattern: `sub()`, `gsub()`, `stringr::str_replace()`, `stringr::str_replace_all()`     \n  * split a string using a pattern: `strsplit()`, `stringr::str_split()`     \n\nRegular expressions typically specify characters (or character classes) to seek out, possibly with information about repeats and location within the string. This is accomplished with the help of metacharacters that have specific meaning: `$ * + . ? [ ] ^ { } | ( ) \\`. We will use some small examples to introduce regular expression syntax and what these metacharacters mean. \n\n#### Escape sequences {-}\n\nThere are some special characters in R that cannot be directly coded in a string. For example, let's say you specify your pattern with single quotes and you want to find countries with the single quote `'`. You would have to \"escape\" the single quote in the pattern, by preceding it with `\\`, so it is clear that it is not part of the string-specifying machinery.\n\n\nThere are other characters in R that require escaping, and this rule applies to all string functions in R, including regular expressions. See [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Quotes.html) for a complete list of R escape sequences.        \n\n  * `\\'`: single quote. You don't need to escape single quote inside a double-quoted string, so we can also use `\"'\"` in the previous example.        \n  * `\\\"`: double quote. Similarly, double quotes can be used inside a single-quoted string, i.e. `'\"'`.          \n  * `\\n`: newline.   \n  * `\\r`: carriage return.   \n  * `\\t`: tab character.   \n\n> Note: `cat()` and `print()` handle escape sequences differently, if you want to print a string out with these sequences interpreted, use `cat()`.      \n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nprint(\"a\\nb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\\nb\"\n```\n:::\n\n```{.r .cell-code}\ncat(\"a\\nb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\nb\n```\n:::\n:::\n\n\n#### Quantifiers {-}\n\nQuantifiers specify how many repetitions of the pattern.   \n\n  * `*`: matches at least 0 times.   \n  * `+`: matches at least 1 times.     \n  * `?`: matches at most 1 times.    \n  * `{n}`: matches exactly n times.    \n  * `{n,}`: matches at least n times.    \n  * `{n,m}`: matches between n and m times.     \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n(strings <- c(\"a\", \"ab\", \"acb\", \"accb\", \"acccb\", \"accccb\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"      \"ab\"     \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac*b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"     \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac*b\", strings, value = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac+b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac?b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"  \"acb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2}b\", strings, value = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2,}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2,3}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"  \"acccb\"\n```\n:::\n:::\n\n\n#### Position of pattern within the string{-}\n\n  * `^`: matches the start of the string.   \n  * `$`: matches the end of the string.   \n  * `\\b`: matches the empty string at either edge of a _word_. Don't confuse it with `^ $` which marks the edge of a _string_.   \n  * `\\B`: matches the empty string provided it is not at an edge of a word.    \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n(strings <- c(\"abcd\", \"cdab\", \"cabd\", \"c abd\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"  \"cdab\"  \"cabd\"  \"c abd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"  \"cdab\"  \"cabd\"  \"c abd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab$\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cdab\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"\\\\bab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"  \"c abd\"\n```\n:::\n:::\n\n\n\n#### Operators {-}\n\n  * `.`: matches any single character, as shown in the first example. \n  * `[...]`: a character list, matches any one of the characters inside the square brackets. We can also use `-` inside the brackets to specify a range of characters.   \n  * `[^...]`: an inverted character list, similar to `[...]`, but matches any characters __except__ those inside the square brackets.  \n  * `\\`: suppress the special meaning of metacharacters in regular expression, i.e. `$ * + . ? [ ] ^ { } | ( ) \\`, similar to its usage in escape sequences. Since `\\` itself needs to be escaped in R, we need to escape these metacharacters with double backslash like `\\\\$`.   \n  * `|`: an \"or\" operator, matches patterns on either side of the `|`.  \n  * `(...)`: grouping in regular expressions. This allows you to retrieve the bits that matched various parts of your regular expression so you can alter them or use them for building up a new string. Each group can than be refer using `\\\\N`, with N being the No. of `(...)` used. This is called __backreference__.    \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n(strings <- c(\"^ab\", \"ab\", \"abc\", \"abd\", \"abe\", \"ab 12\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"^ab\"   \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab.\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab[c-e]\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\" \"abd\" \"abe\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab[^c]\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"\\\\^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"^ab\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"abc|abd\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\" \"abd\"\n```\n:::\n\n```{.r .cell-code}\ngsub(\"(ab) 12\", \"\\\\1 34\", strings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"^ab\"   \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 34\"\n```\n:::\n:::\n\n\n\n#### Character classes {-}\n\nCharacter classes allow specifying entire classes of characters, such as numbers, letters, etc. There are two flavors of character classes, one uses `[:` and `:]` around a predefined name inside square brackets and the other uses `\\` and a special character. They are sometimes interchangeable.   \n\n  * `[:digit:]` or `\\d`: digits, 0 1 2 3 4 5 6 7 8 9, equivalent to `[0-9]`.  \n  * `\\D`: non-digits, equivalent to `[^0-9]`.  \n  * `[:lower:]`: lower-case letters, equivalent to `[a-z]`.  \n  * `[:upper:]`: upper-case letters, equivalent to `[A-Z]`.  \n  * `[:alpha:]`: alphabetic characters, equivalent to `[[:lower:][:upper:]]` or `[A-z]`.  \n  * `[:alnum:]`: alphanumeric characters, equivalent to `[[:alpha:][:digit:]]` or `[A-z0-9]`.   \n  * `\\w`: word characters, equivalent to `[[:alnum:]_]` or `[A-z0-9_]`.  \n  * `\\W`: not word, equivalent to `[^A-z0-9_]`.  \n  * `[:xdigit:]`: hexadecimal digits (base 16), 0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f, equivalent to `[0-9A-Fa-f]`.\n  * `[:blank:]`: blank characters, i.e. space and tab.  \n  * `[:space:]`: space characters: tab, newline, vertical tab, form feed, carriage return, space.\n  * `\\s`: space, ` `.  \n  * `\\S`: not space.  \n  * `[:punct:]`: punctuation characters, ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~.\n  * `[:graph:]`: graphical (human readable) characters: equivalent to `[[:alnum:][:punct:]]`.\n  * `[:print:]`: printable characters, equivalent to `[[:alnum:][:punct:]\\\\s]`.\n  * `[:cntrl:]`: control characters, like `\\n` or `\\r`, `[\\x00-\\x1F\\x7F]`.  \n\nNote:       \n* `[:...:]` has to be used inside square brackets, e.g. `[[:digit:]]`.     \n* `\\` itself is a special character that needs escape, e.g. `\\\\d`. Do not confuse these regular expressions with R escape sequences such as `\\t`.      \n\n\n#### `stringr` {-}\n\nIn many cases, you will want to use the incredibly useful and tidy set of functions available in the `stringr` package.  (`stringr` is a core package in the `tidyverse`.) For example, below we've extracted the first (and then last) word as a character string from the `StreetName` variable.\n\n* `stringr` cheat sheet: https://github.com/rstudio/cheatsheets/raw/master/strings.pdf\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nlibrary(Stat2Data)\ndata(RailsTrails)\nRailsTrails <- RailsTrails |> \n  select(HouseNum, Bedrooms, Price2014, StreetName) \nRailsTrails |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  HouseNum Bedrooms Price2014      StreetName\n1        1        3       211 Acrebrook Drive\n2        2        3       204       Autumn Dr\n3        3        3       339     Bridge Road\n4        4        3       276     Bridge Road\n5        5        4       169     Bridge Road\n6        6        3       211 Brierwood Drive\n```\n:::\n\n```{.r .cell-code}\nRailsTrails |>\n  mutate(first_piece = stringr::word(StreetName, start = 1)) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  HouseNum Bedrooms Price2014      StreetName first_piece\n1        1        3       211 Acrebrook Drive   Acrebrook\n2        2        3       204       Autumn Dr      Autumn\n3        3        3       339     Bridge Road      Bridge\n4        4        3       276     Bridge Road      Bridge\n5        5        4       169     Bridge Road      Bridge\n6        6        3       211 Brierwood Drive   Brierwood\n```\n:::\n\n```{.r .cell-code}\nRailsTrails |>\n  mutate(last_piece = stringr::word(StreetName, start = -1)) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  HouseNum Bedrooms Price2014      StreetName last_piece\n1        1        3       211 Acrebrook Drive      Drive\n2        2        3       204       Autumn Dr         Dr\n3        3        3       339     Bridge Road       Road\n4        4        3       276     Bridge Road       Road\n5        5        4       169     Bridge Road       Road\n6        6        3       211 Brierwood Drive      Drive\n```\n:::\n:::\n\n\n#### An example from my work {-}\n\nBelow are a handful of string characters that represent genomic sequences which were measured in an RNA Sequencing dataset.  The task below is to find  intergenic regions (IGR) and identify which coding sequences (CDS) bookend the intergenic regions.  Note that IGRs do not code for proteins while CDSs do.  Additionally, AS refers to anti-sense which identifies the genomic sequence in the opposite orientation (e.g., CGGATCC  vs CCTAGGC).  [The code below was written by Madison Hobbs, Scripps '19.]\n\n#####  The names of the genomic pieces {-}\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nallCounts <- data.frame(Geneid = c(\"CDS:b2743:pcm:L-isoaspartate_protein_carboxylmethyltransferase_type_II:cds2705:-:626:NC_000913.3\",\n            \"CDS:b2764:cysJ:sulfite_reductase2C_alpha_subunit2C_flavoprotein:cds2726:-:1799:NC_000913.3\",\n            \"IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\",\n            \"AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\",\n            \"IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\"))\n\nallCounts$GeneidBackup = allCounts$Geneid\n```\n:::\n\n\nFirst, it is important to identify which are IGR, CDS, and anti-sense.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nallCounts <- allCounts |> tidyr::separate(Geneid, c(\"feature\", \"rest\"), sep=\"[:]\")\nallCounts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     CDS\n2     CDS\n3     IGR\n4  AS_IGR\n5     IGR\n                                                                                                                                                                                       rest\n1                                                                                                                                                                                     b2743\n2                                                                                                                                                                                     b2764\n3 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n4                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n5                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                                                                                                                     GeneidBackup\n1                                                                                                                CDS:b2743:pcm:L-isoaspartate_protein_carboxylmethyltransferase_type_II:cds2705:-:626:NC_000913.3\n2                                                                                                                      CDS:b2764:cysJ:sulfite_reductase2C_alpha_subunit2C_flavoprotein:cds2726:-:1799:NC_000913.3\n3 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n4                                                      AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n5                                       IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n```\n:::\n:::\n\n\n\n\nWe keep only the IGR and AS_IGR strings, and we separate the two bookends.  Note, the separation comes at the backslash.\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr <- allCounts |> filter(feature %in% c(\"IGR\", \"AS_IGR\"))\nigr <- igr |> tidyr::separate(GeneidBackup, c(\"Geneid1\", \"Geneid2\"), sep = \"[/]\")\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"feature\" \"rest\"    \"Geneid1\" \"Geneid2\"\n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n```\n:::\n:::\n\n\nFor each of the two bookend Genes, we need to separate out the feature from the rest.  Note that we write over feature1 in the second line of code below.  Both of the bookends for all sequences are CDS elements.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr$feature1 <- tidyr::separate(igr, Geneid1, c(\"feature1\", \"rest\"), sep = \"[,]\")$feature1\nigr$feature1 <- tidyr::separate(igr, feature1, c(\"rest\", \"feature1\"), sep = \"[()]\")$feature1\nigr$feature2 <- tidyr::separate(igr, Geneid2, c(\"feature2\", \"rest\"), sep = \"[,]\")$feature2\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"feature\"  \"rest\"     \"Geneid1\"  \"Geneid2\"  \"feature1\" \"feature2\"\n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n  feature1 feature2\n1      CDS      CDS\n2      CDS      CDS\n3      CDS      CDS\n```\n:::\n:::\n\n\nAs CDS, it is now important to find the actual genenames for each of the IGR sequences.  We also keep each element's `bnum` which represents a unique gene identifier in *E. coli*.\n\n\n`bnum`, `genename`, `rna.name` act as place holders for the types of elements that we will need to identify the bookends of the IGRs.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nbnum = \"b[0-9]{4}\"\nbnum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"b[0-9]{4}\"\n```\n:::\n\n```{.r .cell-code}\ngenename = \",[a-z]{3}[A-Z,].\"\nrna.name = \",rna[0-9]..\"\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr$start.gene <- dplyr::case_when(\n  igr$feature1 == \"CDS\" ~ stringr::str_extract(igr$Geneid1, genename),\n  TRUE ~ stringr::str_extract(igr$Geneid1, rna.name))\nigr$end.gene <- dplyr::case_when(\n  igr$feature2 == \"CDS\" ~ stringr::str_extract(igr$Geneid2, genename),\n  TRUE ~ stringr::str_extract(igr$Geneid2, rna.name))\nigr$start.bnum <- dplyr::case_when(\n  igr$feature1 == \"CDS\" ~ stringr::str_extract(igr$Geneid1, bnum),\n  TRUE ~ \"none\")\nigr$end.bnum <- dplyr::case_when(\n  igr$feature2 == \"CDS\" ~ stringr::str_extract(igr$Geneid2, bnum),\n  TRUE ~ \"none\")\nigr <- igr |> tidyr::separate(start.gene, into = c(\"comma\", \"start.gene\"), sep = \"[,]\") |> \n  dplyr::select(-comma) |> \n  tidyr::separate(end.gene, into = c(\"comma\", \"end.gene\"), sep = \"[,]\") |> \n  dplyr::select(-comma)\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"feature\"    \"rest\"       \"Geneid1\"    \"Geneid2\"    \"feature1\"  \n [6] \"feature2\"   \"start.gene\" \"end.gene\"   \"start.bnum\" \"end.bnum\"  \n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n  feature1 feature2 start.gene end.gene start.bnum end.bnum\n1      CDS      CDS        mlc     ynfL      b1594    b1595\n2      CDS      CDS       talB      mog      b0008    b0009\n3      CDS      CDS       yoaA     yoaB      b1808    b1809\n```\n:::\n:::\n\n\n\n#### Helpful tutorials/files {-}\n* `stringr` vignette: https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html\n* [`stringr` package](https://stringr.tidyverse.org/) \n* Jenny Bryan's STAT 545 notes: https://stat545.com/character-vectors.html\n* Jenny Bryan's STAT 545 lab: http://stat545.com/block022_regular-expression.html\n* Hadley Wickham's book [R for Data Science](https://r4ds.had.co.nz/strings.html)\n* [regexpal](http://regexpal.com/)    \n* [RegExr](http://www.regexr.com/)   \n* Regular expression in R [official document](https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html).  \n\n\n\n\n\n#### Fun examples {-}\n\n* The name Hilary: https://hilaryparker.com/2013/01/30/hilary-the-most-poisoned-baby-name-in-us-history/\n* Trump's tweets: http://varianceexplained.org/r/trump-tweets/\n* Trump's tweets, take two: http://varianceexplained.org/r/trump-followup/\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}