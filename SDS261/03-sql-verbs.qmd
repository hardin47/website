# SQL verbs {#sec-sql-verbs}


```{r}
#| include: false

source("_common.R")
```

Most of this chapter will focus on the **SQL** commands needed to run queries of the database.  Much of the syntax is strikingly familiar to tidy verbs in **R**.  However, this chapter starts with a few **SQL** specific tools used to learn about the tables in any particular database.

## Looking at the tables in the database

Consider a database which is based on the <a href = "https://openpolicing.stanford.edu/data/" target = "_blank">Stanford Open Policing Database</a>.

<!--
Hadley Wickham discusses how to use Sys.getenv: https://cran.r-project.org/web/packages/httr/vignettes/secrets.html
-->


```{r}
con_traffic <- DBI::dbConnect(
    RMariaDB::MariaDB(),
    dbname = "traffic",
    host = "traffic.st47s.com", 
    user = "student",
    password = Sys.getenv("SQL_LOADING")
)
```

There are 88 tables in the `traffic` database. Each table is traffic stop data from a particular city or a given state's highway patrol.

```{sql}
#| connection: con_traffic

SHOW TABLES;
```

The `EXPLAIN` command describes the 24 field names (variables) in the `ma_statewide_2020_04_01` table.  Some of the variables are characters (`text`) and some are numeric (either `double` or `bigint`)

```{sql}
#| connection: con_traffic

EXPLAIN ma_statewide_2020_04_01;
```


## SELECT ... FROM

> **R** function: `select()`

```{sql}
#| connection: con_traffic

SELECT * FROM ma_statewide_2020_04_01 LIMIT 14;

```

```{sql}
#| connection: con_traffic
#| eval: false


```

## WHERE

> **R** function: `filter()`

`WHERE` operates on the original data in the table and `HAVING` operates on the result set.

## GROUP BY

> **R** function: `group_by()`

## ORDER BY

> **R** function: `arrange()`

## HAVING

> **R** function: `filter()`

`WHERE` operates on the original data in the table and `HAVING` operates on the result set.

## LIMIT

> **R** function: `head()`


 
