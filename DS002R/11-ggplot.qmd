# ggplot {#sec-ggplot}

## Deconstructing a graph {#deconstruct}

###  The Grammar of Graphics (`gg`) {#gg}

@Yau and @Wickham14  have come up with a *taxonomy* and a *grammar* for thinking about the parts of a figure just like we conceptualize the parts of a body or the parts of a sentence.

One great way of thinking of the new process:  it is no longer necessary to talk about the name of the graph (e.g., boxplot).  Instead we now think in glyphs (geoms), and so we can put whatever we want on the plot.  Note also that the transition leads you from a passive consumer (I need to make plot XXX because everyone else does, so I just plug in the data) into an active participant (what do I want my data to say?  and how can I put that information onto my graphic?)

The most important questions you can ask with respect to creating figures are:

1. What do we want R to do? (What is the goal?)
2. What does R need to know?

@Yau gives us nine visual cues, and @Wickham14 translates them into a language using `ggplot2`.  (The items below are from @MDSR, chapter 2.)


1. Visual Cues:  the aspects of the figure where we should focus.  
**Position** (numerical) where in relation to other things?  
**Length** (numerical) how big (in one dimension)?  
**Angle** (numerical) how wide? parallel to something else?  
**Direction** (numerical) at what slope?  In a time series, going up or down?  
**Shape** (categorical) belonging to what group?  
**Area** (numerical) how big (in two dimensions)?  Beware of improper scaling!  
**Volume** (numerical) how big (in three dimensions)?  Beware of improper scaling!  
**Shade** (either) to what extent?  how severely?  
**Color** (either) to what extent? how severely? Beware of red/green color blindness.  

2. Coordinate System: rectangular, polar, geographic, etc.

3. Scale: numeric (linear? logarithmic?), categorical (ordered?), time

4. Context: in comparison to what (think back to ideas from Tufte)


```{r out.width = '100%', fig.align='center', echo=FALSE}
#| fig-cap: "Figure 3.3 of Yau's *Data Points: Visualization That Means Something*, https://flowingdata.com/data-points/DataPoints-Ch3.pdf, [@Yau]."
knitr::include_graphics("images/Yau_viz_cues.png")
```

#### Order Matters {-}

```{r out.width = '100%', fig.align='center', echo=FALSE}
#| fig-cap: "Figure 3.12 of Yau's *Data Points: Visualization That Means Something*, https://flowingdata.com/data-points/DataPoints-Ch3.pdf, [@Yau]. Original work by @cleveland1984."
knitr::include_graphics("images/Yau_order.png")
```


#### Cues Together {-}

```{r out.width = '100%', fig.align='center', echo=FALSE}
#| fig-cap: "Figure 3.25 of Yau's *Data Points: Visualization That Means Something*, https://flowingdata.com/data-points/DataPoints-Ch3.pdf, [@Yau]."
knitr::include_graphics("images/Yau_cuestogether.png")
```

##### What are the visual cues on the plot? {-}

```{r, echo=FALSE}
require(mosaic)
require(mosaicData)

SAT |> subset(frac > 50) |>
  ggplot(aes(x = state, y = math)) + 
  labs(x = "state",
       y = "average SAT score") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_point() + 
  geom_linerange(aes(x = state, ymin=0, ymax = math))
```


* position?
* length?
* shape?
* area/volume?
* shade/color?
* coordinate System?  
* scale?

##### What are the visual cues on the plot? {-}

```{r, echo=FALSE}
ggplot(data = SwimRecords,
         aes(x = year, y = time, color = sex)) + 
  geom_point() + 
  geom_line() +
  labs(title = "100m Swimming World Records",
       y = "World Record Time (seconds)")
```

* position?
* length?
* shape?
* area/volume?
* shade/color?
* coordinate System?  
* scale?


##### What are the visual cues on the plot? {-}

```{r, echo=FALSE}
HELPrct |> group_by(substance) |>
  summarize(count = n()) |>
  mutate(lab.ypos = cumsum(count) - 0.5*count) |>
  ggplot(aes(x = "", y =count, fill = substance)) + 
  geom_bar(width = 1, stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(y = lab.ypos, label = count), 
            color = "white") +
  scale_fill_brewer(palette = "Greens") +
  theme_void() +
  labs(title = "HELP clinical trial at detoxification unit")
```


* position?
* length?
* shape?
* area/volume?
* shade/color?
* coordinate System?  
* scale?


#### The grammar of graphics in `ggplot2`

**geom**: the geometric "shape" used to display data
 
  * bar, point, line, ribbon, text, etc.
 
**aesthetic**: an attribute controlling how geom is displayed with respect to variables

  * x position, y position, color, fill, shape, size, etc.

**scale**: adjust information in the aesthetic to map onto the plot

  * *particular* assignment of colors, shapes, sizes, etc.; making axes continuous or constrained to a particular range of values.
 
**guide**: helps user convert visual data back into raw data (legends, axes)

**stat**: a transformation applied to data before geom gets it

  * example: histograms work on binned data
 


### `ggplot2`


In `ggplot2`, an *aesthetic* refers to a mapping between a variable and the information it conveys on the plot.  Further information about plotting and visualizing information is given in chapter 2 (Data visualization) of @MDSR.  Much of the data in the presentation represents all births from 1978 in the US: the date, the day of the year, and the number of births.

<!---
%Things to talk about:
%layers 
%facets 
%tidy data 
%scale: the computer maps the data to the aesthetic (computer doing the work) 
%guide: the aesthetic gets mapped back to the data (the human interpreting the graph) 
%frame: the variables that define the space (e.g., x & y coordinates and faceting) 
--->

##### Goals {-}

What I will try to do

 * give a tour of `ggplot2`
 
 * explain how to think about plots the `ggplot2` way
 
 * prepare/encourage you to learn more later
 
What I can't do in one session

 * show every bell and whistle
 
 * make you an expert at using `ggplot2`
 
##### Getting help {-}

1.  One of the best ways to get started with ggplot is to Google what you want to do with the word ggplot.  Then look through the images that come up.  More often than not, the associated code is there.  There are also ggplot galleries of images, one of them is here: https://plot.ly/ggplot2/

2. `ggplot2` cheat sheet: https://rstudio.github.io/cheatsheets/html/data-visualization.html

3. Look at the end of the presentation.  More help options there.


```{r fig.width = 7, fig.align='center', echo=FALSE}
knitr::include_graphics("images/plotly.png")
```





```{r}
require(mosaic)    # where Births78 lives
data(Births78)     # restore fresh version of Births78
```

```{r}
#| eval: false
head(Births78, 3)
```

```{r}
#| echo: false
head(Births78, 3) |> 
  gt::gt()
```



##### How can we make the plot? {-}


```{r, echo=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births)) + 
  geom_point() +
  labs(title = "US Births in 1978")
```


Two Questions:

 1. What do we want R to do?  (What is the goal?)
 
 2. What does R need to know?

    * data source: `Births78`

    * aesthetics: 
 
        * `date -> x`
        * `births -> y`
        * points (!) 


 1. Goal: scatterplot = a plot with points
 
    * `ggplot() + geom_point()`
 
 2. What does R need to know?
 
    * data source: `data = Births78`

    * aesthetics: `aes(x = date, y = births)`




##### How can we make the plot? {-}

```{r, echo=FALSE}
ggplot(data = Births78) +
  geom_point(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 1978")
```

What has changed?  

 * new aesthetic: mapping color to day of week

##### Adding day of week to the data set {-}


```{r, fig.height=2.0}
ggplot(data = Births78) +
  geom_point(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 1978")
```


##### How can we make the plot? {-}

```{r, echo=FALSE}
ggplot(data = Births78) +
  geom_line(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 1978")
```



Now we use lines instead of dots

```{r, eval=FALSE}
ggplot(data = Births78) +
  geom_line(aes(x = date, y = births, color = wday)) +
  labs(title = "US Births in 1978")
```


##### How can we make the plot? {-}

```{r, echo=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births, color = wday)) + 
  geom_point() + 
  geom_line() +
  labs(title = "US Births in 1978")
```

Now we have two **layers**, one with points and one with
lines

```{r, eval=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births, color = wday)) + 
  geom_point() +  
  geom_line() +
  labs(title = "US Births in 1978")
```


 *  The layers are placed one on top of the other:  the points 
are *below* and the lines are *above*.   

 * `data` and `aes` specified in `ggplot()` affect all geoms
 
##### Alternative Syntax {-}


```{r}
ggplot(data = Births78,
         aes(x = date, y = births, color = wday)) + 
  geom_point() + 
  geom_line() +
  labs(title = "US Births in 1978")
```


##### What does adding the color argument do? {-}

```{r, eval=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births, color = "navy")) + 
  geom_point()  +
  labs(title = "US Births in 1978")
```



```{r, echo=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births, color = "navy")) + 
  geom_point()  +
  labs(title = "US Births in 1978")
```

Because there is no variable, we have *mapped* the color aesthetic to a new variable with only one value ("navy").   So all the dots get set to the same color, but it's not navy.

##### Setting vs. Mapping {-}


If we want to *set* the color to be navy for all of the dots, we do it outside the aesthetic, without a dataset variable:

```{r}
ggplot(data = Births78, 
       aes(x = date, y = births)) +   # map x & y 
  geom_point(color = "navy")   +     # set color
  labs(title = "US Births in 1978")
```

* Note that `color = "navy"` is now outside of the aesthetics list.  That's how `ggplot2` distinguishes between mapping and setting.


##### How can we make the plot? {-}

```{r, echo=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births)) + 
  geom_line(aes(color = wday)) +        # map color here
  geom_point(color = "navy")    +        # set color here
  labs(title = "US Births in 1978")
```


```{r, eval=FALSE}
ggplot(data = Births78, 
       aes(x = date, y = births)) + 
  geom_line(aes(color = wday)) +       # map color here
  geom_point(color = "navy") +          # set color here
  labs(title = "US Births in 1978")
```

* `ggplot()` establishes the default data and aesthetics for the geoms, but each geom may change the defaults.

* good practice: put into `ggplot()` the things that affect all (or most) of the layers; rest in `geom_blah()`

##### Setting vs. Mapping (again) {-}

Information gets passed to the plot via:

a. `map` the **variable** information inside the aes (aesthetic) command

a. `set` the **non-variable** information outside the aes (aesthetic) command

##### Other geoms {-}

```{r, echo=TRUE, comment=NA}
apropos("^geom_")
```

help pages will tell you their aesthetics, default stats, etc.

```{r, eval=FALSE}
?geom_area             # for example
```


##### Let's try `geom_area` {-}

```{r, eval=TRUE}
ggplot(data = Births78, 
       aes(x = date, y = births, fill = wday)) + 
  geom_area() +
  labs(title = "US Births in 1978")
```

Using area does not produce a good plot

* over plotting is hiding much of the data
* extending y-axis to 0 may or may not be desirable.

##### Side note: what makes a plot good? {-}

Most (all?) graphics are intended to help us make comparisons

* How does something change over time?
* Do my treatments matter?  How much?
* Do men and women respond the same way?

**Key plot metric:** Does my plot make the comparisons I am interested in 

* easily, and 
* accurately?

##### Time for some different data {-}


`HELPrct`: Health Evaluation and Linkage to Primary care randomized clinical trial

```{r}
#| eval: false
head(HELPrct) 
```

```{r}
#| echo: false
head(HELPrct) |> 
  gt::gt()
```

Subjects admitted for treatment for addiction to one of three substances.

##### Who are the people in the study? {-}


```{r}
ggplot(data = HELPrct,
       aes(x = substance)) + 
  geom_bar() +
  labs(title = "HELP clinical trial at detoxification unit")
```

* Hmm.  What's up with `y`?

    * `stat_bin()` is being applied to the data before the 
    `geom_bar()` gets to do its thing.  Binning creates the
    `y` values.

##### Who are the people in the study? {-}


```{r message=FALSE, warning=FALSE}
ggplot(data = HELPrct,
       aes(x = substance, fill = sex)) + 
  geom_bar() +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### Who are the people in the study? {-}

```{r message=FALSE, warning=FALSE}
library(scales)
ggplot(data = HELPrct,
       aes(x = substance, fill = sex)) + 
  geom_bar() +
  scale_y_continuous(labels = percent) +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Who are the people in the study? {-}

```{r message=FALSE, warning=FALSE}
ggplot(data = HELPrct,
       aes(x = substance, fill = sex)) + 
  geom_bar(position="fill") +
  scale_y_continuous("actually, percent") +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### How old are people in the HELP study? {-}


```{r, fig.height=1.5, message=TRUE}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_histogram() +
  labs(title = "HELP clinical trial at detoxification unit")
```

Notice the messages

* `stat_bin`:  Histograms are not mapping the raw data but binned data.  
`stat_bin()` performs the data transformation.

* `binwidth`: a default `binwidth` has been selected, but we should really choose our own.

##### Setting the binwidth manually {-}


```{r}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_histogram(binwidth = 2) +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### How old are people in the HELP study? -- Other geoms {-}

```{r, fig.height=1.7}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_freqpoly(binwidth = 2) +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r, fig.height=1.7}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_density() +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### Selecting stat and geom manually {-}

Every geom comes with a default stat

* for simple cases, the stat is `stat_identity()` which does nothing
* we can mix and match geoms and stats however we like

```{r, fig.height=2.0}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_line(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### Selecting stat and geom manually {-}

Every stat comes with a default `geom`, every geom with a default stat

* we can specify stats instead of `geom`, if we prefer
* we can mix and match geoms and stats however we like

```{r, fig.height=2.0}
ggplot(data = HELPrct,
       aes(x = age)) + 
  stat_density(geom = "line") +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### More combinations {-}

```{r, fig.height=1.7}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_point(stat = "bin", binwidth = 3) + 
  geom_line(stat = "bin", binwidth = 3)  +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r, fig.height=1.7}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_area(stat = "bin", binwidth = 3) +
  labs(title = "HELP clinical trial at detoxification unit") 
```

```{r}
ggplot(data = HELPrct,
       aes(x = age)) + 
  geom_point(stat = "bin", binwidth = 3, 
             aes(size=..count..)) +
  geom_line(stat = "bin", binwidth = 3) +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### How much do they drink? (i1) {-}

```{r, fig.height=1.5}
ggplot(data = HELPrct,
       aes(x = i1)) + geom_histogram() +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r, fig.height=1.5}
ggplot(data = HELPrct,
       aes(x = i1)) + 
  geom_density() +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r, fig.height=1.5}
ggplot(data = HELPrct,
       aes(x = i1)) + 
  geom_area(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Covariates: Adding in more variables {-}


Using `color` and `linetype`:

```{r, fig.height=1.6}
ggplot(data = HELPrct,
       aes(x = i1, color = substance, linetype = sex)) + 
  geom_line(stat = "density") +
  labs(title = "HELP clinical trial at detoxification unit")
```

Using `color` and `facet`s

```{r, fig.height=1.6}
ggplot(data = HELPrct,
       aes(x = i1, color = substance)) + 
  geom_line(stat = "density") + 
  facet_grid( . ~ sex ) +
  labs(title = "HELP clinical trial at detoxification unit")
```

```{r, fig.height=1.6}
ggplot(data = HELPrct,
       aes(x = i1, color = substance)) + 
  geom_line(stat = "density") + 
  facet_grid( sex ~ . ) +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Boxplots {-}
Boxplots use `stat_quantile()`  which computes a five-number summary  (roughly the five quartiles of the data) and uses them to define a "box" and "whiskers".

The quantitative variable must be `y`, and there must be an additional `x` variable. 

```{r}
ggplot(data = HELPrct,
       aes(x = substance, y = age, color = sex)) + 
  geom_boxplot() +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### Horizontal boxplots {-}

Horizontal boxplots are obtained by flipping the coordinate system:
```{r}
ggplot(data = HELPrct,
       aes(x = substance, y = age, color = sex)) + 
  geom_boxplot() +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```

* `coord_flip()` may be used with other plots as well to reverse the roles
of `x` and `y` on the plot.


##### Axes scaling with boxplots {-}

We can scale the continuous axis
```{r}
ggplot(data = HELPrct,
       aes(x = substance, y = age, color = sex)) + 
  geom_boxplot() +
  coord_trans(y = "log") +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Give me some space {-}

We've triggered a new feature: `dodge` (for dodging things left/right). We can control how much if we set the dodge manually.

```{r}
ggplot(data = HELPrct,
       aes(x = substance, y = age, color = sex)) + 
  geom_boxplot(position = position_dodge(width = 1)) +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Issues with bigger data {-}

```{r}
require(NHANES)
dim(NHANES)
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_point() + 
  facet_grid( Gender ~ PregnantNow ) +
  labs(title = "National Health and Nutrition Examination Survey")
```

* Although we can see a generally positive association (as we would expect), the over plotting may be hiding information.

##### Using alpha (opacity) {-}

One way to deal with over plotting is to set the opacity low.

```{r}
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_point(alpha = 0.01) + 
  facet_grid( Gender ~ PregnantNow ) +
  labs(title = "National Health and Nutrition Examination Survey")
```

##### geom_density2d {-}

Alternatively (or simultaneously) we might prefer a different `geom` altogether.

```{r}
ggplot(data = NHANES,
       aes(x = Height, y = Weight)) +
  geom_density2d() + 
  facet_grid( Gender ~ PregnantNow ) +
  labs(title = "National Health and Nutrition Examination Survey")
```



##### Multiple layers {-}

```{r}
ggplot(data = HELPrct, 
       aes(x = sex, y = age)) +
  geom_boxplot(outlier.size = 0) +
  geom_jitter(alpha = .6, width = 0.2) + 
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```

##### Multiple layers {-}

```{r}
ggplot(data = HELPrct, 
       aes(x = sex, y = age)) +
  geom_boxplot(outlier.size = 0) +
  geom_point(alpha = .6, 
             position = position_jitter(width = .1, height = 0)) +
  coord_flip() +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### Things I haven't mentioned (much) {-}


 * coords (`coord_flip()` is good to know about)
 
 * themes (for customizing appearance)

 * position (`position_dodge()`, `position_jitterdodge()` (for use with points on top of dodged boxplots), `position_stack()`, etc.)
 
 * transforming axes

```{r, fig.width=14}
require(ggthemes)
ggplot(Births78, 
       aes(x = date, y = births)) + 
  geom_point() + 
  theme_wsj()
```

 
```{r, fig.width=14}
ggplot(data = HELPrct, 
       aes(x = substance, y = age, color = sex)) +
  geom_boxplot(position = position_dodge(width = 1)) +
  geom_point(aes(color = sex, fill = sex), 
             position = position_jitterdodge(dodge.width = 1, jitter.width = 0.1), 
             size = 0.5) +
  labs(title = "HELP clinical trial at detoxification unit")
```


##### A little bit of everything {-}

```{r, fig.width=14}
ggplot(data = HELPrct, 
       aes(x = substance, y = age, color = sex)) +
  geom_boxplot(coef = 10, 
               position = position_dodge(width = 1)) +
  geom_point(aes(fill = sex), alpha = .5, 
             position = position_jitterdodge(dodge.width = 1)) + 
  facet_wrap(~homeless) +
  labs(title = "HELP clinical trial at detoxification unit")
```


#### What else can we do? {-}


`shiny`

* interactive graphics / modeling

* https://shiny.posit.co/

`plotly` 

> `Plotly` is an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, `plotly.js`. The `plotly` R library contains the `ggplotly` function , which will convert `ggplot2` figures into a Plotly object. Furthermore, you have the option of manipulating the Plotly object with the `style` function.
 
 * https://plot.ly/ggplot2/getting-started/
 
Dynamic documents

 * combination of `Quarto`, `ggvis`, and `shiny`
 
 
## <i class="fas fa-lightbulb"></i> Reflection questions  

* What do you want R to do?  What does R need to know in order to do that thing?

* How can you break down a plot into visual cues?  What are the visual cues?

* Which visual cues are most accurate?  Does that mean only such cues should be used?

* Does the order of layers in a ggplot matter?  When does it change the plot and when does it not change the plot?

## <i class="fas fa-balance-scale"></i> Ethics considerations 

* Why might you want to avoid overplotting?




