{
  "hash": "55fe0b90c550c7da60bf491d3669ffa0",
  "result": {
    "markdown": "# Regular Expressions {#sec-reg-expr}\n\n\n\n\n\n<!--\n* think about using regular expressions when scraping data from a website\n\n* use TidyTuesday from 11/29/23 to link Dr. Who rankings with IMDb rankings.-->\n\n> A regular expression ... is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory. [From https://en.wikipedia.org/wiki/Regular_expression]\n\nRegular expressions are composed of two types of characters:\n\n* special characters (like `*`) are called *metacharacters*\n* all other characters are called normal text characters or *literal* characters\n\nThe metacharacters allow for advanced pattern matching in finding regular expressions.\n\n#### Main tasks in character matching: {-}\n1. basic string operations\n2. pattern matching (regular expressions)\n3. sentiment analysis\n\n\nMany of the ideas below are taken from <a href = \"https://github.com/STAT545-UBC/STAT545-UBC-original-website/blob/master/block022_regular-expression.rmd\" target = \"_blank\">Jenny Bryan's STAT545 class</a>. \n\n## R packages to make your life easier \n* [**stringr** package](https://stringr.tidyverse.org/) A core package in the **tidyverse**. It is installed via `install.packages(\"tidyverse\")` and also loaded via `library(tidyverse)`. Of course, you can also install or load it individually.\n     * Many of the main functions start with `str_`. Auto-complete is your friend.\n     * Replacements for base functions re: string manipulation and regular expressions (see below).\n     * Main advantages over base functions: greater consistency about inputs and outputs. Outputs are more ready for your next analytical task.\n     * <a href = \"https://github.com/rstudio/cheatsheets/raw/master/strings.pdf\" target = \"_blank\">**stringr** cheat sheet</a>\n* [`tidyr` package](https://tidyr.tidyverse.org/) Especially useful for functions that split one character vector into many and vice versa: `separate()`, `unite()`, `extract()`.\n* Base functions: `nchar()`, `strsplit()`, `substr()`, `paste()`, `paste0()`.\n* The `glue` package is fantastic for string interpolation. If `stringr::str_interp()` doesn't get your job done, check out the `glue` package.\n\n#### String functions related to regular expression {-}\nRegular expression is a pattern that describes a specific set of strings with a common structure. It is heavily used for string matching / replacing in many programming languages, although specific syntax may differ a bit. It is truly the heart and soul for string operations. In R, many string functions in `base` R as well as in **stringr** package use regular expressions, even RStudio's search and replace allows regular expression:\n\n  * identify match to a pattern: `grep(..., value = FALSE)`, `grepl()`, `stringr::str_detect()`\n  * extract match to a pattern: `grep(..., value = TRUE)`, `stringr::str_extract()`, `stringr::str_extract_all()`     \n  * locate pattern within a string, i.e. give the start position of matched patterns. `regexpr()`, `gregexpr()`, `stringr::str_locate()`, `string::str_locate_all()`     \n  * replace a pattern: `sub()`, `gsub()`, `stringr::str_replace()`, `stringr::str_replace_all()`     \n  * split a string using a pattern: `strsplit()`, `stringr::str_split()`     \n\nRegular expressions typically specify characters (or character classes) to seek out, possibly with information about repeats and location within the string. This is accomplished with the help of metacharacters that have specific meaning: `$ * + . ? [ ] ^ { } | ( ) \\`. We will use some small examples to introduce regular expression syntax and what these metacharacters mean. \n\n\n`grep()` stands for \"global regular expression print\".  `grep()` returns a character vector containing the selected elements, `grepl()` returns a logical vector of TRUE/FALSE for whether or not there was a match.\n\n## Tools for characterizing a regular expression \n### Escape sequences\n\nThere are some special characters in R that cannot be directly coded in a string. For example, let's say you specify your pattern with single quotes and you want to find countries with the single quote `'`. You would have to \"escape\" the single quote in the pattern, by preceding it with `\\`, so it is clear that it is not part of the string-specifying machinery.\n\n\nThere are other characters in R that require escaping, and this rule applies to all string functions in R, including regular expressions. See [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Quotes.html) for a complete list of R escape sequences.        \n\n  * `\\'`: single quote. You don't need to escape single quote inside a double-quoted string, so we can also use `\" ' \"`.       \n  * `\\\"`: double quote. Similarly, double quotes can be used inside a single-quoted string, i.e. `' \" '`.          \n  * `\\n`: newline.   \n  * `\\r`: carriage return.   \n  * `\\t`: tab character.   \n\n> Note: `cat()` and `print()` handle escape sequences differently, if you want to print a string out with the interpretation of the sequences above, use `cat()`.      \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nprint(\"a\\nb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\\nb\"\n```\n:::\n\n```{.r .cell-code}\ncat(\"a\\nb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\nb\n```\n:::\n:::\n\n\n### Quantifiers\n\nQuantifiers specify how many repetitions of the pattern.   \n\n  * `*`: matches at least 0 times.   \n  * `+`: matches at least 1 times.     \n  * `?`: matches at most 1 times.    \n  * `{n}`: matches exactly n times.    \n  * `{n,}`: matches at least n times.    \n  * `{n,m}`: matches between n and m times.     \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstrings <- c(\"a\", \"ab\", \"acb\", \"accb\", \"acccb\", \"accccb\")\ngrep(\"ac*b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"     \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac*b\", strings, value = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac+b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac?b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"  \"acb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2,}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"   \"acccb\"  \"accccb\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ac{2,3}b\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"accb\"  \"acccb\"\n```\n:::\n:::\n\n\n### Position of pattern within the string\n\n  * `^`: matches the start of the string.   \n  * `$`: matches the end of the string.   \n  * `\\b`: matches the boundary of a _word_. Don't confuse it with `^ $` which marks the edge of a _string_.   \n  * `\\B`: matches the empty string provided it is not at an edge of a word.    \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstrings <- c(\"abcd\", \"cdab\", \"cabd\", \"c abd\")\ngrep(\"ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"  \"cdab\"  \"cabd\"  \"c abd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab$\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cdab\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"\\\\bab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abcd\"  \"c abd\"\n```\n:::\n:::\n\n\n\n### Operators\n\n  * `.`: matches any single character, as shown in the first example. \n  * `[...]`: a character list, matches any one of the characters inside the square brackets. We can also use `-` inside the brackets to specify a range of characters.   \n  * `[^...]`: an inverted character list, similar to `[...]`, but matches any characters __except__ those inside the square brackets.  \n  * `\\`: suppress the special meaning of metacharacters in regular expression, i.e. `$ * + . ? [ ] ^ { } | ( ) \\`, similar to its usage in escape sequences. Since `\\` itself needs to be escaped in R, we need to escape these metacharacters with double backslash like `\\\\$`.   \n  * `|`: an \"or\" operator, matches patterns on either side of the `|`.  \n  * `(...)`: grouping in regular expressions. This allows you to retrieve the bits that matched various parts of your regular expression so you can alter them or use them for building up a new string. Each group can than be refer using `\\\\N`, with N being the No. of `(...)` used. This is called __backreference__.    \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstrings <- c(\"^ab\", \"ab\", \"abc\", \"abd\", \"abe\", \"ab 12\", \"a|b\")\ngrep(\"ab.\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab[c-e]\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\" \"abd\" \"abe\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"ab[^c]\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"\\\\^ab\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"^ab\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"abc|abd\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\" \"abd\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"a[b|c]\", strings, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"^ab\"   \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\" \"a|b\"  \n```\n:::\n\n```{.r .cell-code}\nstr_extract(strings, \"a[b|c]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ab\" \"ab\" \"ab\" \"ab\" \"ab\" \"ab\" \"a|\"\n```\n:::\n:::\n\n\n\n### Character classes\n\nCharacter classes allow specifying entire classes of characters, such as numbers, letters, etc. There are two flavors of character classes, one uses `[:` and `:]` around a predefined name inside square brackets and the other uses `\\` and a special character. They are sometimes interchangeable.   \n\n  * (?i) before the string indicates that the match should be case insensitive.\n  * `[:digit:]` or `\\d`: digits, 0 1 2 3 4 5 6 7 8 9, equivalent to `[0-9]`.  \n  * `\\D`: non-digits, equivalent to `[^0-9]`.  \n  * `[:lower:]`: lower-case letters, equivalent to `[a-z]`.  \n  * `[:upper:]`: upper-case letters, equivalent to `[A-Z]`.  \n  * `[:alpha:]`: alphabetic characters, equivalent to `[[:lower:][:upper:]]` or `[A-z]`.  \n  * `[:alnum:]`: alphanumeric characters, equivalent to `[[:alpha:][:digit:]]` or `[A-z0-9]`.   \n  * `\\w`: word characters, equivalent to `[[:alnum:]_]` or `[A-z0-9_]` (letter, number, or underscore). \n  * `\\W`: not word, equivalent to `[^A-z0-9_]`.  \n  * `[:xdigit:]`: hexadecimal digits (base 16), 0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f, equivalent to `[0-9A-Fa-f]`.\n  * `[:blank:]`: blank characters, i.e. space and tab.  \n  * `[:space:]`: space characters: tab, newline, vertical tab, form feed, carriage return, space.\n  * `\\s`: space, ` `. Matches any whitespace (space, tab, newline, and carriage return). \n  * `\\S`: not space.  \n  * `[:punct:]`: punctuation characters, ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~.\n  * `[:graph:]`: graphical (human readable) characters: equivalent to `[[:alnum:][:punct:]]`.\n  * `[:print:]`: printable characters, equivalent to `[[:alnum:][:punct:]\\\\s]`.\n  * `[:cntrl:]`: control characters, like `\\n` or `\\r`, `[\\x00-\\x1F\\x7F]`.  \n\nNote:       \n* `[:...:]` has to be used inside square brackets, e.g. `[[:digit:]]`.     \n* `\\` itself is a special character that needs escape, e.g. `\\\\d`. Do not confuse these regular expressions with R escape sequences such as `\\t`.      \n\n## Examples to work through\n\nI have found that the best way to truly understand regular expressions is to work through as many examples as possible (actually, maybe this is true about learning anything new!).  For the following examples, try to figure out the solution on your own before looking at the footnote which contains the solution.\n\n### Case insenstive\n\n* Match only the word `meter` in \"The cemetery is 1 meter from the stop sign.\" Also match `Meter` in \"The cemetery is 1 Meter from the stop sign.\"\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstring <- c(\"The cemetery is 1 meter from the stop sign.\", \n            \"The cemetery is 1 Meter from the stop sign.\")\n\nstr_extract(string, \"(?i)\\\\bmeter\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"meter\" \"Meter\"\n```\n:::\n:::\n\n\n### Proper times and dates\n\n* Match dates like 01/15/24 and also like 01.15.24 and like 01-15-24.^[ `\\d\\d.\\d\\d.\\d\\d` will work, but it will also match 123456.  It is better to replace the dot with the characters of interest: `\\d\\d[/.\\-]\\d\\d[/.\\-]\\d\\d`.  Remember that a dot inside a character class is just a dot. ]\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstring <- c(\"01/15/24\", \"01.15.24\", \"01-15-24\", \"01 15 24\", \"011524\", \"January 15, 2024\")\n\nstr_extract(string, \"\\\\d\\\\d.\\\\d\\\\d.\\\\d\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" \"01 15 24\" NA         NA        \n```\n:::\n\n```{.r .cell-code}\nstr_extract(string, \"\\\\d\\\\d[/.\\\\-]\\\\d\\\\d[/.\\\\-]\\\\d\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" NA         NA         NA        \n```\n:::\n\n```{.r .cell-code}\nstr_extract(string, \"\\\\d{2}[/.\\\\-]\\\\d{2}[/.\\\\-]\\\\d{2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" NA         NA         NA        \n```\n:::\n:::\n\n\n\n* Match a time of day such as \"9:17 am\" or \"12:30 pm\".  Require that the time be a valid time (not \"99:99 pm\"). Assume no leading zeros (i.e., \"09:17 am\").^[`^(1[012]|[1-9]):[0-5][0-9] (am|pm)$`]\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstring <- c(\"9:17 am\", \"12:30 pm\", \"99:99 pm\", \"09:17 am\")\n\nstr_extract(string, \"(1[012]|[1-9]):[0-5][0-9] (am|pm)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9:17 am\"  \"12:30 pm\" NA         \"9:17 am\" \n```\n:::\n\n```{.r .cell-code}\nstr_extract(string, \"^(1[012]|[1-9]):[0-5][0-9] (am|pm)$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9:17 am\"  \"12:30 pm\" NA         NA        \n```\n:::\n:::\n\n### Alternation operator\n\nThe \"or\" operator, `|` has the lowest precedence and parentheses have the highest precedence, which means that parentheses get evaluated before \"or\".\n\n* What is the difference between `\\bMary|Jane|Sue\\b` and `\\b(Mary|Jane|Sue)\\b`?^[In the former, the regex will search for `\\bMary` or `Jane` or `Sue\\b`. In the latter, the regex will search for `\\bMary\\b` or `\\bJane\\b` or `\\bSue\\b`.  That is, Janet will match the former but not the latter.]\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstring <- c(\"Mary\", \"Mar\", \"Janet\", \"jane\", \"Susan\", \"Sue\")\n\nstr_extract(string, \"\\\\bMary|Jane|Sue\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mary\" NA     \"Jane\" NA     NA     \"Sue\" \n```\n:::\n\n```{.r .cell-code}\nstr_extract(string, \"\\\\b(Mary|Jane|Sue)\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mary\" NA     NA     NA     NA     \"Sue\" \n```\n:::\n:::\n\n\n### An example from my work \n\nBelow are a handful of string characters that represent genomic sequences which were measured in an RNA Sequencing dataset.  The task below is to find  intergenic regions (IGR) and identify which coding sequences (CDS) bookend the intergenic regions.  Note that IGRs do not code for proteins while CDSs do.  Additionally, AS refers to anti-sense which identifies the genomic sequence in the opposite orientation (e.g., CGGATCC  vs CCTAGGC).  [The code below was written by Madison Hobbs, Scripps '19.]\n\n#####  The names of the genomic pieces {-}\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nallCounts <- data.frame(Geneid = c(\"CDS:b2743:pcm:L-isoaspartate_protein_carboxylmethyltransferase_type_II:cds2705:-:626:NC_000913.3\",\n            \"CDS:b2764:cysJ:sulfite_reductase2C_alpha_subunit2C_flavoprotein:cds2726:-:1799:NC_000913.3\",\n            \"IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\",\n            \"AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\",\n            \"IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\"))\n\nallCounts$GeneidBackup = allCounts$Geneid\n```\n:::\n\n\nFirst, it is important to identify which are IGR, CDS, and anti-sense.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nallCounts <- allCounts |> tidyr::separate(Geneid, c(\"feature\", \"rest\"), sep=\"[:]\")\nallCounts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     CDS\n2     CDS\n3     IGR\n4  AS_IGR\n5     IGR\n                                                                                                                                                                                       rest\n1                                                                                                                                                                                     b2743\n2                                                                                                                                                                                     b2764\n3 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n4                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n5                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                                                                                                                     GeneidBackup\n1                                                                                                                CDS:b2743:pcm:L-isoaspartate_protein_carboxylmethyltransferase_type_II:cds2705:-:626:NC_000913.3\n2                                                                                                                      CDS:b2764:cysJ:sulfite_reductase2C_alpha_subunit2C_flavoprotein:cds2726:-:1799:NC_000913.3\n3 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n4                                                      AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n5                                       IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n```\n:::\n:::\n\n\n\n\nWe keep only the IGR and AS_IGR strings, and we separate the two bookends.  Note, the separation comes at the backslash.\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr <- allCounts |> filter(feature %in% c(\"IGR\", \"AS_IGR\"))\nigr <- igr |> tidyr::separate(GeneidBackup, c(\"Geneid1\", \"Geneid2\"), sep = \"[/]\")\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"feature\" \"rest\"    \"Geneid1\" \"Geneid2\"\n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n```\n:::\n:::\n\n\nFor each of the two bookend Genes, we need to separate out the feature from the rest.  Note that we write over feature1 in the second line of code below.  Both of the bookends for all sequences are CDS elements.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr$feature1 <- tidyr::separate(igr, Geneid1, c(\"feature1\", \"rest\"), sep = \"[,]\")$feature1\nigr$feature1 <- tidyr::separate(igr, feature1, c(\"rest\", \"feature1\"), sep = \"[()]\")$feature1\nigr$feature2 <- tidyr::separate(igr, Geneid2, c(\"feature2\", \"rest\"), sep = \"[,]\")$feature2\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"feature\"  \"rest\"     \"Geneid1\"  \"Geneid2\"  \"feature1\" \"feature2\"\n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n  feature1 feature2\n1      CDS      CDS\n2      CDS      CDS\n3      CDS      CDS\n```\n:::\n:::\n\n\nAs CDS, it is now important to find the actual genenames for each of the IGR sequences.  We also keep each element's `bnum` which represents a unique gene identifier in *E. coli*.\n\n\n`bnum`, `genename`, `rna.name` act as place holders for the types of elements that we will need to identify the bookends of the IGRs.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nbnum = \"b[0-9]{4}\"\nbnum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"b[0-9]{4}\"\n```\n:::\n\n```{.r .cell-code}\ngenename = \",[a-z]{3}[A-Z,].\"\nrna.name = \",rna[0-9]..\"\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nigr$start.gene <- dplyr::case_when(\n  igr$feature1 == \"CDS\" ~ stringr::str_extract(igr$Geneid1, genename),\n  TRUE ~ stringr::str_extract(igr$Geneid1, rna.name))\nigr$end.gene <- dplyr::case_when(\n  igr$feature2 == \"CDS\" ~ stringr::str_extract(igr$Geneid2, genename),\n  TRUE ~ stringr::str_extract(igr$Geneid2, rna.name))\nigr$start.bnum <- dplyr::case_when(\n  igr$feature1 == \"CDS\" ~ stringr::str_extract(igr$Geneid1, bnum),\n  TRUE ~ \"none\")\nigr$end.bnum <- dplyr::case_when(\n  igr$feature2 == \"CDS\" ~ stringr::str_extract(igr$Geneid2, bnum),\n  TRUE ~ \"none\")\nigr <- igr |> tidyr::separate(start.gene, into = c(\"comma\", \"start.gene\"), sep = \"[,]\") |> \n  dplyr::select(-comma) |> \n  tidyr::separate(end.gene, into = c(\"comma\", \"end.gene\"), sep = \"[,]\") |> \n  dplyr::select(-comma)\nnames(igr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"feature\"    \"rest\"       \"Geneid1\"    \"Geneid2\"    \"feature1\"  \n [6] \"feature2\"   \"start.gene\" \"end.gene\"   \"start.bnum\" \"end.bnum\"  \n```\n:::\n\n```{.r .cell-code}\nigr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  feature\n1     IGR\n2  AS_IGR\n3     IGR\n                                                                                                                                                                                       rest\n1 (CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220/CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893)\n2                                                         (CDS,b0008,talB,transaldolase_B,cds7,+,953/CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587)\n3                                       (CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910/CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344)\n                                                                                                           Geneid1\n1 IGR:(CDS,b1594,mlc,glucosamine_anaerobic_growth_regulon_transcriptional_repressor3B_autorepressor,cds1581,-,1220\n2                                                                AS_IGR:(CDS,b0008,talB,transaldolase_B,cds7,+,953\n3                                 IGR:(CDS,b1808,yoaA,putative_ATP-dependent_helicase2C_DinG_family,cds1798,-,1910\n                                                                                                   Geneid2\n1           CDS,b1595,ynfL,LysR_family_putative_transcriptional_regulator,cds1582,-,893):+:945:NC_000913.3\n2 CDS,b0009,mog,molybdochelatase_incorporating_molybdenum_into_molybdopterin,cds8,+,587):+:639:NC_000913.3\n3                 CDS,b1809,yoaB,putative_reactive_intermediate_deaminase,cds1799,+,344):+:396:NC_000913.3\n  feature1 feature2 start.gene end.gene start.bnum end.bnum\n1      CDS      CDS        mlc     ynfL      b1594    b1595\n2      CDS      CDS       talB      mog      b0008    b0009\n3      CDS      CDS       yoaA     yoaB      b1808    b1809\n```\n:::\n:::\n\n\n\n## Lookaround\n\nA lookaround specifies a **place** in the regular expression that will anchor the string you'd like to match.  There are four types of lookarounds: positive lookahead, positive lookbehind, negative lookahead, and negative lookbehind.\n\n* \"x(?=y)\" – positive lookahead (matches 'x' when it is followed by 'y')\n* \"x(?!y)\" – negative lookahead (matches 'x' when it is not followed by 'y')\n* \"(?<=y)x\" – positive lookbehind (matches 'x' when it is preceded by 'y')\n* \"(?<!y)x\" – negative lookbehind (matches 'x' when it is not preceded by 'y')\n\nNote that the lookaround specifies a **place** in the string which means it does not return the details of the lookaround.  Using lookarounds, you can test strings against patterns without including the lookaround pattern in the resulting match.\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output-display}\n![Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/](images/lookaround.png){#fig-lookaround fig-alt='The four different lookaround options: positive and negative lookahead and lookbehind. Each lookaround provides an anchor for where to start the regular expression matching.' width=70%}\n:::\n:::\n\n\n\n## Example - Taskmaster\n\nIn the following example, we will wrangle some data scraped from the wiki site for the TV series, Taskmaster.  We won't cover the html scraping here, but I include the code for completeness.\n\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output-display}\n![Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11](images/taskmaster.jpg){#fig-taskmaster fig-alt='Screenshot of the wiki page for the Taskmaster TV series.' width=70%}\n:::\n:::\n\n\n\n\n\n### Scraping and wrangling Taskmaster\n\nGoal: to scrape the Taskmaster wiki into a data frame including task, description, episode, episode name, air date, contestant, score, and series.^[Thanks to Ciaran Evans at Wake Forest University for example and code,  https://sta279-f23.github.io/]\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nresults <- read_html(\"https://taskmaster.fandom.com/wiki/Series_11\") |>\n  html_element(\".tmtable\") |> \n  html_table() |>\n  mutate(episode = ifelse(startsWith(Task, \"Episode\"), Task, NA)) |>\n  fill(episode, .direction = \"down\") |>\n  filter(!startsWith(Task, \"Episode\"), \n         !(Task %in% c(\"Total\", \"Grand Total\"))) |>\n  pivot_longer(cols = -c(Task, Description, episode),\n               names_to = \"contestant\",\n               values_to = \"score\") |>\n  mutate(series = 11)\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nresults |> \n  select(Task, Description, episode, contestant, score, series) |>\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n  Task  Description                              episode contestant score series\n  <chr> <chr>                                    <chr>   <chr>      <chr>  <dbl>\n1 1     Prize: Best thing you can carry, but on… Episod… Charlotte… 1         11\n2 1     Prize: Best thing you can carry, but on… Episod… Jamali Ma… 2         11\n3 1     Prize: Best thing you can carry, but on… Episod… Lee Mack   4         11\n4 1     Prize: Best thing you can carry, but on… Episod… Mike Wozn… 5         11\n5 1     Prize: Best thing you can carry, but on… Episod… Sarah Ken… 3         11\n6 2     Do the most impressive thing under the … Episod… Charlotte… 2         11\n# ℹ 4 more rows\n```\n:::\n:::\n\n\n#### more succinct results {-}\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n   Task  Description         episode   contestant score series\n  1     Prize: Best thing…  Episode 1… Charlotte… 1         11\n  1     Prize: Best thing…  Episode 1… Jamali Ma… 2         11\n  1     Prize: Best thing…  Episode 1… Lee Mack   4         11\n  1     Prize: Best thing…  Episode 1… Mike Wozn… 5         11\n  1     Prize: Best thing…  Episode 1… Sarah Ken… 3         11\n  2     Do the most…        Episode 1… Charlotte… 2         11\n  2     Do the most…        Episode 1… Jamali Ma… 3[1]      11\n  2     Do the most…        Episode 1… Lee Mack   3         11\n  2     Do the most…        Episode 1… Mike Wozn… 5         11\n  2     Do the most…        Episode 1… Sarah Ken… 4         11\n```\n:::\n\n\nCurrently, the episode column contains entries like\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n\"Episode 1: It's not your fault. (18 March 2021)\"\n```\n:::\n\n\n\n### Cleaning the score column\n\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\ntable(results$score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   –    ✔    ✘    0    1    2    3 3[1] 3[2]    4 4[2]    5   DQ \n   7    1    1   11   37   42   48    1    3   50    1   55   13 \n```\n:::\n:::\n\n\nHow *should* the scores be stored? What is the cleaning task?\n\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output-display}\n![Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11](images/taskmaster-scores.jpg){#fig-taskmaster-scores fig-alt='Screenshot of the scores for each contestand on each task. Note that many of the scores have footnotes which are recorded in the results table from scraping the wiki.' width=70%}\n:::\n:::\n\n\n#### Extracting numeric information {-}\n\nSuppose we have the following string:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n\"3[1]\"\n```\n:::\n\n\nAnd we want to extract just the number \"3\":\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"3[1]\", \"3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3\"\n```\n:::\n:::\n\n\nWhat if we don't know which number to extract?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"3[1]\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"4[1]\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"4\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"10[1]\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"10[1]\", \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"10\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"DQ\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n#### `str_extract()` {-}\n\n`str_extract()` is an **R** function in the **stringr** package which finds *regular expressions* in strings of text.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My cat is 3 years old\", \"cat\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My cat is 3 years old\", \"3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3\"\n```\n:::\n:::\n\n\n\n#### Matching multiple options {-}\n\n`str_extract()` returns the first match; `str_extract_all()` allows more than one match.  \n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My cat is 3 years old\", \"cat|dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract(\"My dog is 10 years old\", \"cat|dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract(\"My dog is 10 years old, my cat is 3 years old\", \n            \"cat|dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(\"My dog is 10 years old, my cat is 3 years old\", \n                \"cat|dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"dog\" \"cat\"\n```\n:::\n:::\n\n\n#### Matching groups of characters {-}\n\nWhat if I want to extract a *number*?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My cat is 3 years old\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3\"\n```\n:::\n:::\n\n\nWhat will the result be for the following code?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n:::\n\n\n\nThe `+` symbol in a regular expression means \"repeated one or more times\"\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"My dog is 10 years old\", \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"10\"\n```\n:::\n:::\n\n\n#### Extracting from multiple strings {-}\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstrings <- c(\"My cat is 3 years old\", \"My dog is 10 years old\")\nstr_extract(strings, \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3\"  \"10\"\n```\n:::\n:::\n\n\nWhat if we have multiple instances across multiple strings?  We need to be careful working with lists (instead of vectors).\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstrings <- c(\"My cat is 3 years old\", \"My dog is 10 years old\")\nstr_extract(strings, \"\\\\w+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"My\" \"My\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(strings, \"\\\\w+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"My\"    \"cat\"   \"is\"    \"3\"     \"years\" \"old\"  \n\n[[2]]\n[1] \"My\"    \"dog\"   \"is\"    \"10\"    \"years\" \"old\"  \n```\n:::\n:::\n\n\n## Extracting episode information\n\nCurrently, the `episode` column contains entries like:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\n\"Episode 2: The pie whisperer. (4 August 2015)\"\n```\n:::\n\n\nHow would I extract just the episode number?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"\n```\n:::\n:::\n\n\n\nHow would I extract the episode name?\n\nGoal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`\n\nLet's break down that task into pieces.\n\nHow can we find the period at the end of the sentence?  What does each of these lines of code return?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Episode 2: The pie whisperer. (4 August 2015)\"\n```\n:::\n:::\n\n\nWe use an *escape character* when we actually want to choose a period:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".\"\n```\n:::\n:::\n\n\n\nRecall the goal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \":.+\\\\.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \": The pie whisperer.\"\n```\n:::\n:::\n\n\n## Lookaround (again)\n\n### Lookbehinds \n\n`(?<=)` is a *positive lookbehind*. It is used to identify expressions which are *preceded* by a particular expression.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?<=: ).+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The pie whisperer. (4 August 2015)\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?<=\\\\. ).+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"(4 August 2015)\"\n```\n:::\n:::\n\n\n### Lookaheads\n\n`(?=)` is a *positive lookahead*. It is used to identify expressions which are *followed* by a particular expression.\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \".+(?=\\\\.)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Episode 2: The pie whisperer\"\n```\n:::\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \".+(?=:)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Episode 2\"\n```\n:::\n:::\n\n\n#### Extracting episode information {-}\n\nGetting everything between the `:` and the `.`\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?<=: ).+(?=\\\\.)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The pie whisperer\"\n```\n:::\n:::\n\n\n#### Extracting air date {-}\n\nI want to extract just the air date. What pattern do I want to match?\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", ...)\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?<=\\\\().+(?=\\\\))\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"4 August 2015\"\n```\n:::\n:::\n\n\n\n#### Wrangling the episode info {-}\n\nCurrently:\n\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 270 × 1\n  episode                                        \n  <chr>                                          \n1 Episode 1: It's not your fault. (18 March 2021)\n2 Episode 1: It's not your fault. (18 March 2021)\n3 Episode 1: It's not your fault. (18 March 2021)\n4 Episode 1: It's not your fault. (18 March 2021)\n5 Episode 1: It's not your fault. (18 March 2021)\n6 Episode 1: It's not your fault. (18 March 2021)\n# ℹ 264 more rows\n```\n:::\n:::\n\n\n\nOne option:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nresults |>\n  select(episode) |>\n  mutate(episode_name = str_extract(episode, \"(?<=: ).+(?=\\\\.)\"),\n         air_date = str_extract(episode, \"(?<=\\\\().+(?=\\\\))\"),\n         episode = str_extract(episode, \"\\\\d+\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 270 × 3\n  episode episode_name        air_date     \n  <chr>   <chr>               <chr>        \n1 1       It's not your fault 18 March 2021\n2 1       It's not your fault 18 March 2021\n3 1       It's not your fault 18 March 2021\n4 1       It's not your fault 18 March 2021\n5 1       It's not your fault 18 March 2021\n6 1       It's not your fault 18 March 2021\n# ℹ 264 more rows\n```\n:::\n:::\n\n\n\nAnother option:\n\n\n::: {.cell fig.asp='0.618'}\n\n```{.r .cell-code}\nresults |>\n  separate_wider_regex(episode, \n                       patterns = c(\".+ \", \n                                    episode = \"\\\\d+\", \n                                    \": \", \n                                    episode_name = \".+\", \n                                    \"\\\\. \\\\(\", \n                                    air_date = \".+\", \n                                    \"\\\\)\"))\n```\n:::\n\n::: {.cell fig.asp='0.618'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 270 × 3\n  episode episode_name        air_date     \n  <chr>   <chr>               <chr>        \n1 1       It's not your fault 18 March 2021\n2 1       It's not your fault 18 March 2021\n3 1       It's not your fault 18 March 2021\n4 1       It's not your fault 18 March 2021\n5 1       It's not your fault 18 March 2021\n6 1       It's not your fault 18 March 2021\n# ℹ 264 more rows\n```\n:::\n:::\n\n\n## Regular expressions and **SQL** \n\nBack to the IMDb database... \n\n\n::: {.cell fig.asp='0.618'}\n\n:::\n\n::: {.cell fig.asp='0.618'}\n\n```{.sql .cell-code}\nSELECT production_year, title\n  FROM title\n  WHERE kind_id = 1 AND\n        title REGEXP '(?i)star'\n  LIMIT 0, 20;\n```\n\n\n<div class=\"knitsql-table\">\n<table>\n<caption>Displaying records 1 - 10</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> production_year </th>\n   <th style=\"text-align:left;\"> title </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2005 </td>\n   <td style=\"text-align:left;\"> &quot;Dancing with the Stars&quot; (I) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2005 </td>\n   <td style=\"text-align:left;\"> &quot;Dancing with the Stars&quot; (II) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2005 </td>\n   <td style=\"text-align:left;\"> &quot;Dancing with the Stars&quot; (III) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2017 </td>\n   <td style=\"text-align:left;\"> &quot;Girl Starter&quot; (II) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2001 </td>\n   <td style=\"text-align:left;\"> &quot;Popstars&quot; (I) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2001 </td>\n   <td style=\"text-align:left;\"> &quot;Popstars&quot; (II) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2002 </td>\n   <td style=\"text-align:left;\"> &quot;Popstars&quot; (I) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2000 </td>\n   <td style=\"text-align:left;\"> &quot;Popstars&quot; (I) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1959 </td>\n   <td style=\"text-align:left;\"> &quot;Startime&quot; (II) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1959 </td>\n   <td style=\"text-align:left;\"> &quot;Startime&quot; (I) </td>\n  </tr>\n</tbody>\n</table>\n\n</div>\n:::\n\n::: {.cell fig.asp='0.618'}\n\n:::\n\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. What is the difference between `[a|b]` and `(a|b)`?\n\n2. What is the main character which needs to be escaped inside `[...]`? Why?\n\n3. Why do we use lookarounds instead of just putting the location of interest inside our regular expression pattern?\n\n4. What are the differences between `*`, `+`, and `?` ?  How do the three metacharacters apply to a single character or a group of characters?\n\n5. How can you find a string between two patterns without picking up the bookending patterns themselves?\n\n6. Why does it make sense to write the regular expression pattern that matches the entire string of interest and not just a pattern which evaluates to TRUE?\n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. How can we use regular expressions to check for name mispellings or other similar data cleaning tasks?\n\n2. Name one thing that you noticed in the course materials (either in class or reading the notes, etc.) where you thought to yourself \"Oh, I'll have to be really careful about **that**.\"  Why would you need to be careful?\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/font-awesome-6.4.2/css/all.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/font-awesome-6.4.2/css/v4-shims.min.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}