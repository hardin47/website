{"title":"Combining tables in SQL","markdown":{"headingText":"Combining tables in SQL","headingAttr":{"id":"sec-join","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r}\n#| include: false\n\nsource(\"_common.R\")\nfontawesome::fa_html_dependency()\n```\n\n\nBeyond `SELECT` queries, the next most fundamental actions in **SQL** have to do with working with two or more tables simultaneously.  If you have worked in **R**, you may be familiar with the `join_()` family of functions.  Moving beyond `JOIN`, we will also cover subqueries which create temporary tables inside a **SQL** statement.\n\nThe database we'll work with for learning how to combine tables is on IMDb data.  There are **many** tables, see @tbl-imdb-tables.   @tbl-select-kind shows information on the `kind_type` table which describes each `kind`. Other tables contain ID variables which will be important when performing `JOIN`s.\n\n```{r}\ncon_imdb <- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"imdb\",\n  host = Sys.getenv(\"SMITH_HOST\"),\n  user = Sys.getenv(\"SMITH_USER\"),\n  password = Sys.getenv(\"SMITH_PWD\")\n)\n```\n\nAs seen in @tbl-imdb-tables, there are 21 tables in the `imdb` database!  We won't go into details about what each one of them means, but it is a **huge** database with details on movies, TV series, video games, and more.  For our work, we are interested only in movies (and details within, like actors and ratings).\n\n```{sql}\n#| connection: con_imdb\n#| label: imdb-tables\n#| output.var: \"imdb_tables\"\n\nSHOW TABLES;\n```\n\n\n```{r}\n#| label: tbl-imdb-tables\n#| echo: false\n#| tbl-cap: \"SHOW all the TABLES in the imdb database.\"\n\nimdb_tables |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nIf you are curious about the database, you can glance through each of the tables separately using a `SELECT` command (don't forget to use `LIMIT`, especially on a table you haven't previously explored).\n\n```{sql}\n#| connection: con_imdb\n#| label: select-kind\n#| output.var: \"select_kind\"\n\nSELECT * FROM kind_type\nLIMIT 0, 10;\n```\n\n\n```{r}\n#| label: tbl-select-kind\n#| echo: false\n#| tbl-cap: \"SELECT to glance at the kind_type table in the imdb database.\"\n\nselect_kind |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n## Subqueries\n\nA **SQL** **subquery** is a query used as a data source in the `FROM` clause, instead of the usual table.  There was a subquery in @tbl-length-time2 when the task required a function of the *results set* within the `SELECT` clause.\n\nWe could do something similar if we wanted to transform the variables in the select column.  The example is a little bit forced, and there are other ways to obtain the same results.  But hopefully the idea of a subquery is becoming more clear.  Again, a subquery is just a query that becomes the data source for `FROM`.\n\n@sec-reg-expr will cover regular expressions in some detail.  Here we use the function `REGEXP_REPLACE` to remove any characters which are not letters, comma, or space.  The function `LOWER` converts any upper case letters to lower case.\n\n\n```{sql}\n#| connection: con_imdb\n#| label: act-names\n#| output.var: \"act_names\"\n\nSELECT name,\n       name_clean,\n       SUBSTRING_INDEX(name_clean, ',', 1) AS last_name,\n       SUBSTRING_INDEX(name_clean, ',', -1) AS first_name\nFROM (\nSELECT LOWER(REGEXP_REPLACE(name, '[^a-z,. ]', '')) AS name_clean,\n       name,\n       id, person_id\nFROM aka_name) AS temp_subquery\nLIMIT 0, 30;\n```\n\n\n\n```{r}\n#| label: tbl-act-names\n#| echo: false\n#| tbl-cap: \"A subquery is used so that the variable in the subquery can be used and transformed in the SELECT clause.\"\n\nact_names |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n## All the `JOIN`s\n\nRecall that **SQL** is a query language that works on *relational databases*. One of its major strengths is being able to efficiently store information in separate tables that can be easily connected as needed.  The syntax for tying together information from multiple tables is done with a `JOIN` clause.  \n\nEach `JOIN` clause needs four specific pieces of information:\n\n1. The name of the first table you want to `JOIN`.\n2. The type of `JOIN` being used.\n3. The name of the second table you want to `JOIN`.\n4. The condition(s) under which you want the records in the first table to match records in the second table.\n\nSome types of `JOIN`s available in **MySQL** include the following, which are represented as Venn diagrams in @fig-venn-joins.\n\n* `JOIN`: include all of the rows that exist in both tables (similar to `inner_join()` in **R**, the intersection of the two tables).  `INNER JOIN` is alternative, and identical, function to `JOIN`.\n* `LEFT JOIN`: include all of the rows in the first table.  Connect them, as much as possible, to the rows in the second table.  Rows that have no match in the second table will have a value of `NULL` for the new \"second table\" variables.\n* `RIGHT JOIN`: include all of the rows in the second table.  Connect them, as much as possible, to the rows in the first table.  Rows that have no match in the first table will have a value of `NULL` for the new \"first table\" variables.  A `RIGHT JOIN` with the tables in the opposite order is the same as a `LEFT JOIN` with the tables in the original order.\n* `FULL OUTER JOIN`: include all rows in either table.  Rows that have no match in the other table will have a value of `NULL` for the other table variables. (similar to `full_join()` in **R**, the union of the two tables).  The functionality doesn't exist in **MySQL** but can be created using joins and `UNION`.\n* `CROSS JOIN`: match each row of the first table with each row in the second table. \n\n\n@fig-venn-joins shows Venn diagrams of the different types of joins.  @fig-table-joins shows four of the `JOIN` functions with mini data tables.  Note that in **SQL** the missing values will be labeled as `NULL` (not `NA`).\n\n```{r}\n#| label: fig-venn-joins\n#| out.width: 70%\n#| fig-cap: \"Venn diagrams describing different JOINs, image credit: phoenixNAP https://phoenixnap.com/kb/mysql-join\"\n#| fig-alt: Venn diagrams describing different types of JOINs.\n#| echo: false\ninclude_graphics(\"images/join-types.png\")\n```\n\n```{r}\n#| label: fig-table-joins\n#| out.width: 70%\n#| fig-cap: \"Mini data tables describing different JOINs, image credit: Statistics Globe blog, https://statisticsglobe.com/r-dplyr-join-inner-left-right-full-semi-anti\"\n#| fig-alt: Mini data tables describing different types of JOINs.\n#| echo: false\ninclude_graphics(\"images/table-joins.png\")\n```\n\n### A toy example\n\nWe will head to **R** for just a minute so as to understand joins using a small toy dataset on rock bands from the 60s, The Beatles and The Rolling Stones.  The function `sqldf()` in the **sqldf** **R** package allows for **SQL** commands on **R** objects.\n\nConsider the following datasets which are available in the **dplyr** package.\n\n```{r}\nband_members\nband_instruments\n```\n#### Inner join {-}\n\nAn inner join combines two datasets returning only the observations that exist in both of the original datasets.\n\n```{r}\nsqldf::sqldf(\"SELECT star.name,\n                     star.band,\n                     inst.plays\n              FROM band_members AS star\n              JOIN band_instruments AS inst ON star.name = inst.name\")\n```\n\n\n#### Full join {-}\n\nA full join combines two datasets returning every observation that exists in either one of the original datasets.  Note that in the results, Mick's instrument is missing, and Keith's band is missing.\n\nThe `full_join()` function does not have an equivalent in **MySQL**.  See @sec-full-union for using `JOIN`s and `UNION`s to produce a full join.\n\n```{r}\nband_members |>\n  full_join(band_instruments)\n```\n\n#### Left join {-}\n\nA left join combines two datasets returning every observation that exists in the left (or first) original dataset.  Note that in the results, Mick's instrument is missing.\n\n```{r}\nsqldf::sqldf(\"SELECT star.name,\n                     star.band,\n                      inst.plays\n              FROM band_members AS star\n              LEFT JOIN band_instruments AS inst \n              ON star.name = inst.name\")\n```\n\n\n#### Right join {-}\n\nA right join combines two datasets returning every observation that exists in the right (or second) original dataset. Note that in the results, Keith's band is missing.\n\n```{r}\nsqldf::sqldf(\"SELECT inst.name,\n                     star.band,\n                      inst.plays\n              FROM band_members AS star\n              RIGHT JOIN band_instruments AS inst \n              ON star.name = inst.name\")\n```\n\n### `JOIN`\n\nIn the `imdb` database, the `title` table includes information about the 4,626,322  titles in the database, including the `id`, `title`, `kind_id` (indicator for the kind of ID it is), and `production_year`.  It does not, however, include the review of the title.  See @tbl-title-glance.\n\n```{sql}\n#| connection: con_imdb\n#| label: title-glance\n#| output.var: \"title_glance\"\n\nSELECT * FROM title LIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-title-glance\n#| echo: false\n#| tbl-cap: \"SELECT to glance at the title table in the imdb database.\"\n\ntitle_glance |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nThe `movie_info_idx` table does not contain much information about each particular film.  It does, however, have an indicator for the movie ID (given by `movie_id`) as well as the number of votes (given by `info` where `type_id = 100`).  See @tbl-idx-glance.\n\n```{sql}\n#| connection: con_imdb\n#| label: idx-glance\n#| output.var: \"idx_glance\"\n\nSELECT * FROM movie_info_idx LIMIT 0, 6;\n```\n\n```{r}\n#| label: tbl-idx-glance\n#| echo: false\n#| tbl-cap: \"SELECT to glance at the movie_info_idx table in the imdb database.\"\n\nidx_glance |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nLet's say we want to combine the titles with the number of votes so that each title with user votes is included.  That is, only keep the titles that have a corresponding votes.  And also, only keep the votes if there is an associated title (which means we use `INNER JOIN` or just plain `JOIN`).\n\nRemember that `WHERE` will work on the raw variables, and `HAVING` works on the results set.  \n\nSome aspects of the query are worth pointing out:  \n* The variables in the output are given in the `SELECT` clause.  The `id` and `title` (both from the `title` table) and the `info` from the `movie_info_idx` which represents the number of IMDb votes.\n* The variables are preceded by the table from which they came. While not always necessary, it is good practice so as to avoid confusion.\n* The `JOIN` happens by linking the `id` variable in the `title` table with the `movie_id` variable in the `movie_info_idx` table.\n* The `LIMIT` wasn't necessary (there are only 12 observations), but it's good practice so that we don't end up with unwieldy query results.\n* The `WHERE` clause happens before the `JOIN` action, despite being written after.\n* In the `WHERE` clause, we keep only movies, only 2015 production year, and only at least 150,000 votes.\n\n```{sql}\n#| connection: con_imdb\n#| label: movie-join\n#| output.var: \"movie_join\"\n\nSELECT title.id,\n       title.title,\n       movie_info_idx.info\nFROM title\nJOIN movie_info_idx ON title.id = movie_info_idx.movie_id \nWHERE title.production_year = 2015 \n    AND title.kind_id = 1                  # movies only\n    AND movie_info_idx.info_type_id = 100  # info_type is votes\n    AND movie_info_idx.info > 150000       # at least 150,000 votes\nORDER BY movie_info_idx.info DESC\nLIMIT 0, 20;\n\n```\n\n\n```{r}\n#| label: tbl-movie-join\n#| echo: false\n#| tbl-cap: \"Movies from 2015 that have at least 150,000 votes in the imdb database.\"\n\nmovie_join |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nLet's say we also want to obtain information about the actors and actresses in each of the movies.  In the `cast_info` table, there is a `person_id`, a `movie_id`, and `person_role_id` is `1` if actor and `2` if actress.\n\n```{sql}\n#| connection: con_imdb\n#| label: cast-glance\n#| output.var: \"cast_glance\"\n\nSELECT * FROM cast_info LIMIT 0, 10;\n\n```\n\n\n```{r}\n#| label: tbl-cast-glance\n#| echo: false\n#| tbl-cap: \"SELECT to glance at the cast_info table in the imdb database.\"\n\ncast_glance |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nWe also want the name of the actress which is in the table `aka_name`.  Note that there is no *movie* information in the `aka_name` table!\n\n```{sql}\n#| connection: con_imdb\n#| label: name-glance\n#| output.var: \"name_glance\"\n\nSELECT * FROM aka_name LIMIT 0, 10;\n\n```\n\n\n```{r}\n#| label: tbl-name-glance\n#| echo: false\n#| tbl-cap: \"SELECT to glance at the aka_name table in the imdb database.\"\n\nname_glance |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nConnecting the most popular movies of 2015 with the actresses in those movies requires a series of `JOIN`s. Note that to make the code less onerous, the `title` table has been aliased by `t`, the `movie_info_idx` table has been aliased by `idx`, the `cast_info` table has been aliased by `a`, and the `aka_name` table has been aliased by `n`.\n\nThere is a lot of data cleaning to do as some of the `person_id` values are one to many!!  That is, the `person_id` matches multiple names in the `aka_name` database.\n\n\n```{sql}\n#| connection: con_imdb\n#| label: movie-join-actress\n#| output.var: \"movie_join_actress\"\n\nSELECT t.title,\n       idx.info,\n       a.person_id,\n       n.name\nFROM title AS t\nJOIN movie_info_idx AS idx ON t.id = idx.movie_id \nJOIN cast_info AS a ON idx.movie_id = a.movie_id\nJOIN aka_name AS n ON a.person_id = n.person_id\nWHERE t.production_year = 2015 \n    AND t.kind_id = 1           # movies only\n    AND idx.info_type_id = 100  # info_type is votes\n    AND idx.info > 150000       # at least 150,000 votes\n    AND a.role_id = 2           # actresses only\nORDER BY idx.info DESC\nLIMIT 0, 50;\n```\n\n\n```{r}\n#| label: tbl-movie-join-actress\n#| echo: false\n#| tbl-cap: \"Movies from 2015 that have at least 150,000 votes in the imdb database with the actress name joined.\"\n\nmovie_join_actress |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n\n\n### Other `JOIN`s\n\n\nConsider the following two tables.  The first has seven movies in it (from 2015 with at least 400,000 IMDb votes).  The second consists of almost 3 million actresses (`person_role_id = 2`).  In order to find a subset of actresses, the `person_id > 3900000` was set arbitrarily (in order to have a smaller group with which to work).\n\n\n\n#### movies: {-}\n\n```{sql}\n#| connection: con_imdb\n#| label: top-movies\n#| output.var: \"top_movies\"\n\nSELECT t.id,\n       t.title,\n       idx.info,\n       (SELECT COUNT(*)\n       FROM title AS t\n       JOIN movie_info_idx AS idx ON idx.movie_id = t.id\n       WHERE t.production_year = 2015  \n             AND t.kind_id = 1\n             AND idx.info_type_id = 100\n             AND idx.info > 400000) AS row_count\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1             # movies only\n    AND idx.info_type_id = 100    # info_type is votes\n    AND idx.info > 400000         # at least 400,000 votes\nORDER BY idx.info DESC\n```\n```{r}\n#| label: tbl-top-movies\n#| echo: false\n#| tbl-cap: \"Movies from 2015 that have at least 400,000 votes in the imdb database.\"\n\ntop_movies |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n#### actresses: {-}\n\n```{sql}\n#| connection: con_imdb\n#| label: actresses\n#| output.var: \"actresses\"\n\nSELECT a.person_id,\n       a.movie_id,\n       n.name,\n       (SELECT COUNT(*)\n       FROM cast_info AS a\n       JOIN aka_name AS n ON a.person_id = n.person_id\n       WHERE a.person_role_id = 2  \n             AND a.person_id > 390000) AS row_count\nFROM cast_info AS a\nJOIN aka_name AS n ON a.person_id = n.person_id\n       WHERE a.person_role_id = 2  \n             AND a.person_id > 3900000\nLIMIT 0, 20;\n```\n\n```{r}\n#| label: tbl-actresses\n#| echo: false\n#| tbl-cap: \"Actresses whose `person_id` is greater than 400000.  Note that some actresses have different spelling or phrasing of their names.\"\n\nactresses |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n\nUsing subqueries, we can `JOIN` the two datasets using different `JOIN` techniques.\n\n\n#### Inner `JOIN` {-}\n\nWith an inner `JOIN`, there are 32 rows corresponding to all the actresses in the seven 2015 films with the most votes.  Because the `JOIN` is an intersection of the two tables, only the actresses with `person_id` above 3900000 are included.\n\n```{sql}\n#| connection: con_imdb\n#| label: inner-movie-actress\n#| output.var: \"inner_movie_actress\"\n\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info > 400000) AS movs  # at least 400,000 votes     \nINNER JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id > 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n```\n\n```{r}\n#| label: tbl-inner-movie-actress\n#| echo: false\n#| tbl-cap: \"Inner `JOIN` of movies and actresses.\"\n\nDT::datatable(inner_movie_actress, escape = FALSE,\n              rownames = F,\n              colnames = c(\"movie ID\", \"movie title\", \"actress ID\", \"movie ID\", \"actress\"),\n              options = list(pageLength = 15))\n```\n\n#### `RIGHT JOIN` {-}\n\nWith a `RIGHT JOIN`, there are more than 300 rows (the `LIMIT` clause keeps us from knowing how many rows, but there are a LOT!) corresponding to all the actresses whose `person_id` above 3900000 are included.  Those actresses who acted in one of the seven top 2015 films are also included in the full results table, but they don't happen to be in the truncated output here. \n\n\n```{sql}\n#| connection: con_imdb\n#| label: right-movie-actress\n#| output.var: \"right_movie_actress\"\n\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info > 400000) AS movs  # at least 400,000 votes     \nRIGHT JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id > 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n```\n\n```{r}\n#| label: tbl-right-movie-actress\n#| echo: false\n#| tbl-cap: \"`RIGHT JOIN` of movies and actresses.\"\n\n\nDT::datatable(right_movie_actress, escape = FALSE,\n              rownames = F,\n              colnames = c(\"movie ID\", \"movie title\", \"actress ID\", \"movie ID\", \"actress\"),\n              options = list(pageLength = 15))\n```\n\n\n\n#### `LEFT JOIN` {-}\n\nWith a `LEFT JOIN`, there are 33 rows corresponding to the actresses in the seven top 2015 movies. Only **The Revenant** did not have any actresses whose `person_id` is greater than 3900000.\n\n\n```{sql}\n#| connection: con_imdb\n#| label: left-movie-actress\n#| output.var: \"left_movie_actress\"\n\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info > 400000) AS movs  # at least 400,000 votes     \nLEFT JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id > 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n```\n\n```{r}\n#| label: tbl-left-movie-actress\n#| echo: false\n#| tbl-cap: \"`LEFT JOIN` of movies and actresses.\"\n\n\nDT::datatable(left_movie_actress, escape = FALSE,\n              rownames = F,\n              colnames = c(\"movie ID\", \"movie title\", \"actress ID\", \"movie ID\", \"actress\"),\n              options = list(pageLength = 15))\n```\n\n\n\n#### Counting repeat actresses {-}\n\nWe might, for example, want to know how many names / spellings of a name with a specific `person_id` (above 3900000) exist for each `person_id` in each of the top voted seven films of 2015.  \n\nIn @tbl-num-repeat-names why isn't there a column indicating the name of the actress?  (There can't be such a column. Why not?) \n\n```{sql}\n#| connection: con_imdb\n#| label: num-repeat_names\n#| output.var: \"num_repeat_names\"\n\nSELECT acts.person_id, \n       COUNT(*) AS num_repeat_names\nFROM (SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info > 400000) AS movs  # at least 400,000 votes\nJOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id > 3900000) AS acts ON acts.movie_id = movs.id\nGROUP BY acts.person_id;\n```\n\n```{r}\n#| label: tbl-num-repeat-names\n#| echo: false\n#| tbl-cap: \"For each `person_id` (> 3900000) in the seven top voted 2015 films, how many names / spellings are associated with the `person_id`?\"\n\nnum_repeat_names |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n      \n#### Counting number of actresses per film {-}\n\nWe might, for example, want to know how many actresses with a specific `person_id` (above 3900000) are in each of the top voted seven films of 2015.  \n\n```{sql}\n#| connection: con_imdb\n#| label: num-actress\n#| output.var: \"num_actress\"\n\nSELECT movs.id, \n       movs.title,\n       COUNT(*) AS num_actress\nFROM (SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info > 400000) AS movs  # at least 400,000 votes\nJOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id > 3900000) AS acts ON acts.movie_id = movs.id\nGROUP BY movs.id;\n```\n\n```{r}\n#| label: tbl-num-actress\n#| echo: false\n#| tbl-cap: \"Number of actresses (with person_id > 3900000) in each of the seven top voted films of 2015.  Recall that The Revenant had no actresses with person_id > 3900000, so there are only six movies listed.\"\n\nnum_actress |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n## `UNION`ing\n\nIn **SQL** a `UNION` clause combines two different tables by their rows (whereas `JOIN` combines two tables by columns). Think about `UNION` similarly to the `bind_rows()` command in **R**.\n\n```{r}\n#| label: fig-table-union\n#| out.width: 120%\n#| fig-cap: \"UNION binds rows while JOIN appends columns, image credit: Jane Williams https://blog.devart.com/mysql-union-tutorial-html.html\"\n#| fig-alt: Mini data tables describing how UNION binds rows and JOIN appends columns.\n#| echo: false\n\nlibrary(cowplot)\nlibrary(ggpubr)\n\nfig1_path <- \"images/join-union.png\"\nfig2_path <- \"images/union-all.png\"\n\nfig1 <- ggdraw() + draw_image(fig1_path)\nfig2 <- ggdraw() + draw_image(fig2_path)\n\nggarrange(fig1, fig2, ncol = 1)\n```\n\n### `UNION`s\n\n`UNION` does not check the names of the columns to make sure they match.  `UNION` requires that the number of columns be the same and that the variable type be the same for all columns in the two tables being combined.\n\n@tbl-foo-bar contains a silly example.  The first table has 1 as `bar` and the second table has 20 as `bar`.  But when the tables are `UNION`ed, the `bar` column contains `c(1, 10)`. **SQL** took the column names from the first table and appended the second table without considering the variable names.\n\n```{sql}\n#| connection: con_imdb\n#| label: foo-bar\n#| output.var: \"foo_bar\"\n\nSELECT \n    1 AS bar,\n    2 AS foo\n\nUNION\n\nSELECT \n    10 AS foo,\n    20 AS bar;\n```\n\n```{r}\n#| label: tbl-foo-bar\n#| echo: false\n#| tbl-cap: \"The variable names are chosen from the first table.  The names and order of the variables in the second table are ignored when using `UNION`.\"\n\nfoo_bar |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n`UNION` is specifically designed to bind rows from two different `SELECT` queries where the variables have been selected in the same order.  If the two `SELECT` clauses are done from the same table with the same order of variables, you do not need to worry about the order of the variables matching up in the `UNION`.  If you are `UNION`ing two very different subqueries, you *do* need to worry about the variables and their order.\n\n#### `UNION` {-}\n\nLet's say we want to combine the top voted movies from 2015 with the top voted movies from 2019.  However, to account for time, we require the movies from 2015 to have more votes (400,000) than the movies from 2017 (200,000).  That is, the `WHERE` clause is different for the two subqueries.\n\n\n\n```{sql}\n#| connection: con_imdb\n#| label: union-years\n#| output.var: \"union_years\"\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 400000)\n\nUNION\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2017  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 200000)\nLIMIT 0, 100;\n   \n\n```\n\n```{r}\n#| label: tbl-union-years\n#| echo: false\n#| tbl-cap: \"The variable names are chosen from the first table.  The names and order of the variables in the second table are ignored when using `UNION`.\"\n\nunion_years |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n#### `UNION ALL` {-}\n\n`UNION` does check, however, to see if any of the rows in the two tables are identical.  If the goal is to include duplicates across two tables, use `UNION ALL` instead of `UNION`.\n\nLet's say that the first table is all movies with production year after 2012 and number of votes greater than 500,000.  The second table is movies with production year equal to 2015 and number of votes greater than 400,000.  Even though the Martian would have been in both tables, the results table lists The Marian only once in @tbl-union-years-votes.\n\n\n```{sql}\n#| connection: con_imdb\n#| label: union-years-votes\n#| output.var: \"union_years_votes\"\n\n(SELECT t.title,\n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year > 2012  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 500000)\n\nUNION\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 400000)\nORDER BY production_year DESC, num_votes;\n\n```\n\n```{r}\n#| label: tbl-union-years-votes\n#| echo: false\n#| tbl-cap: \"Using `UNION` to combine movies from table 1: later than 2012 and at least 500,000 votes with movies from table 2: 2015 and at least 400,000 votes.\"\n\nunion_years_votes |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nWhen `UNION ALL` is applied in the same context, The Martian is listed twice in the results table given in @tbl-union-all-years-votes.\n\n```{sql}\n#| connection: con_imdb\n#| label: union-all-years-votes\n#| output.var: \"union_all_years_votes\"\n\n(SELECT t.title,\n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year > 2012  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 500000)\n\nUNION ALL\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info > 400000)\nORDER BY production_year DESC, num_votes;\n\n```\n\n```{r}\n#| label: tbl-union-all-years-votes\n#| echo: false\n#| tbl-cap: \"Using `UNION ALL` to combine movies from table 1: later than 2012 and at least 500,000 votes with movies from table 2: 2015 and at least 400,000 votes.\"\n\nunion_all_years_votes |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n#### `FULL OUTER JOIN` via `UNION` {#sec-full-union}\n\n**MySQL** doesn't have a `FULL OUTER JOIN` (although other implementations of **SQL** do have full join functionality).  However, we can mimic a full join using right and left joins with `UNION`.\n\nRecall the ideas of `RIGHT JOIN` (which keeps all observations in the right table) and `LEFT JOIN` (which keeps all observations in the left table). By `UNION`ing the right and left joins, all of the observations are obtained (i.e., a full join).  Using the function `sqldf()` in the **sqldf** **R** package, the full join will be demonstrated using the 1960s rock bands. \n\nNotice that in the `RIGHT JOIN` the `name` column must come from the *right* table (not the *left* table).\n\nAlso notice that `UNION ALL` keeps the duplicate rows which is probably not what we want.\n\n\n```{r}\n\nsqldf::sqldf(\"SELECT star.name, star.band, inst.plays \n      FROM band_members AS star\n      LEFT JOIN band_instruments AS inst ON star.name = inst.name\")\nsqldf::sqldf(\"SELECT inst.name, star.band, inst.plays \n      FROM band_members AS star\n      RIGHT JOIN band_instruments AS inst ON star.name = inst.name\")\n\nsqldf::sqldf(\"SELECT star.name, star.band, inst.plays \n      FROM band_members AS star\n      LEFT JOIN band_instruments AS inst ON star.name = inst.name\nUNION\n      SELECT inst.name, star.band, inst.plays \n      FROM band_members AS star\n      RIGHT JOIN band_instruments AS inst ON star.name = inst.name \")\n\nsqldf::sqldf(\"SELECT star.name, star.band, inst.plays \n      FROM band_members AS star\n      LEFT JOIN band_instruments AS inst ON star.name = inst.name\nUNION ALL\n      SELECT inst.name, star.band, inst.plays \n      FROM band_members AS star\n      RIGHT JOIN band_instruments AS inst ON star.name = inst.name \")\n\n```\n\n\n## Best practice\n\nIt is always a good idea to terminate the **SQL** connection when you are done with it.\n\n```{r}\ndbDisconnect(con_imdb, shutdown = TRUE)\n```\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. What are the different types of joins?  Which data from which table gets kept and which gets removed for each type of join?\n\n2. What is the difference between a join and a union?\n\n3. When working with multiple tables, how (and why) is a variable linked to its table?\n\n4. Consider a `RIGHT JOIN`.  If there are records in the right table that are not in the left table, what will the value of the left table variable be for those records? \n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. What can happen if a `UNION` is done without carefully matching up the columns of the two tables being `UNION`ed?\n\n2. How will you know if `JOIN`ing removed some records?  What if the `JOIN` produced missing values for some of the variables?  How should we deal with missing data or arbitrarily removed records?\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":5,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"fig-show":"hold","fig-align":"center","callout-icon":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["js/mathjax-popover.html"],"output-file":"13-sql-joins.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","bibliography":["book.bib","packages.bib"],"editor":"source","knitr":{"opts_chunk":{"dev":"ragg_png","fig-asp":0.618}},"theme":["scss/colors.scss"],"header-includes":["<link rel=\"stylesheet\" media=\"screen\" href=\"https://fonts.googleapis.com/css2?family=Quicksand\" type=\"text/css\"/>\n"],"mainfont":"Quicksand","monofont":"Quicksand","author-meta":"Jo Hardin","lightbox":{"match":"auto","loop":false}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}