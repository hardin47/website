{"title":"Changing databases","markdown":{"headingText":"Changing databases","headingAttr":{"id":"sec-change-db","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r}\n#| include: false\n\nsource(\"_common.R\")\nfontawesome::fa_html_dependency()\n```\n\nAs in @sec-create-db, we will use **DuckDB** so that we have access to a server into which we can create and change data tables. Note that the database has been stored to a database directory called `duck_datab` which lives in the current **R** project.  You won't be able to open it like a standard folder, but it is where **DuckDB** stores the database files.\n\n```{r}\ncon_duckdb <- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n```\n\n## Changing data\n\nThe `UPDATE` function allows you to change a value in a table across all rows that match a certain criteria. The `impressions` table has a `name` column indicating the person being impersonated. Let's say, for whatever reason, that Ivanka Trump decides she doesn't want to be affiliated with the Trump name and she changes her name to her husband's name, becoming Ivanka Kushner.  You might want to `UPDATE` the file to indicate the impressions were of `Ivanka Kushner` instead of `Ivanka Trump`. (See @sec-load-duckdb for loading csv files into **DuckDB** directly.)\n\n```{sql}\n#| connection: con_duckdb\n#| echo: false\n#| include: false\n\nDROP TABLE IF EXISTS impressions;\n```\n\n```{r}\nduckdb_read_csv(con = con_duckdb, name = \"impressions\", files = \"data/impressions.csv\")\n```\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: ivanka-trump\n#| output.var: \"ivanka_trump\"\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n```\n\n```{r}\n#| label: tbl-ivanka-trump\n#| echo: false\n#| tbl-cap: \"Finding the impersonations of Ivanka Trump.\"\n\nivanka_trump |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nWe can use the `UPDATE` function to change the value of Ivanka's name to `Ivanka Kushner` throughout the database.  Note that all rows which match the `WHERE` clause get updated.\n\n```{sql}\n#| connection: con_duckdb\n\nUPDATE impressions\n   SET name = 'Ivanka Kushner'\n   WHERE name LIKE 'Ivanka%';\n```\n\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: ivanka-kushner\n#| output.var: \"ivanka_kushner\"\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n```\n\n```{r}\n#| label: tbl-ivanka-kushner\n#| echo: false\n#| tbl-cap: \"Ivanka's last name has been `UPDATE`d to Kushner.\"\n\nivanka_kushner |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\nBe careful with `UPDATE`. A careless `UPDATE` could write over all of the data in your table.  There is no **undo** function.\n:::\n\n## Inserting data\n\nLet's say we want to include the more recent hosts in the `hosts` table.  First, we scrape the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a> which lists the episode id (the date) and the host.  The **R** package **rvest** allows us to pull out the appropriate html elements.  The `epid` and `aid` are joined together in a tibble, and `filter`ed to only include episodes which are not already in the `episodes` table. (See @sec-load-duckdb for loading csv files into **DuckDB** directly.)\n\n```{sql}\n#| connection: con_duckdb\n#| echo: false\n#| include: false\n\nDROP TABLE IF EXISTS hosts;\n```\n\n\n```{r}\nduckdb_read_csv(con = con_duckdb, name = \"hosts\", files = \"data/hosts.csv\")\n```\n\nBy searching the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a>, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\n```{sql}\n#| connection: con_duckdb\n#| label: hosts-orig\n#| output.var: \"hosts_orig\"\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n```\n\n```{r}\n#| label: tbl-hosts-orig\n#| echo: false\n#| tbl-cap: \"Most recent hosts in the original `hosts` table.\"\n\nhosts_orig |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n`INSERT` allows us to add the relevant information associated with the episode of SNL that Elon Musk hosted.\n\n```{sql}\n#| connection: con_duckdb\n\nINSERT INTO hosts (epid, aid)\n   VALUES ('20210508', 'Elon Musk');\n```\n\n```{sql}\n#| connection: con_duckdb\n#| label: hosts-elon\n#| output.var: \"hosts_elon\"\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n```\n\n```{r}\n#| label: tbl-hosts-elon\n#| echo: false\n#| tbl-cap: \"`hosts` table including the added observation from May 8, 2021.\"\n\nhosts_elon |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nIt would be tedious to `INSERT` all of the most recent host information by hand.  Instead, we'll scrape the <a href = \"http://www.snlarchives.net/Episodes/\" target = \"_blank\">SNL archives</a> using the **R** package **rvest**, which allows us to pull out the appropriate html elements.  The `epid` and `aid` are joined together in a tibble, and `filter`ed to only include episodes which are not already in the `episodes` table.\n\n\n```{r}\nlibrary(rvest)\n\nrecent_hosts <- read_html(\"http://www.snlarchives.net/Episodes/\") |>\n  html_nodes(\"tr\") |>\n  purrr::map_df( ~ tibble(\n    epid = .x |> html_node(\"a.ms-2.me-2\") |>\n      html_attr(\"href\") |>\n      str_extract(\"\\\\d+\"),\n    aid = .x |> html_node(\"td:nth-child(2)\") |>\n      html_text2() |>\n      str_extract(\"[\\\\w\\\\. \\\\w\\\\.]+(?=/|$)\")\n  )) |>\n  filter(epid > 20210508)\n\n\nwrite_csv(recent_hosts, \"data/recent_hosts.csv\")\n\n```\n\n```{sql}\n#| connection: con_duckdb\n\nINSERT INTO hosts\n   SELECT *\n   FROM READ_CSV('data/recent_hosts.csv', AUTO_DETECT = TRUE);\n```\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: hosts-update\n#| output.var: \"hosts_update\"\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n```\n\n```{r}\n#| label: tbl-hosts-update\n#| echo: false\n#| tbl-cap: \"The full `hosts` table, updated through December 16, 2023.\"\n\nhosts_update |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n## Deleting data\n\nYou might change your mind and decide that you really only want hosts from years up to 2022. The `DELETE` function deletes any rows specified by the `WHERE` clause.\n\n```{sql}\n#| connection: con_duckdb\n\nDELETE FROM hosts\n   WHERE epid > 20221231\n```\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: hosts-delete\n#| output.var: \"hosts_delete\"\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n```\n\n```{r}\n#| label: tbl-hosts-delete\n#| echo: false\n#| tbl-cap: \"The `hosts` table, after 2023 has been `DELETE`d.\"\n\nhosts_delete |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n## Altering the table\n\n`ALTER TABLE` changes the structure of a table. For example, you can add or delete columns, create or destroy indexes, change the type of existing columns, or rename columns or the table itself.  (Syntax below is for **MySQL**.  Unfortunately, **DuckDB** is finicky when `ALTER`ing tables, so the commands below may not work on the tables created using **DuckDB**.)^[Information and examples in this section taken from https://dev.mysql.com/doc/refman/8.0/en/alter-table.html#alter-table-add-drop-column]\n\nMultiple `ADD`, `ALTER`, `DROP`, and `CHANGE` clauses are permitted in a single `ALTER TABLE` statement, separated by commas. \n\n```{sql}\n#| eval: false\n\nALTER TABLE t1\nDROP COLUMN col1,\nDROP COLUMN col2;\n```\n\n\nTo alter a column to change both its name and definition, use `CHANGE`, specifying the old and new names and the new definition. For example, to rename an `INT NOT NULL` column from `a` to `b`  and change its definition to use the `BIGINT` data type while retaining the `NOT NULL` attribute, do this:\n\n```{sql}\n#| eval: false\n\nALTER TABLE t1 CHANGE a b BIGINT NOT NULL;\n```\n\nTo change a column definition but not its name, use `CHANGE` or `MODIFY`. With `CHANGE`, the syntax requires two column names, so you must specify the same name twice to leave the name unchanged. For example, to change the definition of column `b`:\n\n```{sql}\n#| eval: false\n\nALTER TABLE t1 CHANGE b b INT NOT NULL;\n```\n\n`MODIFY` is more convenient to change the definition without changing the name because it requires the column name only once:\n\n```{sql}\n#| eval: false\n\nALTER TABLE t1 MODIFY b INT NOT NULL;\n```\n\nTo change a column name but not its definition, use `CHANGE` or `RENAME COLUMN`. With `CHANGE`, the syntax requires a column definition, so to leave the definition unchanged, you must re-specify the definition the column currently has. For example, to rename an `INT NOT NULL` column from `b` to `a`:\n\n```{sql}\n#| eval: false\n\nALTER TABLE t1 CHANGE b a INT NOT NULL;\n```\n\n`RENAME COLUMN` is more convenient to change the name without changing the definition because it requires only the old and new names:\n\n```{sql}\n#| eval: false\n\nALTER TABLE t1 RENAME COLUMN b TO a;\n```\n\nIn general, you cannot rename a column to a name that already exists in the table. However, this is sometimes not the case, such as when you swap names or move them through a cycle. If a table has columns named `a`, `b`, and `c`, the following are valid operations:\n\n```{sql}\n#| eval: false\n\n/* swap a and b */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n\n/* \"rotate\" a, b, c through a cycle */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;\n```\n\n\n## Temporary tables\n\nTemporary tables are used to break down complex queries into smaller, more manageable steps. For example, let's say we want to `JOIN` two tables after each has been filtered using different `WHERE` clauses.  The filtered tables can each be saved into their own temporary tables and then the temporary tables can be merged.  \n\n\nNote that tables in **DuckDB** are saved (to disk), even when the connection is closed.  However, temporary tables are saved in memory (instead of on disk) and are deleted when the connection is closed.   Specific configuration of the temporary directory allows for <a href = \"https://duckdb.org/docs/sql/statements/create_table.html#temporary-tables\" target = \"_blank\">temporary tables to be saved</a>, even when the connection is closed.\n\n\n\nNotice that most of the tables have some kind of ID which allows `JOIN`ing across tables.\n\n```{sql}\n#| connection: con_duckdb\n#| label: select-hosts\n#| output.var: \"select_hosts\"\n\nSELECT * FROM hosts LIMIT 10;\n```\n\n\n```{r}\n#| label: tbl-select-hosts\n#| echo: false\n#| tbl-cap: \"Note the epid and aid identifiers in the hosts table.\"\n\nselect_hosts |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: select-episodes\n#| output.var: \"select_episodes\"\n\nSELECT * FROM episodes LIMIT 10;\n```\n\n```{r}\n#| label: tbl-select-episodes\n#| echo: false\n#| tbl-cap: \"Note the sid and epid identifiers in the episodes table.\"\n\nselect_episodes |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n\n### Creating a temporary table\n\nThe `episodes` table has an `aired` column which includes the data.  Recall that if we create a new variable (e.g., `year`) using `aired`, we cannot use `year` in the `WHERE` clause (`WHERE` only works on the original table, not the results set). \n\nIn **MySQL** the function `STR_TO_DATE` allowed us to create a datetime variable from which year could be extracted.  However, in **DuckDB**, it is more complicated to convert the character string of \"April 10, 2020\" to \"2020-04-10\".  Don't worry about the code too much, but note that we wouldn't want to wrangle the character date string every time we wanted to filter for year.\n\n#### What does `POSITION` do?  {-}\n\nIn case you are curious about the date wrangling code... consider `SUBSTRING(aired, POSITION(',' IN aired) + 2)`\n\n1. `POSITION(',' IN aired)`: This part of the expression uses the `POSITION` function to find the position of the first occurrence of the comma (`,`) in the string `aired`. The result is the index (position) of the comma within the string.\n\n2. `POSITION(',' IN aired) + 2`: This adds 2 to the index of the comma. The `+ 2` is used to move the starting point of the substring two positions to the right of the comma. This is done to exclude the comma itself and any following spaces.\n\n3. `SUBSTRING(aired, POSITION(',' IN aired) + 2)`: This part uses the SUBSTRING function to extract a substring from the string `aired`. The starting position of the substring is determined by `POSITION(',' IN aired) + 2`, and it goes until the end of the string. This effectively removes the part of the string that comes before and including the first comma.\n\nIn summary, the entire expression is extracting a substring from the original string `aired`, starting from two positions to the right of the first comma and continuing until the end of the string. This can be useful in scenarios where you want to remove or isolate part of a string based on the position of a specific character (in this case, the comma).\n\n\n\n```{sql}\n#| connection: con_duckdb\n#| echo: false\n#| include: false\n\nDROP TABLE IF EXISTS episodes_date;\n```\n\n\n```{sql}\n#| connection: con_duckdb\n    \nCREATE TEMP TABLE episodes_date AS\n    SELECT *, CASE\n             WHEN POSITION(',' IN aired) > 0 THEN\n    EXTRACT(YEAR FROM CAST(\n                SUBSTRING(aired, POSITION(',' IN aired) + 2) || '-' ||\n                CASE\n                    WHEN POSITION('January' IN aired) > 0 THEN '01'\n                    WHEN POSITION('February' IN aired) > 0 THEN '02'\n                    WHEN POSITION('March' IN aired) > 0 THEN '03'\n                    WHEN POSITION('April' IN aired) > 0 THEN '04'\n                    WHEN POSITION('May' IN aired) > 0 THEN '05'\n                    WHEN POSITION('June' IN aired) > 0 THEN '06'\n                    WHEN POSITION('July' IN aired) > 0 THEN '07'\n                    WHEN POSITION('August' IN aired) > 0 THEN '08'\n                    WHEN POSITION('September' IN aired) > 0 THEN '09'\n                    WHEN POSITION('October' IN aired) > 0 THEN '10'\n                    WHEN POSITION('November' IN aired) > 0 THEN '11'\n                    WHEN POSITION('December' IN aired) > 0 THEN '12'\n                    ELSE '01' -- Default to January if no month is found\n                END || '-' ||\n                SUBSTRING(aired, POSITION(' ' IN aired) + 1, 2) AS DATE\n            ))\n            END AS year FROM episodes;\n```\n\n\n```{sql}\n#| connection: con_duckdb\n#| label: episodes-date\n#| output.var: \"episodes_date\"\n\nSELECT * FROM episodes_date LIMIT 10;\n```\n\n```{r}\n#| label: tbl-episodes-date\n#| echo: false\n#| tbl-cap: \"The temporary table called `episodes_date` that has identifiers of sid, epid, and epno.\"\n\nepisodes_date |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n### Using a temporary table\n\nNow that the `year` variable has been created in the new temporary table called `episodes_date`, we can use `episode_date` to query and find, for example, all of the hosts in 2019.\n\n```{sql}\n#| connection: con_duckdb\n#| label: hosts-2019\n#| output.var: \"hosts_2019\"\n\nSELECT hosts.aid, ep.aired, ep.year FROM hosts \nJOIN episodes_date AS ep ON hosts.epid = ep.epid\nWHERE year = 2019\nLIMIT 25;\n```\n\n```{r}\n#| label: tbl-hosts-2019\n#| echo: false\n#| tbl-cap: \"SNL hosts in 2019.\"\n\nhosts_2019 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n## Best practice\n\nIt is always a good idea to terminate the **SQL** connection when you are done with it.\n\n```{r}\ndbDisconnect(con_duckdb, shutdown = TRUE)\n```\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. How can you update the value of a particular variable?  What if you want to update a variable for many rows?\n\n2. Why/when would you use `CHANGE` instead of `RENAME COLUMN`?  Why/when would you use `CHANGE` instead of `MODIFY`?\n\n3. When are temporary tables useful? Can you always create temporary tables if you are working in **SQL**?  Explain the hierarchy of tables, temporary tables, and subqueries.\n\n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. Who should have the ability / access to insert, delete, or update tables?  Should everyone who accesses a table also have the ability to edit the table?  Why or why not?\n\n2. What can you do if you accidentally `DELETE` the wrong rows or `DROP` the wrong the columns?\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":5,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"fig-show":"hold","fig-align":"center","callout-icon":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["js/mathjax-popover.html"],"output-file":"15-change-db.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","bibliography":["book.bib","packages.bib"],"editor":"source","knitr":{"opts_chunk":{"dev":"ragg_png","fig-asp":0.618}},"theme":["scss/colors.scss"],"header-includes":["<link rel=\"stylesheet\" media=\"screen\" href=\"https://fonts.googleapis.com/css2?family=Quicksand\" type=\"text/css\"/>\n"],"mainfont":"Quicksand","monofont":"Quicksand","author-meta":"Jo Hardin","lightbox":{"match":"auto","loop":false}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}