{"title":"SQL clauses","markdown":{"headingText":"SQL clauses","headingAttr":{"id":"sec-sql-clauses","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r}\n#| include: false\n\nsource(\"_common.R\")\nfontawesome::fa_html_dependency()\n```\n\nMost of this chapter will focus on the **SQL** commands needed to run queries of the database.  Much of the syntax is strikingly familiar to tidy verbs in **R**.  However, this chapter starts with a few **SQL** specific tools used to learn about the tables in any particular database.\n\n## Looking at the tables in the database\n\nConsider a database of taxi rides from the <a href = \"https://en.wikipedia.org/wiki/Yellow_Cab_Company\" target = \"_blank\">Yellow Cab</a> company in NYC in March of 2014.\n\n<!--\nHadley Wickham discusses how to use Sys.getenv: https://cran.r-project.org/web/packages/httr/vignettes/secrets.html\n-->\n\n```{r}\nlibrary(mdsr)\ncon_taxi <- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"nyctaxi\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n```\n\n```{sql}\n#| connection: con_taxi\n#| label: show\n#| output.var: \"show\"\n\nSHOW TABLES;\n```\n\n```{r}\n#| label: tbl-show\n#| echo: false\n#| tbl-cap: \"SHOW all the TABLES in the nyctaxi database.\"\n\nshow |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nThere is only one table in the `nyctaxi` database, called `yellow_old`.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: select-describe\n#| output.var: \"select_describe\"\n\nDESCRIBE yellow_old;\n```\n\n\n```{r}\n#| label: tbl-select-describe\n#| echo: false\n#| tbl-cap: \"DESCRIBE variables in the yellow_old table.\"\n\nselect_describe |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nSimilarly, the `DESCRIBE` command shows the 18 field names (variables) in the `yellow_old` table.  Some of the variables are characters (`text`) and some are numeric (either `double` or `bigint`)\n\n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\n**SQL** clauses must be written in the following order.\n:::\n\nMost engagements with SQL are done through queries. Queries in **SQL** start with the `SELECT` keyword and consist of several clauses, which must be written in the following order:^[Taken directly from <a href = \"https://mdsr-book.github.io/mdsr3e/15-sqlI.html#the-sql-data-manipulation-language\" target = \"_blank\">Modern Data Science with R</a>]\n\n* `SELECT` allows you to list the columns, or functions operating on columns, that you want to retrieve. This is an analogous operation to the `select()` verb in **dplyr**, potentially combined with `mutate()` or `summarize()`.\n* `FROM` specifies the table where the data are.\n* `JOIN` allows you to stitch together two or more tables using a key. This is analogous to the `inner_join()` and `left_join()` commands in **dplyr**.  More details of `JOIN` are given in @sec-join.\n* `WHERE` allows you to filter the records according to some criteria and is an analogous operation to the `filter()` verb in **dplyr**.  Note, even though the `WHERE` clause is written after `SELECT` and `JOIN`, it is actually evaluated *before* the `SELECT` or `JOIN` clauses (which is why `WHERE` only works on the original data, not the results set).\n* `GROUP BY` allows you to aggregate the records according to some shared value and is an analogous operation to the `group_by()` verb in **dplyr**.\n* `HAVING` is like a `WHERE` clause that operates on the result set—not the records themselves and is analogous to applying a second `filter()` command in **dplyr**, after the rows have already been aggregated.\n* `ORDER BY` is exactly what it sounds like—it specifies a condition for ordering the rows of the result set and is analogous to the `arrange()` verb in **dplyr**.\n* `LIMIT` restricts the number of rows in the output and is similar to the **R** commands `head()` and `slice()`.\n\n## SELECT ... FROM {#sec-select}\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `select()`\n\n:::\n\nA **SQL** query starts with a `SELECT` command and has a corresponding `FROM` to indicate the table being queried.  Columns may be specified, or the `*` will indicate that every column in the table should be returned.\n\nThe shortest **SQL** query is the following `SELECT` command.  Do not run this command!!! The `yellow_old` table has 15 million rows, and we do not want to look at them simultaneously.\n\n```{r}\n#| eval: false\n\nDO NOT RUN:  SELECT * FROM yellow_old;\n```\n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\nDo not run the following command unless you are **certain** that the table from which you are querying is small enough so that the query results fit easily into your memory.\n\n`SELECT` * `FROM` table;\n:::\n\nInstead, to look at the top of the table, `SELECT` the first few rows.  The `LIMIT` command specifies which rows to select:  the first number is the number of rows to skip (0 rows skipped), the second number is the number of rows to print up to (up to row 14).\n\n```{sql}\n#| connection: con_taxi\n#| label: select-14\n#| output.var: \"select_14\"\n\nSELECT * FROM yellow_old LIMIT 0, 14;\n\n```\n\n```{r}\n#| label: tbl-select-14\n#| echo: false\n#| tbl-cap: \"SELECT the first 14 rows of the table.\"\n\nselect_14 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nSpeaking of which, how many rows are there in the `yellow_old` table?  That is, how many taxi rides are recorded?  Now `SELECT` is used with a summary function, `COUNT()`.  Instead of using a separate summary function (like `mutate()` or `summarize()`), all the work is done inside the `SELECT` call.\n\n```{sql}\n#| connection: con_taxi\n#| label: select-count\n#| output.var: \"select_count\"\n\nSELECT COUNT(*) FROM yellow_old;\n```\n\n```{r}\n#| label: tbl-select-count\n#| echo: false\n#| tbl-cap: \"COUNT(*) the number of rows in the entire yellow_old table.\"\n\nselect_count |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nYikes, more than 15 million taxi rides!!!!\n\n\nYou might have noticed that the `yellow_old` table has two different datetime variables (one for pickup, the other for drop-off).  We can use the information to assess the length of each ride (in time, not distance).  However, the variables are stored in SQL as character strings instead of in a DateTime format (even though they **look** like they are stored in a DateTime format!), see @tbl-select-describe.  Fortunately for us, **SQL** has functionality to convert a `text` Type into `DateTime` type (POSIXct is a special type of DateTime formatting).\n\n```{sql}\n#| connection: con_taxi\n#| label: str-date\n#| output.var: \"str_date\"\n\nSELECT\n      pickup_datetime, dropoff_datetime,\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff\n   FROM yellow_old\n   LIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-str-date\n#| echo: false\n#| tbl-cap: \"Convert the pickup and drop-off times to date objects using STR_TO_DATE.\"\n\nstr_date |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nNow that the variables are no longer strings, we can subtract them to figure out the number of minutes for each taxi ride.  Unfortunately, the following code won't run because neither of the variables `pickup` or `dropoff` are in the table `yellow_old`.\n\n```{sql}\n#| connection: con_taxi\n#| eval: false\n\nSELECT\n      pickup_datetime, dropoff_datetime,\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff.\n      TIMEDIFF(pickup, dropoff) AS length_time\n   FROM yellow_old\n   LIMIT 0, 10;\n```\n\n\nInstead, we need two layers of `SELECT` commands so that the first `SELECT` (i.e., inside) layer creates the new variables, and the second `SELECT` (i.e., outside) layer subtracts the two times.\n\n```{sql}\n#| connection: con_taxi\n#| label: length-time2\n#| output.var: \"length_time2\"\n\nSELECT \n   pickup,\n   dropoff, \n   TIMEDIFF(pickup, dropoff) AS length_time \nFROM (\n   SELECT\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff\n   FROM yellow_old)\n   AS subquery_table\nLIMIT 0, 20;\n```\n\n```{r}\n#| label: tbl-length-time2\n#| echo: false\n#| tbl-cap: \"Use TIMEDIFF to find the length (time) of the ride.\"\n\nlength_time2 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nAlternatively, the `STR_TO_DATE()` function can be applied inside the `TIMEDIFF()` function so that the full (now only) `SELECT` command is being used only on variables that are in the original table.\n\n```{sql}\n#| connection: con_taxi\n#| label: length-time3\n#| output.var: \"length_time3\"\n\nSELECT \n   pickup_datetime,\n   dropoff_datetime, \n   TIMEDIFF(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\"), \n            STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\")) AS length_time \nFROM yellow_old\nLIMIT 0, 20;\n```\n\n```{r}\n#| label: tbl-length-time3\n#| echo: false\n#| tbl-cap: \"Alternative method to find the length (time) of the ride.\"\n\nlength_time3 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\nKeep in mind that there is a distinction between clauses that operate on the *variables of the original table* versus those that operate on the *variables of the results set*.  The variables `pickup_datetime` and `dropoff_datetime` are columns in the original table - they are written to disk on the **SQL** server.  The variables `pickup`, `dropoff`, and `length_time` exist only in the results set, which is passed from the server (**SQL** server) to the client (e.g., **RStudio** or **DBeaver**) and is not written to disk.\n\n## SELECT DISTINCT\n\n`SELECT DISTINCT` returns only unique rows.  That is, it filters out all the duplicates of a variable or a combination of variables.  Note that I have a larger limit on the query that I needed, just to make sure I got all the levels.\n\n```{sql}\n#| connection: con_taxi\n#| label: distinct1\n#| output.var: \"distinct1\"\n\nSELECT DISTINCT payment_type\nFROM yellow_old\nLIMIT 0, 20;\n```\n\n```{r}\n#| label: tbl-distinct1\n#| echo: false\n#| tbl-cap: \"The distinct values of payment types. `CRD` is credit card; `CSH` is cash; `NOC` is no charge; `DIS` is dispute.\"\n\ndistinct1 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n```{sql}\n#| connection: con_taxi\n#| label: distinct2\n#| output.var: \"distinct2\"\n\nSELECT DISTINCT vendor_id, payment_type\nFROM yellow_old\nLIMIT 0, 20;\n```\n\n```{r}\n#| label: tbl-distinct2\n#| echo: false\n#| tbl-cap: \"The distinct values of vendor ID and payment types, combined. `VTS` is Verifone Transportation Systems and `CMT` is Mobile Knowledge Systems Inc. `CRD` is credit card; `CSH` is cash; `NOC` is no charge; `DIS` is dispute.\"\n\ndistinct2 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n## WHERE\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `filter()`\n\n:::\n\nThe `WHERE` clause is analogous to the `filter()` function in **dplyr**.  However, keep in mind that there are two **SQL** commands that resemble the **dplyr** `filter()` function. `WHERE` operates on the original data in the table and `HAVING` operates on the result set. See below for examples using `HAVING`.\n\nWhat was the fare for those taxi rides where the `tip_amount` was more than $10 and the person used cash? (Note that in **SQL** the equality logical is `=` and in **R** the equality logical is `==`.) \n\n```{sql}\n#| connection: con_taxi\n#| label: select-10\n#| output.var: \"select_10\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount > 10\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n```\n\n```{r}\n#| label: tbl-select-10\n#| echo: false\n#| tbl-cap: \"WHERE to subset the queried rows.\"\n\nselect_10 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n`BETWEEN` can be used to specify a range of values for a numeric value. `BETWEEN` is inclusive.\n\n```{sql}\n#| connection: con_taxi\n#| label: where-1012a\n#| output.var: \"where_1012a\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 12\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n```\n\n```{r}\n#| label: tbl-where-1012a\n#| echo: false\n#| tbl-cap: \"BETWEEN in the WHERE clause.\"\n\nwhere_1012a |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n`IN` is similar to the **dplyr** `%in%` function which specifies distinct values for the variable.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: where-1012b\n#| output.var: \"where_1012b\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount IN (10, 12)\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n```\n\n```{r}\n#| label: tbl-where-1012b\n#| echo: false\n#| tbl-cap: \"IN in the WHERE clause.\"\n\nwhere_1012b |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nThe `WHERE` clause can be established by a number of logical commands combined using either `AND` or `OR`.  Usually it is important to use parentheses with `OR` logicals to make sure the desired query is return.  Consider the difference between the following queries.  In **SQL** (as in many programming languages), `AND` takes precedent over `OR` in the order of operations, when there are no parentheses.  (I was taught to remember order of operations using \"please excuse my dear aunt Sally.\")  The order of operations on the first query groups the second two conditions into one because `AND` take precedence over `OR` (as if the query was `tip_amount BETWEEN 10 and 12 OR (total_amount BETWEEN 100 and 112 AND payment_type = \"CSH\")`).\n\n```{sql}\n#| connection: con_taxi\n#| label: where-1012c\n#| output.var: \"where_1012c\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 12 OR \n      total_amount BETWEEN 100 and 112 AND \n      payment_type = \"CSH\"\nLIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-where-1012c\n#| echo: false\n#| tbl-cap: \"OR and AND without parentheses.\"\n\nwhere_1012c |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n```{sql}\n#| connection: con_taxi\n#| label: where-1012d\n#| output.var: \"where_1012d\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE (tip_amount BETWEEN 10 and 12 OR \n      total_amount BETWEEN 100 and 112 ) AND \n      payment_type = \"CSH\"\nLIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-where-1012d\n#| echo: false\n#| tbl-cap: \"OR and AND with parentheses.\"\n\nwhere_1012d |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n### NULL in WHERE\n\n**SQL** considers `NULL` values to be unknown. Therefore, when searching for a `NULL` value, you need to ask **SQL** if the value `IS NULL`.  Asking if the value is *equal* to `NULL` doesn't work because `NULL` values don't equal anything (they are unknown).  To keep all values that are not `NULL` values, use `IS NOT NULL` in the `WHERE` clause. \n\n\n::: {.callout-tip icon=false}\n\n## <i class=\"fas fa-triangle-exclamation\"></i> Watch out!\n\nIn order to find the records that are `NULL` use `WHERE variable IS NULL`.\n:::\n\n\n#### A `NULL` example^[taken from: https://cs186berkeley.net/notes/note1/#filtering-null-values]\n\nThe logic of `NULL`:\n\n* If you do anything with `NULL`, you'll just get `NULL`. For instance if $x$ is `NULL`, then $x > 3$, $1 = x$, and $x + 4$ all evaluate to `NULL`. Even $x =$ `NULL` evaluates to `NULL`! if you want to check whether $x$ is `NULL`, use `x IS NULL` or `x IS NOT NULL`.\n* `NULL` short-circuits with boolean operators. That means a boolean expression involving `NULL` will evaluate to:\n   * TRUE, if it'd evaluate to TRUE regardless of whether the `NULL` value is really TRUE or FALSE.\n   * FALSE, if it'd evaluate to FALSE regardless of whether the `NULL` value is really TRUE or FALSE.\n   * Or `NULL`, if it depends on the `NULL` value.\n\nConsider the following table and **SQL** query:\n\n\n```{sql}\n#| connection: con_taxi\n\nSELECT * FROM (\n   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs\n   UNION\n   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   \n   UNION\n   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs\n   UNION\n   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs\n   ) AS temptable;\n```\n\n\n```{sql}\n#| connection: con_taxi\n\nSELECT * FROM (\n   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs\n   UNION\n   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   \n   UNION\n   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs\n   UNION\n   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs\n   ) AS temptable\nWHERE age <= 20 OR num_dogs = 3;\n```\n\nWhere does the `WHERE` clause do? It tells us that we only want to keep the rows satisfying the `age <= 20` OR `num_dogs = 3`. Let’s consider each row one at a time:\n\n* For Ace, `age <= 20` evaluates to TRUE so the claim is satisfied.\n* For Ada, `age <= 20` evaluates to `NULL` but `num_dogs = 3` evaluates to TRUE so the claim is satisfied.\n* For Ben, `age <= 20` evaluates to `NULL` and `num_dogs = 3` evaluates to `NULL` so the overall expression is `NULL` which has a FALSE value.\n* For Cho, `age <= 20` evaluates to FALSE and `num_dogs = 3` evaluates to `NULL` so the overall expression evaluates to `NULL` (because it depends on the value of the `NULL`).\n\nThus we keep only Ace and Ada.\n\n\n\n\n\n```{sql}\n#| connection: con_taxi\n#| label: where-null1\n#| output.var: \"where_null1\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE payment_type IS NULL\nLIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-where-null1\n#| echo: false\n#| tbl-cap: \"There is **ONE** record with a NULL value for `payment_type`. Note that the way to find NULL values is via `IS NULL`.\"\n\nwhere_null1 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n```{sql}\n#| connection: con_taxi\n#| label: where-null2\n#| output.var: \"where_null2\"\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE payment_type = NULL\nLIMIT 0, 10;\n```\n\n```{r}\n#| label: tbl-where-null2\n#| echo: false\n#| tbl-cap: \"**NO** rows are selected when the `WHERE` command is specified to indicate if the variable *equals* `NULL`.\"\n\nwhere_null2 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n\n\n\n## GROUP BY\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `group_by()`\n\n:::\n\nThe `GROUP BY` clause will direct **SQL** to carry out the query separately for each category in the grouped variable.  Using `GROUP BY` is particularly important when aggregating multiple rows into a single number.  Some <a href = \"https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html\" target = \"_blank\">aggregate functions</a> include `COUNT()`, `SUM()`, `MAX()`, `MIN()`, and `AVG()`.\n\nNote that `SUM(1)` adds (sums) the number `1` for each row.  Which is the same as counting the number of rows.  `SUM(2)` adds (sums) the number `2` for each row which returns twice as many transactions.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: group-pay\n#| output.var: \"group_pay\"\n\nSELECT COUNT(*) AS num_transactions, \n       SUM(1) AS num_transactions_also,\n       SUM(2) AS double_transactions,\n       payment_type \nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 20\nGROUP BY payment_type;\n```\n\n```{r}\n#| label: tbl-group-pay\n#| echo: false\n#| tbl-cap: \"GROUP BY on payment_type.\"\n\ngroup_pay |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nFor those people who tipped between $10 and $20, what was the lowest and highest fare for each of the types of payments?\n\n\n```{sql}\n#| connection: con_taxi\n#| label: group-pay2\n#| output.var: \"group_pay2\"\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type \nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 20\nGROUP BY payment_type;\n```\n\n```{r}\n#| label: tbl-group-pay2\n#| echo: false\n#| tbl-cap: \"GROUP BY with aggregate functions.\"\n\ngroup_pay2 |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n`GROUP BY` will work applied to multiple columns.  Let's tabulate the same results, now broken down by `payment_type` and day of week.  Except that we don't have a day of week variable!  We need to convert the `pickup_datetime` variable to a DateTime object and then pull out the day of the week, using `DAYNAME`.  (Note: `DAYOFWEEK` will give you the day of the week as an integer.  Use your internet sleuthing skills if you are looking for functions that might help your desired query.)\n\n\n```{sql}\n#| connection: con_taxi\n#| label: group-wday\n#| output.var: \"group_wday\"\n\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday;\n```\n\n```{r}\n#| label: tbl-group-wday\n#| echo: false\n#| tbl-cap: \"GROUP BY with payment_type and wday.\"\n\ngroup_wday |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n\n## ORDER BY\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `arrange()`\n:::\n\nThe `ORDER BY` command can be used with or without the `GROUP BY` and aggregation commands.  It allows us to look at interesting aspects of the data by sorting the data.\n\n```{sql}\n#| connection: con_taxi\n#| label: order-low\n#| output.var: \"order_low\"\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY lowest_fare ASC;\n```\n\n```{r}\n#| label: tbl-order-low\n#| echo: false\n#| tbl-cap: \"ORDER BY lowest_fare, ascending.\"\n\norder_low |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nWHAT?!?!!  How in the world was one of the fares -$612.40? It doesn't make any sense that a fare would be negative.  Some additional inquiry into the observation corresponding to a fare of -$612.40 is absolutely warranted.  If the observation is found to be a typo, it would need to be removed from the data set.  If the observation is somehow legitimate, it would need to be included in the analysis, with the information provided about its legitimacy.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: order-high\n#| output.var: \"order_high\"\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY highest_fare DESC;\n```\n\n```{r}\n#| label: tbl-order-high\n#| echo: false\n#| tbl-cap: \"ORDER BY highest_fare, descending\"\n\norder_high |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n$950 is a lot to pay for a cab ride!  But in NYC, I'd believe it.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: order-wday\n#| output.var: \"order_wday\"\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY wday, payment_type;\n```\n\n```{r}\n#| label: tbl-order-wday\n#| echo: false\n#| tbl-cap: \"ORDER BY wday and payment_type.\"\n\norder_wday |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n\n::: {.callout-tip appearance=\"minimal\"}\n\nNote that both `GROUP BY` and `ORDER BY` evaluate the data after it has been retrieved.  Therefore, the functions operate on the *results set*, not the original rows of the data. \n:::\n\nAs above, we were able to `GROUP BY` and `ORDER BY` on the new variables we had created, `wday`.\n\n## HAVING\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `filter()`\n:::\n\nRecall that `WHERE` acts only on the original data.  If we are interested in rides that took place on `Friday`, we need to use the derived variable `wday` instead of the raw variable `pickup_datetime`.  Fortunately, `HAVING` works on the results set.  Note that **SQL** uses `''` for strings, not `\"\"`.  In **SQL**, `\"\"` is used to identify variables (not values of variables), like **R**'s `&grave;&grave;`.\n\n\n\n```{sql}\n#| connection: con_taxi\n#| label: having-fri\n#| output.var: \"having_fri\"\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nHAVING wday = 'Friday';\n```\n\n```{r}\n#| label: tbl-having-fri\n#| echo: false\n#| tbl-cap: \"HAVING to filter only Friday rides.\"\n\nhaving_fri |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\nWhile it worked out quite well for us that `HAVING` was able to filter the data based on the results set, the use of `HAVING` was quite onerous because the entire data set was considered before the filter was applied.  That is, if the filter can be done on the original data using `WHERE`, the query will be much faster and more efficient.\n\nNote: `HAVING` requires a `GROUP BY` clause.  And the variable(s) used in `HAVING` must also be part of the `GROUP BY` clause.\n\n\n::: {.callout-tip appearance=\"minimal\"}\n\nWhenever possible, use `WHERE` instead of `HAVING` to make your queries as efficient as possible.\n:::\n\n\n## LIMIT\n\n::: {.callout-tip appearance=\"minimal\"}\n\n**R** function: `head()` or `slice()`\n:::\n\nAs we've seen, `LIMIT` truncates the query to specified rows. The `LIMIT` command specifies which rows to select:  the first number is the number of rows to skip (0 rows skipped), the second number is the number of rows to print up to (up to row 14).  The query below shows the last 10 rows of the entire data set.\n\n```{sql}\n#| connection: con_taxi\n#| label: limit-last\n#| output.var: \"limit_last\"\n\nSELECT * FROM yellow_old LIMIT 15428118, 10;\n\n```\n\n```{r}\n#| label: tbl-limit-last\n#| echo: false\n#| tbl-cap: \"LIMIT on the last 10 rows of the table.\"\n\nlimit_last |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n \n\n\n\n## Saving **SQL** queries as **R** objects\n\nIf you are working in **R** to run **SQL** commands, you may want to use the query output for further analysis or visualizations.  In that case, use `#|output.var: \"name_of_variable\"` inside the `{sql}` chunk.  The variable called `name_of_variable` will then be available to be used in the R environment.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: new-table\n#| output.var: \"new_table\"\n#| echo: fenced\n\nSELECT *, DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old \nLIMIT 0, 1000;\n\n```\n\n```{r}\n#| label: tbl-new-table\n#| echo: false\n#| tbl-cap: \"New data.frame saved to R called new_table.\"\n\nnew_table |>\n  head() |>\n  kbl(linesep = \"\", booktabs = TRUE) |>\n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                latex_options = c(\"striped\", \"hold_position\"),\n                full_width = FALSE) \n\n```\n\n```{r}\n#| echo: fenced\n\nnew_table |>\n  drop_na(wday) |>\n  ggplot(aes(x = fare_amount, y = tip_amount, color = wday)) + \n  geom_point() \n```\n\n\n## Best practice\n\nIt is always a good idea to terminate the **SQL** connection when you are done with it.\n\n\n```{r}\ndbDisconnect(con_taxi, shutdown = TRUE)\n```\n\n\n## <i class=\"fas fa-lightbulb\"></i> Reflection questions  \n\n1. Why don't we usually want to run the query: `SELECT * FROM table;`?\n\n2. What is the difference between the original table and the results set?\n\n3. In SQL does the `WHERE` clause use `=` or `==` to indicate equality?\n\n4. Does `BETWEEN` work only on numeric variables or also on character strings?\n\n5. What syntax is used to direct `ORDER BY` to sort by biggest to smallest or smallest to biggest?\n\n6. What is the difference between `WHERE` and `HAVING`?\n\n## <i class=\"fas fa-balance-scale\"></i> Ethics considerations \n\n1. What are different ways to look at the dataset to identify possible typos or rogue values?  \n\n2. Why are such tasks so much harder with large datasets (versus small datasets)?\n\n3. Why are such tasks to much more important with large datasets (versus small datasets)?\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":5,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"fig-show":"hold","fig-align":"center","callout-icon":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["js/mathjax-popover.html"],"output-file":"03-sql-verbs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["book.bib","packages.bib"],"editor":"source","knitr":{"opts_chunk":{"dev":"ragg_png","fig-asp":0.618}},"theme":["scss/colors.scss"],"header-includes":["<link rel=\"stylesheet\" media=\"screen\" href=\"https://fonts.googleapis.com/css2?family=Quicksand\" type=\"text/css\"/>\n"],"mainfont":"Quicksand","monofont":"Quicksand","author-meta":"Jo Hardin","lightbox":{"match":"auto","loop":false}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}