# Data acquisition {#sec-intro .unnumbered}

<!--
Databases are a powerful structure for holding huge amounts of data that can easily be accessed.  Databases are made up of tables which are efficiently stored using indexing and avoiding unnecessary replication of information.

@sec-db covers details of databases and reviews **R** functionality (mostly through the **dplyr** package) for working with data frames that mimics **SQL** queries for working with tables.

@sec-sql-R covers three different ways to run **SQL** queries in **R**. **R** code can be translated into **SQL**; the **DBI** package can send **SQL** queries through an `r` chunk; and **SQL** queries can be sent directly to a **SQL** server through a `sql` chunk.  Additionally, DBeaver is introduced as a **SQL** client which supports **MySQL**.


**SQL** code is written as a series of **statements**. Later in the text, @sec-create-db and @sec-change-db cover statements like `CREATE` for defining new tables and `INSERT` for adding data. In this part, @sec-sql-clauses covers `SELECT` statements, which are arguably the most useful statements for data scientists.  `SELECT` statements are also called queries because they query table(s), with particular characteristics, from databases.

A query is made up of **clauses**. Every query must have a `SELECT` and `FROM` clause.  Other clauses include `WHERE`, `GROUP BY`, `HAVING`, and `ORDER BY`, all of which will be covered in @sec-sql-clauses.

Because of the efficiency of data storage in **SQL** databases, it is often necessary to combine information held across two or more tables.  @sec-join covers combining tables via `JOIN` (combining columns) and via `UNION` (combining rows).
-->
