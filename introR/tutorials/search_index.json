[
["intro.html", "Getting Started with R &amp; RStudio Chapter 1 Introduction 1.1 Getting started 1.2 Reproducibility 1.3 reprex", " Getting Started with R &amp; RStudio Jo Hardin 2020-01-20 Chapter 1 Introduction 1.1 Getting started These tutorials will be done in R using RStudio as a front end. You will need to either download R and RStudio (both are free) onto your own computer or use them on Pomona’s server. You may use R on the Pomona server: https://rstudio.pomona.edu/ (All Pomona students will be able to log in immediately. Non-Pomona students need to go to ITS at Pomona to get Pomona login credentials.) If you want to use R on your own machine, you may. Please make sure all components are updated: R is freely available at http://www.r-project.org/ and is already installed on college computers. Additionally, installing R Studio is required http://rstudio.org/. http://swirlstats.com/ is one way to walk through learning the basics of R. All assignments should be turned in using R Markdown compiled to pdf. 1.2 Reproducibility 1.2.1 The reproducible data analysis process Scriptability \\(\\rightarrow\\) R Literate programming \\(\\rightarrow\\) R Markdown Version control \\(\\rightarrow\\) Git / GitHub Scripting and literate programming Donald Knuth “Literate Programming” (1983) Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer- what to do, let us concentrate rather on explaining to human beings- what we want a computer to do. The ideas of literate programming have been around for many years! and tools for putting them to practice have also been around but they have never been as accessible as the current tools Reproducibility checklist Are the tables and figures reproducible from the code and data? Does the code actually do what you think it does? In addition to what was done, is it clear why it was done? (e.g., how were parameter settings chosen?) Can the code be used for other data? Can you extend the code to do other things? Tools: R &amp; R Studio See this great video (less than 2 min) on a reproducible workflow: https://www.youtube.com/watch?v=s3JldKoA0zw&amp;feature=youtu.be You must use both R and RStudio software programs R does the programming R Studio brings everything together You may use Pomona’s server: https://rstudio.pomona.edu/ Figure 1.1: Taken from Modern Drive: An introduction to statistical and data sciences via R, by Ismay and Kim Figure 1.2: Jessica Ward, PhD student at Newcastle University 1.3 reprex Help me help you In order to create a reproducible example … Step 1. Copy code onto the clipboard Step 2. Type reprex() into the Console Step 3. Look at the Viewer to the right. Copy the Viewer output into GitHub, Piazza, an email, stackexchange, etc. Some places to learn more about reprex include A blog about it: https://teachdatascience.com/reprex/ The reprex vignette: https://reprex.tidyverse.org/index.html reprex dos and donts: https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html Jenny Bryan webinar on reprex: “Help me help you. Creating reproducible examples” https://resources.rstudio.com/webinars/help-me-help-you-creating-reproducible-examples-jenny-bryan 1.3.0.1 reprex demo reprex( jan31 + months(0:11) + days(31) ) multiple lines of code: reprex({ jan31 &lt;- ymd(&quot;2013-01-31&quot;) jan31 + months(0:11) + days(31) }) reprex({ library(lubridate) jan31 &lt;- ymd(&quot;2013-01-31&quot;) jan31 + months(0:11) + days(31) }) "],
["wrang.html", "Chapter 2 Data Wrangling 2.1 Structure of Data 2.2 R examples, basic verbs 2.3 Higher Level Data Verbs 2.4 R examples, higher level verbs", " Chapter 2 Data Wrangling As with data visualization, data wrangling is a fundamental part of being able to accurately, reproducibly, and efficiently work with data. The approach taken in the following chapter is based on the philosophy of tidy data and takes many of its precepts from database theory. If you have done much work in SQL, the functionality and approach of tidy data will feel very familiar. The more adept you are at data wrangling, the more effective you will be at data analysis. Information is what we want, but data are what we’ve got. (Kaplan 2015) Embrace all the ways to get help! cheat sheets: https://www.rstudio.com/resources/cheatsheets/ tidyverse vignettes: https://www.tidyverse.org/articles/2019/09/tidyr-1-0-0/ pivoting: https://tidyr.tidyverse.org/articles/pivot.html google what you need and include R tidy or tidyverse 2.1 Structure of Data For plotting, analyses, model building, etc., it’s important that the data be structured in a very particular way. Hadley Wickham provides a thorough discussion and advice for cleaning up the data in Wickham (2014). Tidy Data: rows (cases/observational units) and columns (variables). The key is that every row is a case and every column is a variable. No exceptions. Creating tidy data is not trivial. We work with objects (often data tables), functions, and arguments (often variables). The Active Duty data are not tidy! What are the cases? How are the data not tidy? What might the data look like in tidy form? Suppose that the case was “an individual in the armed forces.” What variables would you use to capture the information in the following table? https://docs.google.com/spreadsheets/d/1Ow6Cm4z-Z1Yybk3i352msulYCEDOUaOghmo9ALajyHo/edit#gid=1811988794 Problem: totals and different sheets Better for R: longer format with columns - grade, gender, status, service, count (case is still the total pay grade) Case is individual (?): grade, gender, status, service (no count because each row does the counting) 2.1.1 Building Tidy Data Within R (really within any type of computing language, Python, SQL, Java, etc.), we need to understand how to build data using the patterns of the language. Some things to consider: object_name = function_name(data_table, arguments) is a way of using a function to create a new object. object_name = data_table %&gt;% function_name(arguments) uses chaining syntax as an extension of the ideas of functions. In chaining, the value on the left side of %&gt;% becomes the first argument to the function on the right side. object_name = data_table %&gt;% function_name(arguments) %&gt;% function_name(other arguments) is extended chaining. %&gt;% is never at the front of the line, it is always connecting one idea with the continuation of that idea on the next line. * In R, all functions take arguments in round parentheses (as opposed to subsetting observations or variables from data objects which happen with square parentheses). Additionally, the spot to the left of %&gt;% is always a data table. * The pipe syntax should be read as then, %&gt;%. 2.1.2 Examples of Chaining The pipe syntax (%&gt;%) takes a data frame (or data table) and sends it to the argument of a function. The mapping goes to the first available argument in the function. For example: x %&gt;% f(y) is the same as f(x, y) y %&gt;% f(x, ., z) is the same as f(x,y,z) 2.1.2.1 Little Bunny Foo Foo From Hadley Wickham, how to think about tidy data. Little bunny Foo Foo Went hopping through the forest Scooping up the field mice And bopping them on the head The nursery rhyme could be created by a series of steps where the output from each step is saved as an object along the way. foo_foo &lt;- little_bunny() foo_foo_1 &lt;- hop(foo_foo, through = forest) foo_foo_2 &lt;- scoop(foo_foo_2, up = field_mice) foo_foo_3 &lt;- bop(foo_foo_2, on = head) Another approach is to concatenate the functions so that there is only one output. bop( scoop( hop(foo_foo, through = forest), up = field_mice), on = head) Or even worse, as one line: bop(scoop(hop(foo_foo, through = forest), up = field_mice), on = head))) Instead, the code can be written using the pipe in the order in which the function is evaluated: foo_foo %&gt;% hop(through = forest) %&gt;% scoop(up = field_mice) %&gt;% bop(on = head) babynames Each year, the US Social Security Administration publishes a list of the most popular names given to babies. In 2014, http://www.ssa.gov/oact/babynames/#ht=2 shows Emma and Olivia leading for girls, Noah and Liam for boys. The babynames data table in the babynames package comes from the Social Security Administration’s listing of the names givens to babies in each year, and the number of babies of each sex given that name. (Only names with 5 or more babies are published by the SSA.) 2.1.3 Data Verbs (on single data frames) Super important resource: The RStudio dplyr cheat sheet: https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf Data verbs take data tables as input and give data tables as output (that’s how we can use the chaining syntax!). We will use the R package dplyr to do much of our data wrangling. Below is a list of verbs which will be helpful in wrangling many different types of data. See the Data Wrangling cheat sheet from RStudio for additional help. https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf} sample_n() take a random row(s) head() grab the first few rows tail() grab the last few rows filter() removes unwanted *cases} arrange() reorders the cases select() removes unwanted *variables} (and rename() ) distinct() returns the unique values in a table mutate() transforms the variable (and transmute() like mutate, returns only new variables) group_by() group_by tells R that SUCCESSIVE functions keep in mind that there are groups of items. So group_by only makes sense with variables later on (like summarize). summarize() collapses a data frame to a single row. Not useful yet (will be useful with group_by()). Some functions that are used within summarize() include: \\begin{itemize} min(), max(), mean(), sum(), sd(), median(), and IQR() n(): number of observations in the current group n_distinct(x): count the number of unique values in x first_value(x), last_value(x) and nth_value(x, n): work similarly to x[1], x[length(x)], and x[n] 2.2 R examples, basic verbs 2.2.1 Datasets starwars is from dplyr , although originally from SWAPI, the Star Wars API, http://swapi.co/. NHANES From ?NHANES: NHANES is survey data collected by the US National Center for Health Statistics (NCHS) which has conducted a series of health and nutrition surveys since the early 1960’s. Since 1999 approximately 5,000 individuals of all ages are interviewed in their homes every year and complete the health examination component of the survey. The health examination is conducted in a mobile examination center (MEC). babynames Each year, the US Social Security Administration publishes a list of the most popular names given to babies. In 2018, http://www.ssa.gov/oact/babynames/#ht=2 shows Emma and Olivia leading for girls, Noah and Liam for boys. (Only names with 5 or more babies are published by the SSA.) 2.2.2 Examples of Chaining library(babynames) babynames %&gt;% nrow() ## [1] 1924665 babynames %&gt;% names() ## [1] &quot;year&quot; &quot;sex&quot; &quot;name&quot; &quot;n&quot; &quot;prop&quot; babynames %&gt;% glimpse() ## Observations: 1,924,665 ## Variables: 5 ## $ year &lt;dbl&gt; 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,… ## $ sex &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;,… ## $ name &lt;chr&gt; &quot;Mary&quot;, &quot;Anna&quot;, &quot;Emma&quot;, &quot;Elizabeth&quot;, &quot;Minnie&quot;, &quot;Margaret&quot;, … ## $ n &lt;int&gt; 7065, 2604, 2003, 1939, 1746, 1578, 1472, 1414, 1320, 1288,… ## $ prop &lt;dbl&gt; 0.07238359, 0.02667896, 0.02052149, 0.01986579, 0.01788843,… babynames %&gt;% head() ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1880 F Mary 7065 0.0724 ## 2 1880 F Anna 2604 0.0267 ## 3 1880 F Emma 2003 0.0205 ## 4 1880 F Elizabeth 1939 0.0199 ## 5 1880 F Minnie 1746 0.0179 ## 6 1880 F Margaret 1578 0.0162 babynames %&gt;% tail() ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2017 M Zyhier 5 0.00000255 ## 2 2017 M Zykai 5 0.00000255 ## 3 2017 M Zykeem 5 0.00000255 ## 4 2017 M Zylin 5 0.00000255 ## 5 2017 M Zylis 5 0.00000255 ## 6 2017 M Zyrie 5 0.00000255 babynames %&gt;% sample_n(size=5) ## # A tibble: 5 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1982 F Laqueen 5 0.00000276 ## 2 1946 F Corrina 5 0.0000031 ## 3 2003 M Kenderick 11 0.00000524 ## 4 1930 F Yetta 40 0.0000343 ## 5 1989 F Mali 8 0.00000402 babynames %&gt;% mosaic::favstats(n ~ sex, data = .) ## sex min Q1 median Q3 max mean sd n missing ## 1 F 5 7 11 31 99686 151.4294 1180.557 1138293 0 ## 2 M 5 7 12 33 94756 223.4940 1932.338 786372 0 2.2.3 Data Verbs Taken from the dplyr tutorial: http://dplyr.tidyverse.org/ 2.2.3.1 Starwars library(dplyr) starwars %&gt;% dim() ## [1] 87 13 starwars %&gt;% names() ## [1] &quot;name&quot; &quot;height&quot; &quot;mass&quot; &quot;hair_color&quot; &quot;skin_color&quot; ## [6] &quot;eye_color&quot; &quot;birth_year&quot; &quot;gender&quot; &quot;homeworld&quot; &quot;species&quot; ## [11] &quot;films&quot; &quot;vehicles&quot; &quot;starships&quot; starwars %&gt;% head() ## # A tibble: 6 x 13 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 &lt;NA&gt; ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 &lt;NA&gt; ## 4 Dart… 202 136 none white yellow 41.9 male ## 5 Leia… 150 49 brown light brown 19 female ## 6 Owen… 178 120 brown, gr… light blue 52 male ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; starwars %&gt;% mosaic::favstats(mass~gender, data = .) ## gender min Q1 median Q3 max mean sd n ## 1 female 45 49.25 52.5 55.90 75 54.02000 8.37215 10 ## 2 hermaphrodite 1358 1358.00 1358.0 1358.00 1358 1358.00000 NA 1 ## 3 male 15 76.50 80.0 87.25 159 81.00455 28.22371 44 ## 4 none 140 140.00 140.0 140.00 140 140.00000 NA 1 ## missing ## 1 9 ## 2 0 ## 3 18 ## 4 1 starwars %&gt;% dplyr::filter(species == &quot;Droid&quot;) ## # A tibble: 5 x 13 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 &lt;NA&gt; ## 2 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 &lt;NA&gt; ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA &lt;NA&gt; ## 4 IG-88 200 140 none metal red 15 none ## 5 BB8 NA NA none none black NA none ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; starwars %&gt;% dplyr::filter(species != &quot;Droid&quot;) %&gt;% mosaic::favstats(mass~gender, data = .) ## gender min Q1 median Q3 max mean sd n ## 1 female 45 50.0 55 56.20 75 54.68889 8.591921 9 ## 2 hermaphrodite 1358 1358.0 1358 1358.00 1358 1358.00000 NA 1 ## 3 male 15 76.5 80 87.25 159 81.00455 28.223707 44 ## missing ## 1 7 ## 2 0 ## 3 16 starwars %&gt;% dplyr::select(name, ends_with(&quot;color&quot;)) ## # A tibble: 87 x 4 ## name hair_color skin_color eye_color ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywalker blond fair blue ## 2 C-3PO &lt;NA&gt; gold yellow ## 3 R2-D2 &lt;NA&gt; white, blue red ## 4 Darth Vader none white yellow ## 5 Leia Organa brown light brown ## 6 Owen Lars brown, grey light blue ## 7 Beru Whitesun lars brown light blue ## 8 R5-D4 &lt;NA&gt; white, red red ## 9 Biggs Darklighter black light brown ## 10 Obi-Wan Kenobi auburn, white fair blue-gray ## # … with 77 more rows starwars %&gt;% dplyr::mutate(name, bmi = mass / ((height / 100) ^ 2)) %&gt;% dplyr::select(name:mass, bmi) ## # A tibble: 87 x 4 ## name height mass bmi ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 26.0 ## 2 C-3PO 167 75 26.9 ## 3 R2-D2 96 32 34.7 ## 4 Darth Vader 202 136 33.3 ## 5 Leia Organa 150 49 21.8 ## 6 Owen Lars 178 120 37.9 ## 7 Beru Whitesun lars 165 75 27.5 ## 8 R5-D4 97 32 34.0 ## 9 Biggs Darklighter 183 84 25.1 ## 10 Obi-Wan Kenobi 182 77 23.2 ## # … with 77 more rows starwars %&gt;% dplyr::arrange(desc(mass)) ## # A tibble: 87 x 13 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Jabb… 175 1358 &lt;NA&gt; green-tan… orange 600 herma… ## 2 Grie… 216 159 none brown, wh… green, y… NA male ## 3 IG-88 200 140 none metal red 15 none ## 4 Dart… 202 136 none white yellow 41.9 male ## 5 Tarf… 234 136 brown brown blue NA male ## 6 Owen… 178 120 brown, gr… light blue 52 male ## 7 Bossk 190 113 none green red 53 male ## 8 Chew… 228 112 brown unknown blue 200 male ## 9 Jek … 180 110 brown fair blue NA male ## 10 Dext… 198 102 none brown yellow NA male ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; starwars %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarize( num = n(), mass = mean(mass, na.rm = TRUE) ) %&gt;% dplyr::filter(num &gt; 1) ## # A tibble: 9 x 3 ## species num mass ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Droid 5 69.8 ## 2 Gungan 3 74 ## 3 Human 35 82.8 ## 4 Kaminoan 2 88 ## 5 Mirialan 2 53.1 ## 6 Twi&#39;lek 2 55 ## 7 Wookiee 2 124 ## 8 Zabrak 2 80 ## 9 &lt;NA&gt; 5 48 2.2.3.2 NHANES require(NHANES) names(NHANES) ## [1] &quot;ID&quot; &quot;SurveyYr&quot; &quot;Gender&quot; ## [4] &quot;Age&quot; &quot;AgeDecade&quot; &quot;AgeMonths&quot; ## [7] &quot;Race1&quot; &quot;Race3&quot; &quot;Education&quot; ## [10] &quot;MaritalStatus&quot; &quot;HHIncome&quot; &quot;HHIncomeMid&quot; ## [13] &quot;Poverty&quot; &quot;HomeRooms&quot; &quot;HomeOwn&quot; ## [16] &quot;Work&quot; &quot;Weight&quot; &quot;Length&quot; ## [19] &quot;HeadCirc&quot; &quot;Height&quot; &quot;BMI&quot; ## [22] &quot;BMICatUnder20yrs&quot; &quot;BMI_WHO&quot; &quot;Pulse&quot; ## [25] &quot;BPSysAve&quot; &quot;BPDiaAve&quot; &quot;BPSys1&quot; ## [28] &quot;BPDia1&quot; &quot;BPSys2&quot; &quot;BPDia2&quot; ## [31] &quot;BPSys3&quot; &quot;BPDia3&quot; &quot;Testosterone&quot; ## [34] &quot;DirectChol&quot; &quot;TotChol&quot; &quot;UrineVol1&quot; ## [37] &quot;UrineFlow1&quot; &quot;UrineVol2&quot; &quot;UrineFlow2&quot; ## [40] &quot;Diabetes&quot; &quot;DiabetesAge&quot; &quot;HealthGen&quot; ## [43] &quot;DaysPhysHlthBad&quot; &quot;DaysMentHlthBad&quot; &quot;LittleInterest&quot; ## [46] &quot;Depressed&quot; &quot;nPregnancies&quot; &quot;nBabies&quot; ## [49] &quot;Age1stBaby&quot; &quot;SleepHrsNight&quot; &quot;SleepTrouble&quot; ## [52] &quot;PhysActive&quot; &quot;PhysActiveDays&quot; &quot;TVHrsDay&quot; ## [55] &quot;CompHrsDay&quot; &quot;TVHrsDayChild&quot; &quot;CompHrsDayChild&quot; ## [58] &quot;Alcohol12PlusYr&quot; &quot;AlcoholDay&quot; &quot;AlcoholYear&quot; ## [61] &quot;SmokeNow&quot; &quot;Smoke100&quot; &quot;Smoke100n&quot; ## [64] &quot;SmokeAge&quot; &quot;Marijuana&quot; &quot;AgeFirstMarij&quot; ## [67] &quot;RegularMarij&quot; &quot;AgeRegMarij&quot; &quot;HardDrugs&quot; ## [70] &quot;SexEver&quot; &quot;SexAge&quot; &quot;SexNumPartnLife&quot; ## [73] &quot;SexNumPartYear&quot; &quot;SameSex&quot; &quot;SexOrientation&quot; ## [76] &quot;PregnantNow&quot; # find the sleep variables NHANESsleep &lt;- NHANES %&gt;% select(Gender, Age, Weight, Race1, Race3, Education, SleepTrouble, SleepHrsNight, TVHrsDay, TVHrsDayChild, PhysActive) names(NHANESsleep) ## [1] &quot;Gender&quot; &quot;Age&quot; &quot;Weight&quot; &quot;Race1&quot; ## [5] &quot;Race3&quot; &quot;Education&quot; &quot;SleepTrouble&quot; &quot;SleepHrsNight&quot; ## [9] &quot;TVHrsDay&quot; &quot;TVHrsDayChild&quot; &quot;PhysActive&quot; dim(NHANESsleep) ## [1] 10000 11 # subset for college students NHANESsleep &lt;- NHANESsleep %&gt;% filter(Age %in% c(18:22)) %&gt;% mutate(Weightlb = Weight*2.2) names(NHANESsleep) ## [1] &quot;Gender&quot; &quot;Age&quot; &quot;Weight&quot; &quot;Race1&quot; ## [5] &quot;Race3&quot; &quot;Education&quot; &quot;SleepTrouble&quot; &quot;SleepHrsNight&quot; ## [9] &quot;TVHrsDay&quot; &quot;TVHrsDayChild&quot; &quot;PhysActive&quot; &quot;Weightlb&quot; dim(NHANESsleep) ## [1] 655 12 NHANESsleep %&gt;% ggplot(aes(x=Age, y=SleepHrsNight, color=Gender)) + geom_point(position=position_jitter(width=.25, height=0) ) + facet_grid(SleepTrouble ~ TVHrsDay) 2.2.4 summarize and group_by # number of people (cases) in NHANES NHANES %&gt;% summarize(n()) ## # A tibble: 1 x 1 ## `n()` ## &lt;int&gt; ## 1 10000 # total weight of all the people in NHANES (silly) NHANES %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(sum(Weightlb, na.rm=TRUE)) ## # A tibble: 1 x 1 ## `sum(Weightlb, na.rm = TRUE)` ## &lt;dbl&gt; ## 1 1549419. # mean weight of all the people in NHANES NHANES %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 1 x 1 ## `mean(Weightlb, na.rm = TRUE)` ## &lt;dbl&gt; ## 1 156. # repeat the above but for groups # males versus females NHANES %&gt;% group_by(Gender) %&gt;% summarize(n()) ## # A tibble: 2 x 2 ## Gender `n()` ## &lt;fct&gt; &lt;int&gt; ## 1 female 5020 ## 2 male 4980 NHANES %&gt;% group_by(Gender) %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 2 x 2 ## Gender `mean(Weightlb, na.rm = TRUE)` ## &lt;fct&gt; &lt;dbl&gt; ## 1 female 146. ## 2 male 167. # smokers and non-smokers NHANES %&gt;% group_by(SmokeNow) %&gt;% summarize(n()) ## # A tibble: 3 x 2 ## SmokeNow `n()` ## &lt;fct&gt; &lt;int&gt; ## 1 No 1745 ## 2 Yes 1466 ## 3 &lt;NA&gt; 6789 NHANES %&gt;% group_by(SmokeNow) %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 3 x 2 ## SmokeNow `mean(Weightlb, na.rm = TRUE)` ## &lt;fct&gt; &lt;dbl&gt; ## 1 No 186. ## 2 Yes 177. ## 3 &lt;NA&gt; 144. # people with and without diabetes NHANES %&gt;% group_by(Diabetes) %&gt;% summarize(n()) ## # A tibble: 3 x 2 ## Diabetes `n()` ## &lt;fct&gt; &lt;int&gt; ## 1 No 9098 ## 2 Yes 760 ## 3 &lt;NA&gt; 142 NHANES %&gt;% group_by(Diabetes) %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 3 x 2 ## Diabetes `mean(Weightlb, na.rm = TRUE)` ## &lt;fct&gt; &lt;dbl&gt; ## 1 No 155. ## 2 Yes 202. ## 3 &lt;NA&gt; 21.6 # break down the smokers versus non-smokers further, by sex NHANES %&gt;% group_by(SmokeNow, Gender) %&gt;% summarize(n()) ## # A tibble: 6 x 3 ## # Groups: SmokeNow [3] ## SmokeNow Gender `n()` ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 No female 764 ## 2 No male 981 ## 3 Yes female 638 ## 4 Yes male 828 ## 5 &lt;NA&gt; female 3618 ## 6 &lt;NA&gt; male 3171 NHANES %&gt;% group_by(SmokeNow, Gender) %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 6 x 3 ## # Groups: SmokeNow [3] ## SmokeNow Gender `mean(Weightlb, na.rm = TRUE)` ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 No female 167. ## 2 No male 201. ## 3 Yes female 167. ## 4 Yes male 185. ## 5 &lt;NA&gt; female 138. ## 6 &lt;NA&gt; male 151. # break down the people with diabetes further, by smoking NHANES %&gt;% group_by(Diabetes, SmokeNow) %&gt;% summarize(n()) ## # A tibble: 8 x 3 ## # Groups: Diabetes [3] ## Diabetes SmokeNow `n()` ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 No No 1476 ## 2 No Yes 1360 ## 3 No &lt;NA&gt; 6262 ## 4 Yes No 267 ## 5 Yes Yes 106 ## 6 Yes &lt;NA&gt; 387 ## 7 &lt;NA&gt; No 2 ## 8 &lt;NA&gt; &lt;NA&gt; 140 NHANES %&gt;% group_by(Diabetes, SmokeNow) %&gt;% mutate(Weightlb = Weight*2.2) %&gt;% summarize(mean(Weightlb, na.rm=TRUE)) ## # A tibble: 8 x 3 ## # Groups: Diabetes [3] ## Diabetes SmokeNow `mean(Weightlb, na.rm = TRUE)` ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 No No 183. ## 2 No Yes 175. ## 3 No &lt;NA&gt; 143. ## 4 Yes No 204. ## 5 Yes Yes 204. ## 6 Yes &lt;NA&gt; 199. ## 7 &lt;NA&gt; No 193. ## 8 &lt;NA&gt; &lt;NA&gt; 19.1 2.2.5 babynames babynames %&gt;% group_by(sex) %&gt;% summarize(total=sum(n)) ## # A tibble: 2 x 2 ## sex total ## &lt;chr&gt; &lt;int&gt; ## 1 F 172371079 ## 2 M 175749438 babynames %&gt;% group_by(year, sex) %&gt;% summarize(name_count = n_distinct(name)) %&gt;% head() ## # A tibble: 6 x 3 ## # Groups: year [3] ## year sex name_count ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 1880 F 942 ## 2 1880 M 1058 ## 3 1881 F 938 ## 4 1881 M 997 ## 5 1882 F 1028 ## 6 1882 M 1099 babynames %&gt;% group_by(year, sex) %&gt;% summarize(name_count = n_distinct(name)) %&gt;% tail() ## # A tibble: 6 x 3 ## # Groups: year [3] ## year sex name_count ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 2015 F 19074 ## 2 2015 M 14024 ## 3 2016 F 18817 ## 4 2016 M 14162 ## 5 2017 F 18309 ## 6 2017 M 14160 babysamp &lt;- babynames %&gt;% sample_n(size=50) babysamp %&gt;% select(year) %&gt;% distinct() %&gt;% table() ## . ## 1890 1904 1907 1909 1926 1930 1931 1933 1939 1945 1949 1952 1953 1960 1963 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 1964 1966 1970 1976 1977 1980 1981 1984 1986 1988 1994 1995 1998 1999 2000 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 2001 2002 2005 2006 2008 2009 2012 2013 2014 2016 2017 ## 1 1 1 1 1 1 1 1 1 1 1 babysamp %&gt;% distinct() %&gt;% select(year) %&gt;% table() ## . ## 1890 1904 1907 1909 1926 1930 1931 1933 1939 1945 1949 1952 1953 1960 1963 ## 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 ## 1964 1966 1970 1976 1977 1980 1981 1984 1986 1988 1994 1995 1998 1999 2000 ## 1 1 1 1 2 1 1 1 1 1 1 2 3 1 2 ## 2001 2002 2005 2006 2008 2009 2012 2013 2014 2016 2017 ## 1 1 1 2 1 2 1 1 2 1 1 Frances &lt;- babynames %&gt;% filter(name== &quot;Frances&quot;) %&gt;% group_by(year, sex) %&gt;% summarize(yrTot = sum(n)) Frances %&gt;% ggplot(aes(x=year, y=yrTot)) + geom_point(aes(color=sex)) + geom_vline(xintercept=2006) + scale_y_log10() + ylab(&quot;Yearly total on log10 scale&quot;) 2.3 Higher Level Data Verbs There are more complicated verbs which may be important for more sophisticated analyses. See the RStudio dplyr cheat sheet, https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf}. pivot_longer makes many columns into 2 columns: pivot_longer(data, cols, names_to = , value_to = ) pivot_wider makes one column into multiple columns: pivot_wider(data, names_from = , values_from = ) left_join returns all rows from the left table, and any rows with matching keys from the right table. inner_join returns only the rows in which the left table have matching keys in the right table (i.e., matching rows in both sets). full_join returns all rows from both tables, join records from the left which have matching keys in the right table. Good practice: always specify the by argument when joining data frames. If you ever need to understand which join is the right join for you, try to find an image that will lay out what the function is doing. I found this one that is quite good and is taken from Statistics Globe blog: https://statisticsglobe.com/r-dplyr-join-inner-left-right-full-semi-anti 2.4 R examples, higher level verbs tidyr 1.0.0 has just been released! The new release means that you need to update tidyr. You will know if you have the latest version if the following command works in the console (window below): ?tidyr::pivot_longer If you are familiar with spread and gather, you should acquaint yourself with pivot_longer() and pivot_wider(). The idea is to go from very wide dataframes to very long dataframes and vice versa. 2.4.1 pivot_longer pivot the military pay grade to become longer? https://docs.google.com/spreadsheets/d/1Ow6Cm4z-Z1Yybk3i352msulYCEDOUaOghmo9ALajyHo/edit# gid=1811988794 library(googlesheets4) sheets_deauth() navy_gs = read_sheet(&quot;https://docs.google.com/spreadsheets/d/1Ow6Cm4z-Z1Yybk3i352msulYCEDOUaOghmo9ALajyHo/edit#gid=1877566408&quot;, col_types = &quot;ccnnnnnnnnnnnnnnn&quot;) dplyr::glimpse(navy_gs) ## Observations: 38 ## Variables: 17 ## $ ...1 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ `Active Duty Family` &lt;chr&gt; NA, &quot;Marital Status Report&quot;, NA, &quot;Data Refl… ## $ ...3 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 31229, 5309… ## $ ...4 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 5717, 8388,… ## $ ...5 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 36946, 6148… ## $ ...6 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 563, 1457, … ## $ ...7 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 122, 275, 1… ## $ ...8 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 685, 1732, … ## $ ...9 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 139, 438, 3… ## $ ...10 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 141, 579, 4… ## $ ...11 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 280, 1017, … ## $ ...12 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 5060, 12483… ## $ ...13 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 719, 1682, … ## $ ...14 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 5779, 14165… ## $ ...15 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 36991, 6747… ## $ ...16 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 6699, 10924… ## $ ...17 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 43690, 7839… names(navy_gs) = c(&quot;X&quot;,&quot;pay.grade&quot;, &quot;male.sing.wo&quot;, &quot;female.sing.wo&quot;, &quot;tot.sing.wo&quot;, &quot;male.sing.w&quot;, &quot;female.sing.w&quot;, &quot;tot.sing.w&quot;, &quot;male.joint.NA&quot;, &quot;female.joint.NA&quot;, &quot;tot.joint.NA&quot;, &quot;male.civ.NA&quot;, &quot;female.civ.NA&quot;, &quot;tot.civ.NA&quot;, &quot;male.tot.NA&quot;, &quot;female.tot.NA&quot;, &quot;tot.tot.NA&quot;) navy = navy_gs[-c(1:8), -1] dplyr::glimpse(navy) ## Observations: 30 ## Variables: 16 ## $ pay.grade &lt;chr&gt; &quot;E-1&quot;, &quot;E-2&quot;, &quot;E-3&quot;, &quot;E-4&quot;, &quot;E-5&quot;, &quot;E-6&quot;, &quot;E-7&quot;,… ## $ male.sing.wo &lt;dbl&gt; 31229, 53094, 131091, 112710, 57989, 19125, 5446… ## $ female.sing.wo &lt;dbl&gt; 5717, 8388, 21019, 16381, 11021, 4654, 1913, 438… ## $ tot.sing.wo &lt;dbl&gt; 36946, 61482, 152110, 129091, 69010, 23779, 7359… ## $ male.sing.w &lt;dbl&gt; 563, 1457, 4264, 9491, 10937, 10369, 6530, 1786,… ## $ female.sing.w &lt;dbl&gt; 122, 275, 1920, 4662, 6576, 4962, 2585, 513, 144… ## $ tot.sing.w &lt;dbl&gt; 685, 1732, 6184, 14153, 17513, 15331, 9115, 2299… ## $ male.joint.NA &lt;dbl&gt; 139, 438, 3579, 8661, 12459, 8474, 5065, 1423, 4… ## $ female.joint.NA &lt;dbl&gt; 141, 579, 4902, 9778, 11117, 6961, 3291, 651, 15… ## $ tot.joint.NA &lt;dbl&gt; 280, 1017, 8481, 18439, 23576, 15435, 8356, 2074… ## $ male.civ.NA &lt;dbl&gt; 5060, 12483, 54795, 105556, 130944, 110322, 7000… ## $ female.civ.NA &lt;dbl&gt; 719, 1682, 6641, 9961, 8592, 5827, 3206, 820, 29… ## $ tot.civ.NA &lt;dbl&gt; 5779, 14165, 61436, 115517, 139536, 116149, 7320… ## $ male.tot.NA &lt;dbl&gt; 36991, 67472, 193729, 236418, 212329, 148290, 87… ## $ female.tot.NA &lt;dbl&gt; 6699, 10924, 34482, 40782, 37306, 22404, 10995, … ## $ tot.tot.NA &lt;dbl&gt; 43690, 78396, 228211, 277200, 249635, 170694, 98… # get rid of total columns &amp; rows: navyWR = navy %&gt;% dplyr::select(-contains(&quot;tot&quot;)) %&gt;% dplyr::filter(substr(pay.grade, 1, 5) != &quot;TOTAL&quot; &amp; substr(pay.grade, 1, 5) != &quot;GRAND&quot; ) %&gt;% tidyr::pivot_longer(-pay.grade, values_to = &quot;numPeople&quot;, names_to = &quot;status&quot;) %&gt;% tidyr::separate(status, into = c(&quot;sex&quot;, &quot;marital&quot;, &quot;kids&quot;)) navyWR %&gt;% head() ## # A tibble: 6 x 5 ## pay.grade sex marital kids numPeople ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 E-1 male sing wo 31229 ## 2 E-1 female sing wo 5717 ## 3 E-1 male sing w 563 ## 4 E-1 female sing w 122 ## 5 E-1 male joint NA 139 ## 6 E-1 female joint NA 141 Does a graph tell us if we did it right? what if we had done it wrong…? navyWR %&gt;% ggplot(aes(x=pay.grade, y=numPeople, color=sex)) + geom_point() + facet_grid(kids~marital) 2.4.2 pivot_wider library(babynames) babynames %&gt;% dplyr::select(-prop) %&gt;% tidyr::pivot_wider(names_from = sex, values_from = n) %&gt;% head() ## # A tibble: 6 x 4 ## year name F M ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 1880 Mary 7065 27 ## 2 1880 Anna 2604 12 ## 3 1880 Emma 2003 10 ## 4 1880 Elizabeth 1939 9 ## 5 1880 Minnie 1746 9 ## 6 1880 Margaret 1578 NA babynames %&gt;% dplyr::select(-prop) %&gt;% tidyr::pivot_wider(names_from = sex, values_from = n) %&gt;% dplyr::filter(!is.na(F) &amp; !is.na(M)) %&gt;% arrange(desc(year), desc(M)) ## # A tibble: 168,381 x 4 ## year name F M ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 2017 Liam 36 18728 ## 2 2017 Noah 170 18326 ## 3 2017 William 18 14904 ## 4 2017 James 77 14232 ## 5 2017 Logan 1103 13974 ## 6 2017 Benjamin 8 13733 ## 7 2017 Mason 58 13502 ## 8 2017 Elijah 26 13268 ## 9 2017 Oliver 15 13141 ## 10 2017 Jacob 16 13106 ## # … with 168,371 more rows babynames %&gt;% tidyr::pivot_wider(names_from = sex, values_from = n) %&gt;% dplyr::filter(!is.na(F) &amp; !is.na(M)) %&gt;% arrange(desc(prop)) ## # A tibble: 12 x 5 ## year name prop F M ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 1986 Marquette 0.0000130 24 25 ## 2 1996 Dariel 0.0000115 22 23 ## 3 2014 Laramie 0.0000108 21 22 ## 4 1939 Earnie 0.00000882 10 10 ## 5 1939 Vertis 0.00000882 10 10 ## 6 1921 Vernis 0.00000703 9 8 ## 7 1939 Alvia 0.00000529 6 6 ## 8 1939 Eudell 0.00000529 6 6 ## 9 1939 Ladell 0.00000529 6 6 ## 10 1939 Lory 0.00000529 6 6 ## 11 1939 Maitland 0.00000529 6 6 ## 12 1939 Delaney 0.00000441 5 5 2.4.3 join (use join to merge two datasets) 2.4.3.1 First get the data (GapMinder) Both of the following datasets come from GapMinder. The first represents country, year, and female literacy rate. The second represents country, year, and GDP (in fixed 2000 US$). sheets_deauth() litF = read_sheet(&quot;https://docs.google.com/spreadsheets/d/1hDinTIRHQIaZg1RUn6Z_6mo12PtKwEPFIz_mJVF6P5I/pub?gid=0&quot;) litF = litF %&gt;% dplyr::select(country=starts_with(&quot;Adult&quot;), starts_with(&quot;1&quot;), starts_with(&quot;2&quot;)) %&gt;% tidyr::pivot_longer(-country, names_to = &quot;year&quot;, values_to = &quot;litRateF&quot;) %&gt;% dplyr::filter(!is.na(litRateF)) sheets_deauth() GDP = read_sheet(&quot;https://docs.google.com/spreadsheets/d/1RctTQmKB0hzbm1E8rGcufYdMshRdhmYdeL29nXqmvsc/pub?gid=0&quot;) GDP = GDP %&gt;% dplyr::select(country = starts_with(&quot;Income&quot;), starts_with(&quot;1&quot;), starts_with(&quot;2&quot;)) %&gt;% tidyr::pivot_longer(-country, names_to = &quot;year&quot;, values_to = &quot;gdp&quot;) %&gt;% dplyr::filter(!is.na(gdp)) head(litF) ## # A tibble: 6 x 3 ## country year litRateF ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan 1979 4.99 ## 2 Afghanistan 2011 13 ## 3 Albania 2001 98.3 ## 4 Albania 2008 94.7 ## 5 Albania 2011 95.7 ## 6 Algeria 1987 35.8 head(GDP) ## # A tibble: 6 x 3 ## country year gdp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Albania 1980 1061. ## 2 Albania 1981 1100. ## 3 Albania 1982 1111. ## 4 Albania 1983 1101. ## 5 Albania 1984 1065. ## 6 Albania 1985 1060. # left litGDPleft = dplyr::left_join(litF, GDP, by=c(&quot;country&quot;, &quot;year&quot;)) dim(litGDPleft) ## [1] 571 4 sum(is.na(litGDPleft$gdp)) ## [1] 66 head(litGDPleft) ## # A tibble: 6 x 4 ## country year litRateF gdp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 1979 4.99 NA ## 2 Afghanistan 2011 13 NA ## 3 Albania 2001 98.3 1282. ## 4 Albania 2008 94.7 1804. ## 5 Albania 2011 95.7 1966. ## 6 Algeria 1987 35.8 1902. # right litGDPright = dplyr::right_join(litF, GDP, by=c(&quot;country&quot;, &quot;year&quot;)) dim(litGDPright) ## [1] 7988 4 sum(is.na(litGDPright$gdp)) ## [1] 0 head(litGDPright) ## # A tibble: 6 x 4 ## country year litRateF gdp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Albania 1980 NA 1061. ## 2 Albania 1981 NA 1100. ## 3 Albania 1982 NA 1111. ## 4 Albania 1983 NA 1101. ## 5 Albania 1984 NA 1065. ## 6 Albania 1985 NA 1060. # inner litGDPinner = dplyr::inner_join(litF, GDP, by=c(&quot;country&quot;, &quot;year&quot;)) dim(litGDPinner) ## [1] 505 4 sum(is.na(litGDPinner$gdp)) ## [1] 0 head(litGDPinner) ## # A tibble: 6 x 4 ## country year litRateF gdp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Albania 2001 98.3 1282. ## 2 Albania 2008 94.7 1804. ## 3 Albania 2011 95.7 1966. ## 4 Algeria 1987 35.8 1902. ## 5 Algeria 2002 60.1 1872. ## 6 Algeria 2006 63.9 2125. # full litGDPfull = dplyr::full_join(litF, GDP, by=c(&quot;country&quot;, &quot;year&quot;)) dim(litGDPfull) ## [1] 8054 4 sum(is.na(litGDPfull$gdp)) ## [1] 66 head(litGDPfull) ## # A tibble: 6 x 4 ## country year litRateF gdp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 1979 4.99 NA ## 2 Afghanistan 2011 13 NA ## 3 Albania 2001 98.3 1282. ## 4 Albania 2008 94.7 1804. ## 5 Albania 2011 95.7 1966. ## 6 Algeria 1987 35.8 1902. 2.4.4 lubridate lubridate is a another R package meant for data wrangling (Grolemund and Wickham 2011). In particular, lubridate makes it very easy to work with days, times, and dates. The base idea is to start with dates in a ymd (year month day) format and transform the information into whatever you want. The linked table is from the original paper and provides many of the basic lubridate commands: http://blog.yhathq.com/static/pdf/R_date_cheat_sheet.pdf}. Example from https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html 2.4.4.1 If anyone drove a time machine, they would crash The length of months and years change so often that doing arithmetic with them can be unintuitive. Consider a simple operation, January 31st + one month. Should the answer be: February 31st (which doesn’t exist) March 4th (31 days after January 31), or February 28th (assuming its not a leap year) A basic property of arithmetic is that a + b - b = a. Only solution 1 obeys the mathematical property, but it is an invalid date. Wickham wants to make lubridate as consistent as possible by invoking the following rule: if adding or subtracting a month or a year creates an invalid date, lubridate will return an NA. If you thought solution 2 or 3 was more useful, no problem. You can still get those results with clever arithmetic, or by using the special %m+% and %m-% operators. %m+% and %m-% automatically roll dates back to the last day of the month, should that be necessary. 2.4.4.2 R examples, lubridate Some basics in lubridate require(lubridate) rightnow &lt;- now() day(rightnow) ## [1] 16 week(rightnow) ## [1] 3 month(rightnow, label=FALSE) ## [1] 1 month(rightnow, label=TRUE) ## [1] Jan ## 12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec year(rightnow) ## [1] 2020 minute(rightnow) ## [1] 34 hour(rightnow) ## [1] 9 yday(rightnow) ## [1] 16 mday(rightnow) ## [1] 16 wday(rightnow, label=FALSE) ## [1] 5 wday(rightnow, label=TRUE) ## [1] Thu ## Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat But how do I create a date object? jan31 &lt;- ymd(&quot;2013-01-31&quot;) jan31 + months(0:11) ## [1] &quot;2013-01-31&quot; NA &quot;2013-03-31&quot; NA &quot;2013-05-31&quot; ## [6] NA &quot;2013-07-31&quot; &quot;2013-08-31&quot; NA &quot;2013-10-31&quot; ## [11] NA &quot;2013-12-31&quot; floor_date(jan31, &quot;month&quot;) + months(0:11) + days(31) ## [1] &quot;2013-02-01&quot; &quot;2013-03-04&quot; &quot;2013-04-01&quot; &quot;2013-05-02&quot; &quot;2013-06-01&quot; ## [6] &quot;2013-07-02&quot; &quot;2013-08-01&quot; &quot;2013-09-01&quot; &quot;2013-10-02&quot; &quot;2013-11-01&quot; ## [11] &quot;2013-12-02&quot; &quot;2014-01-01&quot; jan31 + months(0:11) + days(31) ## [1] &quot;2013-03-03&quot; NA &quot;2013-05-01&quot; NA &quot;2013-07-01&quot; ## [6] NA &quot;2013-08-31&quot; &quot;2013-10-01&quot; NA &quot;2013-12-01&quot; ## [11] NA &quot;2014-01-31&quot; jan31 %m+% months(0:11) ## [1] &quot;2013-01-31&quot; &quot;2013-02-28&quot; &quot;2013-03-31&quot; &quot;2013-04-30&quot; &quot;2013-05-31&quot; ## [6] &quot;2013-06-30&quot; &quot;2013-07-31&quot; &quot;2013-08-31&quot; &quot;2013-09-30&quot; &quot;2013-10-31&quot; ## [11] &quot;2013-11-30&quot; &quot;2013-12-31&quot; NYC flights library(nycflights13) names(flights) ## [1] &quot;year&quot; &quot;month&quot; &quot;day&quot; &quot;dep_time&quot; ## [5] &quot;sched_dep_time&quot; &quot;dep_delay&quot; &quot;arr_time&quot; &quot;sched_arr_time&quot; ## [9] &quot;arr_delay&quot; &quot;carrier&quot; &quot;flight&quot; &quot;tailnum&quot; ## [13] &quot;origin&quot; &quot;dest&quot; &quot;air_time&quot; &quot;distance&quot; ## [17] &quot;hour&quot; &quot;minute&quot; &quot;time_hour&quot; flightsWK &lt;- flights %&gt;% mutate(ymdday = ymd(paste(year, month,day, sep=&quot;-&quot;))) %&gt;% mutate(weekdy = wday(ymdday, label=TRUE), whichweek = week(ymdday)) head(flightsWK) ## # A tibble: 6 x 22 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## # … with 15 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt;, ymdday &lt;date&gt;, weekdy &lt;ord&gt;, whichweek &lt;dbl&gt; flightsWK &lt;- flights %&gt;% mutate(ymdday = ymd(paste(year,&quot;-&quot;, month,&quot;-&quot;,day))) %&gt;% mutate(weekdy = wday(ymdday, label=TRUE), whichweek = week(ymdday)) flightsWK %&gt;% select(year, month, day, ymdday, weekdy, whichweek, dep_time, arr_time, air_time) %&gt;% head() ## # A tibble: 6 x 9 ## year month day ymdday weekdy whichweek dep_time arr_time air_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt; &lt;ord&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 2013-01-01 Tue 1 517 830 227 ## 2 2013 1 1 2013-01-01 Tue 1 533 850 227 ## 3 2013 1 1 2013-01-01 Tue 1 542 923 160 ## 4 2013 1 1 2013-01-01 Tue 1 544 1004 183 ## 5 2013 1 1 2013-01-01 Tue 1 554 812 116 ## 6 2013 1 1 2013-01-01 Tue 1 554 740 150 References "],
["visualization.html", "Chapter 3 Visualization 3.1 Deconstructing a graph", " Chapter 3 Visualization Data visualization is integral to understanding both data and models. Computational statistics and data science sometimes focus on models or resulting predictions from the models. But there is no doubt that the structure and format of the data are the key to whether or not a model is appropriate or good. A good data analyst will always spend a lot of time and effort on exploratory data analysis, much of which includes making as many visualizations of the data as possible. 3.1 Deconstructing a graph 3.1.1 The Grammar of Graphics (gg) Yau (2013) and Wickham (2014) have come up with a taxonomy and a grammar for thinking about the parts of a figure just like we conceptualize the parts of a body or the parts of a sentence. One great way of thinking of the new process: it is not longer necessary to talk about the name of the graph (e.g., boxplot). Instead we now think in glyphs (geoms), and so we can put whatever we want on the plot. Note also that the transition leads you from a passive consumer (I need to make plot XXX because everyone else does, so I just plug in the data) into an active participant (what do I want my data to say? and how can I put that information onto my graphic?) The most important questions you can ask with respect to creating figures are: What do we want R to do? (What is the goal?) What does R need to know? 3.1.1.1 The grammar of graphics in ggplot2 geom: the geometric “shape” used to display data bar, point, line, ribbon, text, etc. aesthetic: an attribute controlling how geom is displayed with respect to variables x position, y position, color, fill, shape, size, etc. scale: adjust information in the aesthetic to map onto the plot particular assignment of colors, shapes, sizes, etc.; making axes continuous or constrained to a particular range of values. guide: helps user convert visual data back into raw data (legends, axes) stat: a transformation applied to data before geom gets it example: histograms work on binned data 3.1.2 ggplot2 Important note! While dplyr chains functions using %&gt;% ggplot chains functions using + In ggplot2, an aesthetic refers to a mapping between a variable and the information it conveys on the plot. Further information about plotting and visualizing information is given in chapter 2 (Data visualization) of Baumer, Kaplan, and Horton (2017). Much of the data in the presentation represents all births from 1978 in the US: the date, the day of the year, and the number of births. Goals What I will try to do give a tour of ggplot2 explain how to think about plots the ggplot2 way prepare/encourage you to learn more later What I can’t do in one session show every bell and whistle make you an expert at using ggplot2 Getting help One of the best ways to get started with ggplot is to google what you want to do with the word ggplot. Then look through the images that come up. More often than not, the associated code is there. There are also ggplot galleries of images, one of them is here: https://plot.ly/ggplot2/ ggplot2 cheat sheet: https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf Look at the end of the presentation. More help options there. require(mosaic) require(lubridate) # package for working with dates data(Births78) # restore fresh version of Births78 head(Births78, 3) ## date births wday year month day_of_year day_of_month day_of_week ## 1 1978-01-01 7701 Sun 1978 1 1 1 1 ## 2 1978-01-02 7527 Mon 1978 1 2 2 2 ## 3 1978-01-03 8825 Tue 1978 1 3 3 3 How can we make the plot? Two Questions: What do we want R to do? (What is the goal?) What does R need to know? data source: Births78 aesthetics: date -&gt; x births -&gt; y points (!) Goal: scatterplot = a plot with points ggplot() + geom_point() What does R need to know? data source: data = Births78 aesthetics: aes(x = date, y = births) How can we make the plot? What has changed? new aesthetic: mapping color to day of week Adding day of week to the data set The wday() function in the lubridate package computes the day of the week from a date. Births78 &lt;- Births78 %&gt;% mutate(wday = lubridate::wday(date, label=TRUE)) ggplot(data=Births78) + geom_point(aes(x=date, y=births, color=wday))+ ggtitle(&quot;US Births in 1978&quot;) How can we make the plot? Now we use lines instead of dots ggplot(data=Births78) + geom_line(aes(x=date, y=births, color=wday)) + ggtitle(&quot;US Births in 1978&quot;) How can we make the plot? Now we have two layers, one with points and one with lines ggplot(data=Births78, aes(x=date, y=births, color=wday)) + geom_point() + geom_line()+ ggtitle(&quot;US Births in 1978&quot;) The layers are placed one on top of the other: the points are below and the lines are above. data and aes specified in ggplot() affect all geoms Alternative Syntax Births78 %&gt;% ggplot(aes(x=date, y=births, color=wday)) + geom_point() + geom_line()+ ggtitle(&quot;US Births in 1978&quot;) What does adding the color argument do? Births78 %&gt;% ggplot(aes(x=date, y=births, color=&quot;navy&quot;)) + geom_point() + ggtitle(&quot;US Births in 1978&quot;) Because there is no variable, we have mapped the color aesthetic to a new variable with only one value (“navy”). So all the dots get set to the same color, but it’s not navy. Setting vs. Mapping If we want to set the color to be navy for all of the dots, we do it outside the aesthetic, without a dataset variable: Births78 %&gt;% ggplot(aes(x=date, y=births)) + # map x &amp; y geom_point(color = &quot;navy&quot;) + # set color ggtitle(&quot;US Births in 1978&quot;) Note that color = &quot;navy&quot; is now outside of the aesthetics list. That’s how ggplot2 distinguishes between mapping and setting. How can we make the plot? Births78 %&gt;% ggplot(aes(x=date, y=births)) + geom_line(aes(color=wday)) + # map color here geom_point(color=&quot;navy&quot;) + # set color here ggtitle(&quot;US Births in 1978&quot;) ggplot() establishes the default data and aesthetics for the geoms, but each geom may change the defaults. good practice: put into ggplot() the things that affect all (or most) of the layers; rest in geom_blah() Setting vs. Mapping (again) Information gets passed to the plot via: map the variable information inside the aes (aesthetic) command set the non-variable information outside the aes (aesthetic) command Other geoms apropos(&quot;^geom_&quot;) [1] &quot;geom_abline&quot; &quot;geom_area&quot; &quot;geom_ash&quot; [4] &quot;geom_bar&quot; &quot;geom_barh&quot; &quot;geom_bin2d&quot; [7] &quot;geom_blank&quot; &quot;geom_boxplot&quot; &quot;geom_boxploth&quot; [10] &quot;geom_col&quot; &quot;geom_colh&quot; &quot;geom_contour&quot; [13] &quot;geom_count&quot; &quot;geom_crossbar&quot; &quot;geom_crossbarh&quot; [16] &quot;geom_curve&quot; &quot;geom_density&quot; &quot;geom_density_2d&quot; [19] &quot;geom_density2d&quot; &quot;geom_dotplot&quot; &quot;geom_errorbar&quot; [22] &quot;geom_errorbarh&quot; &quot;geom_errorbarh&quot; &quot;geom_freqpoly&quot; [25] &quot;geom_hex&quot; &quot;geom_histogram&quot; &quot;geom_histogramh&quot; [28] &quot;geom_hline&quot; &quot;geom_jitter&quot; &quot;geom_label&quot; [31] &quot;geom_line&quot; &quot;geom_linerange&quot; &quot;geom_linerangeh&quot; [34] &quot;geom_lm&quot; &quot;geom_map&quot; &quot;geom_path&quot; [37] &quot;geom_point&quot; &quot;geom_pointrange&quot; &quot;geom_pointrangeh&quot; [40] &quot;geom_polygon&quot; &quot;geom_qq&quot; &quot;geom_qq_line&quot; [43] &quot;geom_quantile&quot; &quot;geom_raster&quot; &quot;geom_rect&quot; [46] &quot;geom_ribbon&quot; &quot;geom_rug&quot; &quot;geom_segment&quot; [49] &quot;geom_sf&quot; &quot;geom_sf_label&quot; &quot;geom_sf_text&quot; [52] &quot;geom_smooth&quot; &quot;geom_spline&quot; &quot;geom_spoke&quot; [55] &quot;geom_step&quot; &quot;geom_text&quot; &quot;geom_tile&quot; [58] &quot;geom_violin&quot; &quot;geom_violinh&quot; &quot;geom_vline&quot; help pages will tell you their aesthetics, default stats, etc. ?geom_area # for example Let’s try geom_area Births78 %&gt;% ggplot(aes(x=date, y=births, fill=wday)) + geom_area()+ ggtitle(&quot;US Births in 1978&quot;) Using area does not produce a good plot over plotting is hiding much of the data extending y-axis to 0 may or may not be desirable. Side note: what makes a plot good? Most (all?) graphics are intended to help us make comparisons How does something change over time? Do my treatments matter? How much? Do men and women respond the same way? Key plot metric: Does my plot make the comparisons I am interested in easily, and accurately? Time for some different data HELPrct: Health Evaluation and Linkage to Primary care randomized clinical trial head(HELPrct) ## age anysubstatus anysub cesd d1 daysanysub dayslink drugrisk e2b female ## 1 37 1 yes 49 3 177 225 0 NA 0 ## 2 37 1 yes 30 22 2 NA 0 NA 0 ## 3 26 1 yes 39 0 3 365 20 NA 0 ## 4 39 1 yes 15 2 189 343 0 1 1 ## 5 32 1 yes 39 12 2 57 0 1 0 ## 6 47 1 yes 6 1 31 365 0 NA 1 ## sex g1b homeless i1 i2 id indtot linkstatus link mcs pcs ## 1 male yes housed 13 26 1 39 1 yes 25.111990 58.41369 ## 2 male yes homeless 56 62 2 43 NA &lt;NA&gt; 26.670307 36.03694 ## 3 male no housed 0 0 3 41 0 no 6.762923 74.80633 ## 4 female no housed 5 5 4 28 0 no 43.967880 61.93168 ## 5 male no homeless 10 13 5 38 1 yes 21.675755 37.34558 ## 6 female no housed 4 4 6 29 0 no 55.508991 46.47521 ## pss_fr racegrp satreat sexrisk substance treat avg_drinks max_drinks ## 1 0 black no 4 cocaine yes 13 26 ## 2 1 white no 7 alcohol yes 56 62 ## 3 13 black no 2 heroin no 0 0 ## 4 11 white yes 4 heroin no 5 5 ## 5 10 black no 6 cocaine no 10 13 ## 6 5 black no 5 cocaine yes 4 4 Subjects admitted for treatment for addiction to one of three substances. Who are the people in the study? HELPrct %&gt;% ggplot(aes(x=substance)) + geom_bar()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Hmm. What’s up with y? stat_bin() is being applied to the data before the geom_bar() gets to do its thing. Binning creates the y values. Who are the people in the study? HELPrct %&gt;% ggplot(aes(x=substance, fill=sex)) + geom_bar()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Who are the people in the study? library(scales) HELPrct %&gt;% ggplot(aes(x=substance, fill=sex)) + geom_bar() + scale_y_continuous(labels = percent)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Who are the people in the study? HELPrct %&gt;% ggplot(aes(x=substance, fill=sex)) + geom_bar(position=&quot;fill&quot;) + scale_y_continuous(&quot;actually, percent&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) How old are people in the HELP study? HELPrct %&gt;% ggplot(aes(x=age)) + geom_histogram()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Notice the messages stat_bin: Histograms are not mapping the raw data but binned data. stat_bin() performs the data transformation. binwidth: a default binwidth has been selected, but we should really choose our own. Setting the binwidth manually HELPrct %&gt;% ggplot(aes(x=age)) + geom_histogram(binwidth=2)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) How old are people in the HELP study? – Other geoms HELPrct %&gt;% ggplot(aes(x=age)) + geom_freqpoly(binwidth=2)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=age)) + geom_density()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Selecting stat and geom manually Every geom comes with a default stat for simple cases, the stat is stat_identity() which does nothing we can mix and match geoms and stats however we like HELPrct %&gt;% ggplot(aes(x=age)) + geom_line(stat=&quot;density&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Selecting stat and geom manually Every stat comes with a default geom, every geom with a default stat we can specify stats instead of geom, if we prefer we can mix and match geoms and stats however we like HELPrct %&gt;% ggplot(aes(x=age)) + stat_density( geom=&quot;line&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) More combinations HELPrct %&gt;% ggplot(aes(x=age)) + geom_point(stat=&quot;bin&quot;, binwidth=3) + geom_line(stat=&quot;bin&quot;, binwidth=3) + ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=age)) + geom_area(stat=&quot;bin&quot;, binwidth=3) + ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=age)) + geom_point(stat=&quot;bin&quot;, binwidth=3, aes(size=..count..)) + geom_line(stat=&quot;bin&quot;, binwidth=3) + ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) How much do they drink? (i1) HELPrct %&gt;% ggplot(aes(x=i1)) + geom_histogram()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=i1)) + geom_density()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=i1)) + geom_area(stat=&quot;density&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Covariates: Adding in more variables Using color and linetype: HELPrct %&gt;% ggplot(aes(x=i1, color=substance, linetype=sex)) + geom_line(stat=&quot;density&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Using color and facets HELPrct %&gt;% ggplot(aes(x=i1, color=substance)) + geom_line(stat=&quot;density&quot;) + facet_grid( . ~ sex )+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) HELPrct %&gt;% ggplot(aes(x=i1, color=substance)) + geom_line(stat=&quot;density&quot;) + facet_grid( sex ~ . )+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Boxplots Boxplots use stat_quantile() which computes a five-number summary (roughly the five quartiles of the data) and uses them to define a “box” and “whiskers”. The quantitative variable must be y, and there must be an additional x variable. HELPrct %&gt;% ggplot(aes(x=substance, y=age, color=sex)) + geom_boxplot()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Horizontal boxplots Horizontal boxplots are obtained by flipping the coordinate system: HELPrct %&gt;% ggplot(aes(x=substance, y=age, color=sex)) + geom_boxplot() + coord_flip()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) coord_flip() may be used with other plots as well to reverse the roles of x and y on the plot. Axes scaling with boxplots We can scale the continuous axis HELPrct %&gt;% ggplot(aes(x=substance, y=age, color=sex)) + geom_boxplot() + coord_trans(y=&quot;log&quot;)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Give me some space We’ve triggered a new feature: dodge (for dodging things left/right). We can control how much if we set the dodge manually. HELPrct %&gt;% ggplot(aes(x=substance, y=age, color=sex)) + geom_boxplot(position=position_dodge(width=1)) + ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Issues with bigger data require(NHANES) dim(NHANES) ## [1] 10000 76 NHANES %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + facet_grid( Gender ~ PregnantNow ) + ggtitle(&quot;National Health and Nutrition Examination Survey&quot;) Although we can see a generally positive association (as we would expect), the over plotting may be hiding information. Using alpha (opacity) One way to deal with over plotting is to set the opacity low. NHANES %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point(alpha=0.01) + facet_grid( Gender ~ PregnantNow ) + ggtitle(&quot;National Health and Nutrition Examination Survey&quot;) geom_density2d Alternatively (or simultaneously) we might prefer a different geom altogether. NHANES %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_density2d() + facet_grid( Gender ~ PregnantNow ) + ggtitle(&quot;National Health and Nutrition Examination Survey&quot;) Multiple layers ggplot( data=HELPrct, aes(x=sex, y=age)) + geom_boxplot(outlier.size=0) + geom_jitter(alpha=.6) + coord_flip()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Multiple layers ggplot( data=HELPrct, aes(x=sex, y=age)) + geom_boxplot(outlier.size=0) + geom_point(alpha=.6, position=position_jitter(width=.1, height=0)) + coord_flip()+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Things I haven’t mentioned (much) coords (coord_flip() is good to know about) themes (for customizing appearance) position (position_dodge(), position_jitterdodge(), position_stack(), etc.) transforming axes require(ggthemes) ggplot(Births78, aes(x=date, y=births)) + geom_point() + theme_wsj() ggplot(data=HELPrct, aes(x=substance, y=age, color=sex)) + geom_boxplot(coef = 10, position=position_dodge()) + geom_point(aes(color=sex, fill=sex), position=position_jitterdodge()) + ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) A little bit of everything ggplot( data=HELPrct, aes(x=substance, y=age, color=sex)) + geom_boxplot(coef = 10, position=position_dodge(width=1)) + geom_point(aes(fill=sex), alpha=.5, position=position_jitterdodge(dodge.width=1)) + facet_wrap(~homeless)+ ggtitle(&quot;HELP clinical trial at detoxification unit&quot;) Want to learn more? docs.ggplot2.org/ Winston Chang’s: R Graphics Cookbook What else can we do? shiny interactive graphics / modeling https://shiny.rstudio.com/ plotly Plotly is an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js. The plotly R library contains the ggplotly function , which will convert ggplot2 figures into a Plotly object. Furthermore, you have the option of manipulating the Plotly object with the style function. https://plot.ly/ggplot2/getting-started/ Dynamic documents combination of RMarkdown, ggvis, and shiny References "],
["references.html", "References", " References "]
]
